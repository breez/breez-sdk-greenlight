// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.38.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'breez_services.dart';
import 'chain.dart';
import 'fiat.dart';
import 'frb_generated.dart';
import 'input_parser.dart';
import 'invoice.dart';
import 'lnurl/pay/model.dart';
import 'lsp.dart';
import 'models.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `block_on`, `get_breez_services`, `init`, `new`, `rt`
// These types are ignored because they are not used by any `pub` functions: `BindingLogger`

/// Wrapper around [BreezServices::connect] which also initializes SDK logging
Future<void> connect({required ConnectRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingConnect(req: req);

/// Check whether node service is initialized or not
Future<bool> isInitialized() => BreezSdkBindings.instance.api.crateBindingIsInitialized();

/// See [BreezServices::sync]
Future<void> sync() => BreezSdkBindings.instance.api.crateBindingSync();

/// See [BreezServices::node_credentials]
Future<NodeCredentials?> nodeCredentials() => BreezSdkBindings.instance.api.crateBindingNodeCredentials();

/// See [BreezServices::node_info]
Future<NodeState> nodeInfo() => BreezSdkBindings.instance.api.crateBindingNodeInfo();

/// See [BreezServices::configure_node]
Future<void> configureNode({required ConfigureNodeRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingConfigureNode(req: req);

/// Cleanup node resources and stop the signer.
Future<void> disconnect() => BreezSdkBindings.instance.api.crateBindingDisconnect();

/// See [BreezServices::sign_message]
Future<SignMessageResponse> signMessage({required SignMessageRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingSignMessage(req: req);

/// See [BreezServices::check_message]
Future<CheckMessageResponse> checkMessage({required CheckMessageRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingCheckMessage(req: req);

/// See [breez_services::mnemonic_to_seed]
Future<Uint8List> mnemonicToSeed({required String phrase}) =>
    BreezSdkBindings.instance.api.crateBindingMnemonicToSeed(phrase: phrase);

/// See [BreezServices::default_config]
Future<Config> defaultConfig(
        {required EnvironmentType envType, required String apiKey, required NodeConfig nodeConfig}) =>
    BreezSdkBindings.instance.api
        .crateBindingDefaultConfig(envType: envType, apiKey: apiKey, nodeConfig: nodeConfig);

/// See [BreezServices::static_backup]
Future<StaticBackupResponse> staticBackup({required StaticBackupRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingStaticBackup(req: req);

/// See [BreezServices::service_health_check]
Future<ServiceHealthCheckResponse> serviceHealthCheck({required String apiKey}) =>
    BreezSdkBindings.instance.api.crateBindingServiceHealthCheck(apiKey: apiKey);

/// If used, this must be called before `connect`. It can only be called once.
Stream<BreezEvent> breezEventsStream() => BreezSdkBindings.instance.api.crateBindingBreezEventsStream();

/// If used, this must be called before `connect`. It can only be called once.
Stream<LogEntry> breezLogStream() => BreezSdkBindings.instance.api.crateBindingBreezLogStream();

/// See [BreezServices::list_lsps]
Future<List<LspInformation>> listLsps() => BreezSdkBindings.instance.api.crateBindingListLsps();

/// See [BreezServices::connect_lsp]
Future<void> connectLsp({required String lspId}) =>
    BreezSdkBindings.instance.api.crateBindingConnectLsp(lspId: lspId);

/// See [BreezServices::lsp_id]
Future<String?> lspId() => BreezSdkBindings.instance.api.crateBindingLspId();

/// See [BreezServices::fetch_lsp_info]
Future<LspInformation?> fetchLspInfo({required String id}) =>
    BreezSdkBindings.instance.api.crateBindingFetchLspInfo(id: id);

/// See [BreezServices::lsp_info]
Future<LspInformation> lspInfo() => BreezSdkBindings.instance.api.crateBindingLspInfo();

/// See [BreezServices::close_lsp_channels]
Future<void> closeLspChannels() => BreezSdkBindings.instance.api.crateBindingCloseLspChannels();

Future<void> registerWebhook({required String webhookUrl}) =>
    BreezSdkBindings.instance.api.crateBindingRegisterWebhook(webhookUrl: webhookUrl);

Future<void> unregisterWebhook({required String webhookUrl}) =>
    BreezSdkBindings.instance.api.crateBindingUnregisterWebhook(webhookUrl: webhookUrl);

/// See [BreezServices::backup]
Future<void> backup() => BreezSdkBindings.instance.api.crateBindingBackup();

/// See [BreezServices::backup_status]
Future<BackupStatus> backupStatus() => BreezSdkBindings.instance.api.crateBindingBackupStatus();

Future<LNInvoice> parseInvoice({required String invoice}) =>
    BreezSdkBindings.instance.api.crateBindingParseInvoice(invoice: invoice);

Future<InputType> parseInput({required String input}) =>
    BreezSdkBindings.instance.api.crateBindingParseInput(input: input);

/// See [BreezServices::list_payments]
Future<List<Payment>> listPayments({required ListPaymentsRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingListPayments(req: req);

/// See [BreezServices::list_payments]
Future<Payment?> paymentByHash({required String hash}) =>
    BreezSdkBindings.instance.api.crateBindingPaymentByHash(hash: hash);

/// See [BreezServices::set_payment_metadata]
Future<void> setPaymentMetadata({required String hash, required String metadata}) =>
    BreezSdkBindings.instance.api.crateBindingSetPaymentMetadata(hash: hash, metadata: metadata);

/// See [BreezServices::send_payment]
Future<SendPaymentResponse> sendPayment({required SendPaymentRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingSendPayment(req: req);

/// See [BreezServices::send_spontaneous_payment]
Future<SendPaymentResponse> sendSpontaneousPayment({required SendSpontaneousPaymentRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingSendSpontaneousPayment(req: req);

/// See [BreezServices::receive_payment]
Future<ReceivePaymentResponse> receivePayment({required ReceivePaymentRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingReceivePayment(req: req);

/// See [BreezServices::lnurl_pay]
Future<LnUrlPayResult> lnurlPay({required LnUrlPayRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingLnurlPay(req: req);

/// See [BreezServices::lnurl_withdraw]
Future<LnUrlWithdrawResult> lnurlWithdraw({required LnUrlWithdrawRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingLnurlWithdraw(req: req);

/// See [BreezServices::lnurl_auth]
Future<LnUrlCallbackStatus> lnurlAuth({required LnUrlAuthRequestData reqData}) =>
    BreezSdkBindings.instance.api.crateBindingLnurlAuth(reqData: reqData);

/// See [BreezServices::report_issue]
Future<void> reportIssue({required ReportIssueRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingReportIssue(req: req);

/// See [BreezServices::fetch_fiat_rates]
Future<List<Rate>> fetchFiatRates() => BreezSdkBindings.instance.api.crateBindingFetchFiatRates();

/// See [BreezServices::list_fiat_currencies]
Future<List<FiatCurrency>> listFiatCurrencies() =>
    BreezSdkBindings.instance.api.crateBindingListFiatCurrencies();

/// See [BreezServices::max_reverse_swap_amount]
Future<MaxReverseSwapAmountResponse> maxReverseSwapAmount() =>
    BreezSdkBindings.instance.api.crateBindingMaxReverseSwapAmount();

/// See [BreezServices::send_onchain]
Future<SendOnchainResponse> sendOnchain({required SendOnchainRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingSendOnchain(req: req);

/// See [BreezServices::pay_onchain]
Future<PayOnchainResponse> payOnchain({required PayOnchainRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingPayOnchain(req: req);

/// See [BreezServices::receive_onchain]
Future<SwapInfo> receiveOnchain({required ReceiveOnchainRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingReceiveOnchain(req: req);

/// See [BreezServices::buy_bitcoin]
Future<BuyBitcoinResponse> buyBitcoin({required BuyBitcoinRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingBuyBitcoin(req: req);

/// See [BreezServices::redeem_onchain_funds]
Future<RedeemOnchainFundsResponse> redeemOnchainFunds({required RedeemOnchainFundsRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingRedeemOnchainFunds(req: req);

/// See [BreezServices::prepare_redeem_onchain_funds]
Future<PrepareRedeemOnchainFundsResponse> prepareRedeemOnchainFunds(
        {required PrepareRedeemOnchainFundsRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingPrepareRedeemOnchainFunds(req: req);

/// See [BreezServices::list_refundables]
Future<List<SwapInfo>> listRefundables() => BreezSdkBindings.instance.api.crateBindingListRefundables();

/// See [BreezServices::prepare_refund]
Future<PrepareRefundResponse> prepareRefund({required PrepareRefundRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingPrepareRefund(req: req);

/// See [BreezServices::refund]
Future<RefundResponse> refund({required RefundRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingRefund(req: req);

/// See [BreezServices::rescan_swaps]
Future<void> rescanSwaps() => BreezSdkBindings.instance.api.crateBindingRescanSwaps();

/// See [BreezServices::redeem_swap]
Future<void> redeemSwap({required String swapAddress}) =>
    BreezSdkBindings.instance.api.crateBindingRedeemSwap(swapAddress: swapAddress);

/// See [BreezServices::in_progress_swap]
Future<SwapInfo?> inProgressSwap() => BreezSdkBindings.instance.api.crateBindingInProgressSwap();

/// See [BreezServices::in_progress_reverse_swaps]
Future<List<ReverseSwapInfo>> inProgressReverseSwaps() =>
    BreezSdkBindings.instance.api.crateBindingInProgressReverseSwaps();

/// See [BreezServices::open_channel_fee]
Future<OpenChannelFeeResponse> openChannelFee({required OpenChannelFeeRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingOpenChannelFee(req: req);

/// See [BreezServices::fetch_reverse_swap_fees]
Future<ReverseSwapPairInfo> fetchReverseSwapFees({required ReverseSwapFeesRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingFetchReverseSwapFees(req: req);

/// See [BreezServices::onchain_payment_limits]
Future<OnchainPaymentLimitsResponse> onchainPaymentLimits() =>
    BreezSdkBindings.instance.api.crateBindingOnchainPaymentLimits();

/// See [BreezServices::prepare_onchain_payment]
Future<PrepareOnchainPaymentResponse> prepareOnchainPayment({required PrepareOnchainPaymentRequest req}) =>
    BreezSdkBindings.instance.api.crateBindingPrepareOnchainPayment(req: req);

/// See [BreezServices::in_progress_onchain_payments]
Future<List<ReverseSwapInfo>> inProgressOnchainPayments() =>
    BreezSdkBindings.instance.api.crateBindingInProgressOnchainPayments();

/// See [BreezServices::recommended_fees]
Future<RecommendedFees> recommendedFees() => BreezSdkBindings.instance.api.crateBindingRecommendedFees();

/// See [BreezServices::execute_dev_command]
Future<String> executeCommand({required String command}) =>
    BreezSdkBindings.instance.api.crateBindingExecuteCommand(command: command);

/// See [BreezServices::generate_diagnostic_data]
Future<String> generateDiagnosticData() => BreezSdkBindings.instance.api.crateBindingGenerateDiagnosticData();

class BindingEventListener {
  const BindingEventListener();

  Future<void> onEvent({required BreezEvent e}) =>
      BreezSdkBindings.instance.api.crateBindingBindingEventListenerOnEvent(that: this, e: e);

  @override
  int get hashCode => 0;

  @override
  bool operator ==(Object other) =>
      identical(this, other) || other is BindingEventListener && runtimeType == other.runtimeType;
}
