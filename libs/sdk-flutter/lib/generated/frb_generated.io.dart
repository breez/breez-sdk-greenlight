// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'binding.dart';
import 'breez_services.dart';
import 'chain.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'fiat.dart';
import 'frb_generated.dart';
import 'input_parser.dart';
import 'invoice.dart';
import 'lnurl/pay/model.dart';
import 'lsp.dart';
import 'models.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class BreezSdkBindingsApiImplPlatform extends BaseApiImpl<BreezSdkBindingsWire> {
  BreezSdkBindingsApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  RustStreamSink<BreezEvent> dco_decode_StreamSink_breez_event_Dco(dynamic raw);

  @protected
  RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Dco(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  AesSuccessActionDataDecrypted dco_decode_aes_success_action_data_decrypted(dynamic raw);

  @protected
  AesSuccessActionDataResult dco_decode_aes_success_action_data_result(dynamic raw);

  @protected
  BackupFailedData dco_decode_backup_failed_data(dynamic raw);

  @protected
  BackupStatus dco_decode_backup_status(dynamic raw);

  @protected
  BindingEventListener dco_decode_binding_event_listener(dynamic raw);

  @protected
  BitcoinAddressData dco_decode_bitcoin_address_data(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  AesSuccessActionDataDecrypted dco_decode_box_autoadd_aes_success_action_data_decrypted(dynamic raw);

  @protected
  AesSuccessActionDataResult dco_decode_box_autoadd_aes_success_action_data_result(dynamic raw);

  @protected
  BackupFailedData dco_decode_box_autoadd_backup_failed_data(dynamic raw);

  @protected
  BindingEventListener dco_decode_box_autoadd_binding_event_listener(dynamic raw);

  @protected
  BitcoinAddressData dco_decode_box_autoadd_bitcoin_address_data(dynamic raw);

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw);

  @protected
  BreezEvent dco_decode_box_autoadd_breez_event(dynamic raw);

  @protected
  BuyBitcoinRequest dco_decode_box_autoadd_buy_bitcoin_request(dynamic raw);

  @protected
  CheckMessageRequest dco_decode_box_autoadd_check_message_request(dynamic raw);

  @protected
  ClosedChannelPaymentDetails dco_decode_box_autoadd_closed_channel_payment_details(dynamic raw);

  @protected
  ConfigureNodeRequest dco_decode_box_autoadd_configure_node_request(dynamic raw);

  @protected
  ConnectRequest dco_decode_box_autoadd_connect_request(dynamic raw);

  @protected
  GreenlightCredentials dco_decode_box_autoadd_greenlight_credentials(dynamic raw);

  @protected
  GreenlightNodeConfig dco_decode_box_autoadd_greenlight_node_config(dynamic raw);

  @protected
  PlatformInt64 dco_decode_box_autoadd_i_64(dynamic raw);

  @protected
  InvoicePaidDetails dco_decode_box_autoadd_invoice_paid_details(dynamic raw);

  @protected
  ListPaymentsRequest dco_decode_box_autoadd_list_payments_request(dynamic raw);

  @protected
  LNInvoice dco_decode_box_autoadd_ln_invoice(dynamic raw);

  @protected
  LnPaymentDetails dco_decode_box_autoadd_ln_payment_details(dynamic raw);

  @protected
  LnUrlAuthRequestData dco_decode_box_autoadd_ln_url_auth_request_data(dynamic raw);

  @protected
  LnUrlErrorData dco_decode_box_autoadd_ln_url_error_data(dynamic raw);

  @protected
  LnUrlPayErrorData dco_decode_box_autoadd_ln_url_pay_error_data(dynamic raw);

  @protected
  LnUrlPayRequest dco_decode_box_autoadd_ln_url_pay_request(dynamic raw);

  @protected
  LnUrlPayRequestData dco_decode_box_autoadd_ln_url_pay_request_data(dynamic raw);

  @protected
  LnUrlPaySuccessData dco_decode_box_autoadd_ln_url_pay_success_data(dynamic raw);

  @protected
  LnUrlWithdrawRequest dco_decode_box_autoadd_ln_url_withdraw_request(dynamic raw);

  @protected
  LnUrlWithdrawRequestData dco_decode_box_autoadd_ln_url_withdraw_request_data(dynamic raw);

  @protected
  LnUrlWithdrawSuccessData dco_decode_box_autoadd_ln_url_withdraw_success_data(dynamic raw);

  @protected
  LspInformation dco_decode_box_autoadd_lsp_information(dynamic raw);

  @protected
  MessageSuccessActionData dco_decode_box_autoadd_message_success_action_data(dynamic raw);

  @protected
  NodeConfig dco_decode_box_autoadd_node_config(dynamic raw);

  @protected
  NodeCredentials dco_decode_box_autoadd_node_credentials(dynamic raw);

  @protected
  OpenChannelFeeRequest dco_decode_box_autoadd_open_channel_fee_request(dynamic raw);

  @protected
  OpeningFeeParams dco_decode_box_autoadd_opening_fee_params(dynamic raw);

  @protected
  PayOnchainRequest dco_decode_box_autoadd_pay_onchain_request(dynamic raw);

  @protected
  Payment dco_decode_box_autoadd_payment(dynamic raw);

  @protected
  PaymentFailedData dco_decode_box_autoadd_payment_failed_data(dynamic raw);

  @protected
  PrepareOnchainPaymentRequest dco_decode_box_autoadd_prepare_onchain_payment_request(dynamic raw);

  @protected
  PrepareRedeemOnchainFundsRequest dco_decode_box_autoadd_prepare_redeem_onchain_funds_request(dynamic raw);

  @protected
  PrepareRefundRequest dco_decode_box_autoadd_prepare_refund_request(dynamic raw);

  @protected
  ReceiveOnchainRequest dco_decode_box_autoadd_receive_onchain_request(dynamic raw);

  @protected
  ReceivePaymentRequest dco_decode_box_autoadd_receive_payment_request(dynamic raw);

  @protected
  RedeemOnchainFundsRequest dco_decode_box_autoadd_redeem_onchain_funds_request(dynamic raw);

  @protected
  RefundRequest dco_decode_box_autoadd_refund_request(dynamic raw);

  @protected
  ReportIssueRequest dco_decode_box_autoadd_report_issue_request(dynamic raw);

  @protected
  ReportPaymentFailureDetails dco_decode_box_autoadd_report_payment_failure_details(dynamic raw);

  @protected
  ReverseSwapFeesRequest dco_decode_box_autoadd_reverse_swap_fees_request(dynamic raw);

  @protected
  ReverseSwapInfo dco_decode_box_autoadd_reverse_swap_info(dynamic raw);

  @protected
  SendOnchainRequest dco_decode_box_autoadd_send_onchain_request(dynamic raw);

  @protected
  SendPaymentRequest dco_decode_box_autoadd_send_payment_request(dynamic raw);

  @protected
  SendSpontaneousPaymentRequest dco_decode_box_autoadd_send_spontaneous_payment_request(dynamic raw);

  @protected
  SignMessageRequest dco_decode_box_autoadd_sign_message_request(dynamic raw);

  @protected
  StaticBackupRequest dco_decode_box_autoadd_static_backup_request(dynamic raw);

  @protected
  SuccessActionProcessed dco_decode_box_autoadd_success_action_processed(dynamic raw);

  @protected
  SwapInfo dco_decode_box_autoadd_swap_info(dynamic raw);

  @protected
  Symbol dco_decode_box_autoadd_symbol(dynamic raw);

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw);

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw);

  @protected
  UrlSuccessActionData dco_decode_box_autoadd_url_success_action_data(dynamic raw);

  @protected
  BreezEvent dco_decode_breez_event(dynamic raw);

  @protected
  BuyBitcoinProvider dco_decode_buy_bitcoin_provider(dynamic raw);

  @protected
  BuyBitcoinRequest dco_decode_buy_bitcoin_request(dynamic raw);

  @protected
  BuyBitcoinResponse dco_decode_buy_bitcoin_response(dynamic raw);

  @protected
  ChannelState dco_decode_channel_state(dynamic raw);

  @protected
  CheckMessageRequest dco_decode_check_message_request(dynamic raw);

  @protected
  CheckMessageResponse dco_decode_check_message_response(dynamic raw);

  @protected
  ClosedChannelPaymentDetails dco_decode_closed_channel_payment_details(dynamic raw);

  @protected
  Config dco_decode_config(dynamic raw);

  @protected
  ConfigureNodeRequest dco_decode_configure_node_request(dynamic raw);

  @protected
  ConnectRequest dco_decode_connect_request(dynamic raw);

  @protected
  CurrencyInfo dco_decode_currency_info(dynamic raw);

  @protected
  EnvironmentType dco_decode_environment_type(dynamic raw);

  @protected
  double dco_decode_f_64(dynamic raw);

  @protected
  FiatCurrency dco_decode_fiat_currency(dynamic raw);

  @protected
  GreenlightCredentials dco_decode_greenlight_credentials(dynamic raw);

  @protected
  GreenlightNodeConfig dco_decode_greenlight_node_config(dynamic raw);

  @protected
  HealthCheckStatus dco_decode_health_check_status(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw);

  @protected
  InputType dco_decode_input_type(dynamic raw);

  @protected
  InvoicePaidDetails dco_decode_invoice_paid_details(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  List<FiatCurrency> dco_decode_list_fiat_currency(dynamic raw);

  @protected
  List<LocaleOverrides> dco_decode_list_locale_overrides(dynamic raw);

  @protected
  List<LocalizedName> dco_decode_list_localized_name(dynamic raw);

  @protected
  List<LspInformation> dco_decode_list_lsp_information(dynamic raw);

  @protected
  List<MetadataFilter> dco_decode_list_metadata_filter(dynamic raw);

  @protected
  List<OpeningFeeParams> dco_decode_list_opening_fee_params(dynamic raw);

  @protected
  List<Payment> dco_decode_list_payment(dynamic raw);

  @protected
  List<PaymentTypeFilter> dco_decode_list_payment_type_filter(dynamic raw);

  @protected
  ListPaymentsRequest dco_decode_list_payments_request(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<Rate> dco_decode_list_rate(dynamic raw);

  @protected
  List<ReverseSwapInfo> dco_decode_list_reverse_swap_info(dynamic raw);

  @protected
  List<RouteHint> dco_decode_list_route_hint(dynamic raw);

  @protected
  List<RouteHintHop> dco_decode_list_route_hint_hop(dynamic raw);

  @protected
  List<SwapInfo> dco_decode_list_swap_info(dynamic raw);

  @protected
  List<TlvEntry> dco_decode_list_tlv_entry(dynamic raw);

  @protected
  List<UnspentTransactionOutput> dco_decode_list_unspent_transaction_output(dynamic raw);

  @protected
  LNInvoice dco_decode_ln_invoice(dynamic raw);

  @protected
  LnPaymentDetails dco_decode_ln_payment_details(dynamic raw);

  @protected
  LnUrlAuthRequestData dco_decode_ln_url_auth_request_data(dynamic raw);

  @protected
  LnUrlCallbackStatus dco_decode_ln_url_callback_status(dynamic raw);

  @protected
  LnUrlErrorData dco_decode_ln_url_error_data(dynamic raw);

  @protected
  LnUrlPayErrorData dco_decode_ln_url_pay_error_data(dynamic raw);

  @protected
  LnUrlPayRequest dco_decode_ln_url_pay_request(dynamic raw);

  @protected
  LnUrlPayRequestData dco_decode_ln_url_pay_request_data(dynamic raw);

  @protected
  LnUrlPayResult dco_decode_ln_url_pay_result(dynamic raw);

  @protected
  LnUrlPaySuccessData dco_decode_ln_url_pay_success_data(dynamic raw);

  @protected
  LnUrlWithdrawRequest dco_decode_ln_url_withdraw_request(dynamic raw);

  @protected
  LnUrlWithdrawRequestData dco_decode_ln_url_withdraw_request_data(dynamic raw);

  @protected
  LnUrlWithdrawResult dco_decode_ln_url_withdraw_result(dynamic raw);

  @protected
  LnUrlWithdrawSuccessData dco_decode_ln_url_withdraw_success_data(dynamic raw);

  @protected
  LocaleOverrides dco_decode_locale_overrides(dynamic raw);

  @protected
  LocalizedName dco_decode_localized_name(dynamic raw);

  @protected
  LogEntry dco_decode_log_entry(dynamic raw);

  @protected
  LspInformation dco_decode_lsp_information(dynamic raw);

  @protected
  MaxReverseSwapAmountResponse dco_decode_max_reverse_swap_amount_response(dynamic raw);

  @protected
  MessageSuccessActionData dco_decode_message_success_action_data(dynamic raw);

  @protected
  MetadataFilter dco_decode_metadata_filter(dynamic raw);

  @protected
  Network dco_decode_network(dynamic raw);

  @protected
  NodeConfig dco_decode_node_config(dynamic raw);

  @protected
  NodeCredentials dco_decode_node_credentials(dynamic raw);

  @protected
  NodeState dco_decode_node_state(dynamic raw);

  @protected
  OnchainPaymentLimitsResponse dco_decode_onchain_payment_limits_response(dynamic raw);

  @protected
  OpenChannelFeeRequest dco_decode_open_channel_fee_request(dynamic raw);

  @protected
  OpenChannelFeeResponse dco_decode_open_channel_fee_response(dynamic raw);

  @protected
  OpeningFeeParams dco_decode_opening_fee_params(dynamic raw);

  @protected
  OpeningFeeParamsMenu dco_decode_opening_fee_params_menu(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw);

  @protected
  GreenlightCredentials? dco_decode_opt_box_autoadd_greenlight_credentials(dynamic raw);

  @protected
  PlatformInt64? dco_decode_opt_box_autoadd_i_64(dynamic raw);

  @protected
  LNInvoice? dco_decode_opt_box_autoadd_ln_invoice(dynamic raw);

  @protected
  LspInformation? dco_decode_opt_box_autoadd_lsp_information(dynamic raw);

  @protected
  NodeCredentials? dco_decode_opt_box_autoadd_node_credentials(dynamic raw);

  @protected
  OpeningFeeParams? dco_decode_opt_box_autoadd_opening_fee_params(dynamic raw);

  @protected
  Payment? dco_decode_opt_box_autoadd_payment(dynamic raw);

  @protected
  ReverseSwapInfo? dco_decode_opt_box_autoadd_reverse_swap_info(dynamic raw);

  @protected
  SuccessActionProcessed? dco_decode_opt_box_autoadd_success_action_processed(dynamic raw);

  @protected
  SwapInfo? dco_decode_opt_box_autoadd_swap_info(dynamic raw);

  @protected
  Symbol? dco_decode_opt_box_autoadd_symbol(dynamic raw);

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw);

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw);

  @protected
  List<String>? dco_decode_opt_list_String(dynamic raw);

  @protected
  List<LocaleOverrides>? dco_decode_opt_list_locale_overrides(dynamic raw);

  @protected
  List<LocalizedName>? dco_decode_opt_list_localized_name(dynamic raw);

  @protected
  List<MetadataFilter>? dco_decode_opt_list_metadata_filter(dynamic raw);

  @protected
  List<PaymentTypeFilter>? dco_decode_opt_list_payment_type_filter(dynamic raw);

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw);

  @protected
  List<TlvEntry>? dco_decode_opt_list_tlv_entry(dynamic raw);

  @protected
  PayOnchainRequest dco_decode_pay_onchain_request(dynamic raw);

  @protected
  PayOnchainResponse dco_decode_pay_onchain_response(dynamic raw);

  @protected
  Payment dco_decode_payment(dynamic raw);

  @protected
  PaymentDetails dco_decode_payment_details(dynamic raw);

  @protected
  PaymentFailedData dco_decode_payment_failed_data(dynamic raw);

  @protected
  PaymentStatus dco_decode_payment_status(dynamic raw);

  @protected
  PaymentType dco_decode_payment_type(dynamic raw);

  @protected
  PaymentTypeFilter dco_decode_payment_type_filter(dynamic raw);

  @protected
  PrepareOnchainPaymentRequest dco_decode_prepare_onchain_payment_request(dynamic raw);

  @protected
  PrepareOnchainPaymentResponse dco_decode_prepare_onchain_payment_response(dynamic raw);

  @protected
  PrepareRedeemOnchainFundsRequest dco_decode_prepare_redeem_onchain_funds_request(dynamic raw);

  @protected
  PrepareRedeemOnchainFundsResponse dco_decode_prepare_redeem_onchain_funds_response(dynamic raw);

  @protected
  PrepareRefundRequest dco_decode_prepare_refund_request(dynamic raw);

  @protected
  PrepareRefundResponse dco_decode_prepare_refund_response(dynamic raw);

  @protected
  Rate dco_decode_rate(dynamic raw);

  @protected
  ReceiveOnchainRequest dco_decode_receive_onchain_request(dynamic raw);

  @protected
  ReceivePaymentRequest dco_decode_receive_payment_request(dynamic raw);

  @protected
  ReceivePaymentResponse dco_decode_receive_payment_response(dynamic raw);

  @protected
  RecommendedFees dco_decode_recommended_fees(dynamic raw);

  @protected
  RedeemOnchainFundsRequest dco_decode_redeem_onchain_funds_request(dynamic raw);

  @protected
  RedeemOnchainFundsResponse dco_decode_redeem_onchain_funds_response(dynamic raw);

  @protected
  RefundRequest dco_decode_refund_request(dynamic raw);

  @protected
  RefundResponse dco_decode_refund_response(dynamic raw);

  @protected
  ReportIssueRequest dco_decode_report_issue_request(dynamic raw);

  @protected
  ReportPaymentFailureDetails dco_decode_report_payment_failure_details(dynamic raw);

  @protected
  ReverseSwapFeesRequest dco_decode_reverse_swap_fees_request(dynamic raw);

  @protected
  ReverseSwapInfo dco_decode_reverse_swap_info(dynamic raw);

  @protected
  ReverseSwapPairInfo dco_decode_reverse_swap_pair_info(dynamic raw);

  @protected
  ReverseSwapStatus dco_decode_reverse_swap_status(dynamic raw);

  @protected
  RouteHint dco_decode_route_hint(dynamic raw);

  @protected
  RouteHintHop dco_decode_route_hint_hop(dynamic raw);

  @protected
  SendOnchainRequest dco_decode_send_onchain_request(dynamic raw);

  @protected
  SendOnchainResponse dco_decode_send_onchain_response(dynamic raw);

  @protected
  SendPaymentRequest dco_decode_send_payment_request(dynamic raw);

  @protected
  SendPaymentResponse dco_decode_send_payment_response(dynamic raw);

  @protected
  SendSpontaneousPaymentRequest dco_decode_send_spontaneous_payment_request(dynamic raw);

  @protected
  ServiceHealthCheckResponse dco_decode_service_health_check_response(dynamic raw);

  @protected
  SignMessageRequest dco_decode_sign_message_request(dynamic raw);

  @protected
  SignMessageResponse dco_decode_sign_message_response(dynamic raw);

  @protected
  StaticBackupRequest dco_decode_static_backup_request(dynamic raw);

  @protected
  StaticBackupResponse dco_decode_static_backup_response(dynamic raw);

  @protected
  SuccessActionProcessed dco_decode_success_action_processed(dynamic raw);

  @protected
  SwapAmountType dco_decode_swap_amount_type(dynamic raw);

  @protected
  SwapInfo dco_decode_swap_info(dynamic raw);

  @protected
  SwapStatus dco_decode_swap_status(dynamic raw);

  @protected
  Symbol dco_decode_symbol(dynamic raw);

  @protected
  TlvEntry dco_decode_tlv_entry(dynamic raw);

  @protected
  int dco_decode_u_16(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  BigInt dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  UnspentTransactionOutput dco_decode_unspent_transaction_output(dynamic raw);

  @protected
  UrlSuccessActionData dco_decode_url_success_action_data(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  RustStreamSink<BreezEvent> sse_decode_StreamSink_breez_event_Dco(SseDeserializer deserializer);

  @protected
  RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Dco(SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  AesSuccessActionDataDecrypted sse_decode_aes_success_action_data_decrypted(SseDeserializer deserializer);

  @protected
  AesSuccessActionDataResult sse_decode_aes_success_action_data_result(SseDeserializer deserializer);

  @protected
  BackupFailedData sse_decode_backup_failed_data(SseDeserializer deserializer);

  @protected
  BackupStatus sse_decode_backup_status(SseDeserializer deserializer);

  @protected
  BindingEventListener sse_decode_binding_event_listener(SseDeserializer deserializer);

  @protected
  BitcoinAddressData sse_decode_bitcoin_address_data(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  AesSuccessActionDataDecrypted sse_decode_box_autoadd_aes_success_action_data_decrypted(
      SseDeserializer deserializer);

  @protected
  AesSuccessActionDataResult sse_decode_box_autoadd_aes_success_action_data_result(
      SseDeserializer deserializer);

  @protected
  BackupFailedData sse_decode_box_autoadd_backup_failed_data(SseDeserializer deserializer);

  @protected
  BindingEventListener sse_decode_box_autoadd_binding_event_listener(SseDeserializer deserializer);

  @protected
  BitcoinAddressData sse_decode_box_autoadd_bitcoin_address_data(SseDeserializer deserializer);

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer);

  @protected
  BreezEvent sse_decode_box_autoadd_breez_event(SseDeserializer deserializer);

  @protected
  BuyBitcoinRequest sse_decode_box_autoadd_buy_bitcoin_request(SseDeserializer deserializer);

  @protected
  CheckMessageRequest sse_decode_box_autoadd_check_message_request(SseDeserializer deserializer);

  @protected
  ClosedChannelPaymentDetails sse_decode_box_autoadd_closed_channel_payment_details(
      SseDeserializer deserializer);

  @protected
  ConfigureNodeRequest sse_decode_box_autoadd_configure_node_request(SseDeserializer deserializer);

  @protected
  ConnectRequest sse_decode_box_autoadd_connect_request(SseDeserializer deserializer);

  @protected
  GreenlightCredentials sse_decode_box_autoadd_greenlight_credentials(SseDeserializer deserializer);

  @protected
  GreenlightNodeConfig sse_decode_box_autoadd_greenlight_node_config(SseDeserializer deserializer);

  @protected
  PlatformInt64 sse_decode_box_autoadd_i_64(SseDeserializer deserializer);

  @protected
  InvoicePaidDetails sse_decode_box_autoadd_invoice_paid_details(SseDeserializer deserializer);

  @protected
  ListPaymentsRequest sse_decode_box_autoadd_list_payments_request(SseDeserializer deserializer);

  @protected
  LNInvoice sse_decode_box_autoadd_ln_invoice(SseDeserializer deserializer);

  @protected
  LnPaymentDetails sse_decode_box_autoadd_ln_payment_details(SseDeserializer deserializer);

  @protected
  LnUrlAuthRequestData sse_decode_box_autoadd_ln_url_auth_request_data(SseDeserializer deserializer);

  @protected
  LnUrlErrorData sse_decode_box_autoadd_ln_url_error_data(SseDeserializer deserializer);

  @protected
  LnUrlPayErrorData sse_decode_box_autoadd_ln_url_pay_error_data(SseDeserializer deserializer);

  @protected
  LnUrlPayRequest sse_decode_box_autoadd_ln_url_pay_request(SseDeserializer deserializer);

  @protected
  LnUrlPayRequestData sse_decode_box_autoadd_ln_url_pay_request_data(SseDeserializer deserializer);

  @protected
  LnUrlPaySuccessData sse_decode_box_autoadd_ln_url_pay_success_data(SseDeserializer deserializer);

  @protected
  LnUrlWithdrawRequest sse_decode_box_autoadd_ln_url_withdraw_request(SseDeserializer deserializer);

  @protected
  LnUrlWithdrawRequestData sse_decode_box_autoadd_ln_url_withdraw_request_data(SseDeserializer deserializer);

  @protected
  LnUrlWithdrawSuccessData sse_decode_box_autoadd_ln_url_withdraw_success_data(SseDeserializer deserializer);

  @protected
  LspInformation sse_decode_box_autoadd_lsp_information(SseDeserializer deserializer);

  @protected
  MessageSuccessActionData sse_decode_box_autoadd_message_success_action_data(SseDeserializer deserializer);

  @protected
  NodeConfig sse_decode_box_autoadd_node_config(SseDeserializer deserializer);

  @protected
  NodeCredentials sse_decode_box_autoadd_node_credentials(SseDeserializer deserializer);

  @protected
  OpenChannelFeeRequest sse_decode_box_autoadd_open_channel_fee_request(SseDeserializer deserializer);

  @protected
  OpeningFeeParams sse_decode_box_autoadd_opening_fee_params(SseDeserializer deserializer);

  @protected
  PayOnchainRequest sse_decode_box_autoadd_pay_onchain_request(SseDeserializer deserializer);

  @protected
  Payment sse_decode_box_autoadd_payment(SseDeserializer deserializer);

  @protected
  PaymentFailedData sse_decode_box_autoadd_payment_failed_data(SseDeserializer deserializer);

  @protected
  PrepareOnchainPaymentRequest sse_decode_box_autoadd_prepare_onchain_payment_request(
      SseDeserializer deserializer);

  @protected
  PrepareRedeemOnchainFundsRequest sse_decode_box_autoadd_prepare_redeem_onchain_funds_request(
      SseDeserializer deserializer);

  @protected
  PrepareRefundRequest sse_decode_box_autoadd_prepare_refund_request(SseDeserializer deserializer);

  @protected
  ReceiveOnchainRequest sse_decode_box_autoadd_receive_onchain_request(SseDeserializer deserializer);

  @protected
  ReceivePaymentRequest sse_decode_box_autoadd_receive_payment_request(SseDeserializer deserializer);

  @protected
  RedeemOnchainFundsRequest sse_decode_box_autoadd_redeem_onchain_funds_request(SseDeserializer deserializer);

  @protected
  RefundRequest sse_decode_box_autoadd_refund_request(SseDeserializer deserializer);

  @protected
  ReportIssueRequest sse_decode_box_autoadd_report_issue_request(SseDeserializer deserializer);

  @protected
  ReportPaymentFailureDetails sse_decode_box_autoadd_report_payment_failure_details(
      SseDeserializer deserializer);

  @protected
  ReverseSwapFeesRequest sse_decode_box_autoadd_reverse_swap_fees_request(SseDeserializer deserializer);

  @protected
  ReverseSwapInfo sse_decode_box_autoadd_reverse_swap_info(SseDeserializer deserializer);

  @protected
  SendOnchainRequest sse_decode_box_autoadd_send_onchain_request(SseDeserializer deserializer);

  @protected
  SendPaymentRequest sse_decode_box_autoadd_send_payment_request(SseDeserializer deserializer);

  @protected
  SendSpontaneousPaymentRequest sse_decode_box_autoadd_send_spontaneous_payment_request(
      SseDeserializer deserializer);

  @protected
  SignMessageRequest sse_decode_box_autoadd_sign_message_request(SseDeserializer deserializer);

  @protected
  StaticBackupRequest sse_decode_box_autoadd_static_backup_request(SseDeserializer deserializer);

  @protected
  SuccessActionProcessed sse_decode_box_autoadd_success_action_processed(SseDeserializer deserializer);

  @protected
  SwapInfo sse_decode_box_autoadd_swap_info(SseDeserializer deserializer);

  @protected
  Symbol sse_decode_box_autoadd_symbol(SseDeserializer deserializer);

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  UrlSuccessActionData sse_decode_box_autoadd_url_success_action_data(SseDeserializer deserializer);

  @protected
  BreezEvent sse_decode_breez_event(SseDeserializer deserializer);

  @protected
  BuyBitcoinProvider sse_decode_buy_bitcoin_provider(SseDeserializer deserializer);

  @protected
  BuyBitcoinRequest sse_decode_buy_bitcoin_request(SseDeserializer deserializer);

  @protected
  BuyBitcoinResponse sse_decode_buy_bitcoin_response(SseDeserializer deserializer);

  @protected
  ChannelState sse_decode_channel_state(SseDeserializer deserializer);

  @protected
  CheckMessageRequest sse_decode_check_message_request(SseDeserializer deserializer);

  @protected
  CheckMessageResponse sse_decode_check_message_response(SseDeserializer deserializer);

  @protected
  ClosedChannelPaymentDetails sse_decode_closed_channel_payment_details(SseDeserializer deserializer);

  @protected
  Config sse_decode_config(SseDeserializer deserializer);

  @protected
  ConfigureNodeRequest sse_decode_configure_node_request(SseDeserializer deserializer);

  @protected
  ConnectRequest sse_decode_connect_request(SseDeserializer deserializer);

  @protected
  CurrencyInfo sse_decode_currency_info(SseDeserializer deserializer);

  @protected
  EnvironmentType sse_decode_environment_type(SseDeserializer deserializer);

  @protected
  double sse_decode_f_64(SseDeserializer deserializer);

  @protected
  FiatCurrency sse_decode_fiat_currency(SseDeserializer deserializer);

  @protected
  GreenlightCredentials sse_decode_greenlight_credentials(SseDeserializer deserializer);

  @protected
  GreenlightNodeConfig sse_decode_greenlight_node_config(SseDeserializer deserializer);

  @protected
  HealthCheckStatus sse_decode_health_check_status(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer);

  @protected
  InputType sse_decode_input_type(SseDeserializer deserializer);

  @protected
  InvoicePaidDetails sse_decode_invoice_paid_details(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  List<FiatCurrency> sse_decode_list_fiat_currency(SseDeserializer deserializer);

  @protected
  List<LocaleOverrides> sse_decode_list_locale_overrides(SseDeserializer deserializer);

  @protected
  List<LocalizedName> sse_decode_list_localized_name(SseDeserializer deserializer);

  @protected
  List<LspInformation> sse_decode_list_lsp_information(SseDeserializer deserializer);

  @protected
  List<MetadataFilter> sse_decode_list_metadata_filter(SseDeserializer deserializer);

  @protected
  List<OpeningFeeParams> sse_decode_list_opening_fee_params(SseDeserializer deserializer);

  @protected
  List<Payment> sse_decode_list_payment(SseDeserializer deserializer);

  @protected
  List<PaymentTypeFilter> sse_decode_list_payment_type_filter(SseDeserializer deserializer);

  @protected
  ListPaymentsRequest sse_decode_list_payments_request(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<Rate> sse_decode_list_rate(SseDeserializer deserializer);

  @protected
  List<ReverseSwapInfo> sse_decode_list_reverse_swap_info(SseDeserializer deserializer);

  @protected
  List<RouteHint> sse_decode_list_route_hint(SseDeserializer deserializer);

  @protected
  List<RouteHintHop> sse_decode_list_route_hint_hop(SseDeserializer deserializer);

  @protected
  List<SwapInfo> sse_decode_list_swap_info(SseDeserializer deserializer);

  @protected
  List<TlvEntry> sse_decode_list_tlv_entry(SseDeserializer deserializer);

  @protected
  List<UnspentTransactionOutput> sse_decode_list_unspent_transaction_output(SseDeserializer deserializer);

  @protected
  LNInvoice sse_decode_ln_invoice(SseDeserializer deserializer);

  @protected
  LnPaymentDetails sse_decode_ln_payment_details(SseDeserializer deserializer);

  @protected
  LnUrlAuthRequestData sse_decode_ln_url_auth_request_data(SseDeserializer deserializer);

  @protected
  LnUrlCallbackStatus sse_decode_ln_url_callback_status(SseDeserializer deserializer);

  @protected
  LnUrlErrorData sse_decode_ln_url_error_data(SseDeserializer deserializer);

  @protected
  LnUrlPayErrorData sse_decode_ln_url_pay_error_data(SseDeserializer deserializer);

  @protected
  LnUrlPayRequest sse_decode_ln_url_pay_request(SseDeserializer deserializer);

  @protected
  LnUrlPayRequestData sse_decode_ln_url_pay_request_data(SseDeserializer deserializer);

  @protected
  LnUrlPayResult sse_decode_ln_url_pay_result(SseDeserializer deserializer);

  @protected
  LnUrlPaySuccessData sse_decode_ln_url_pay_success_data(SseDeserializer deserializer);

  @protected
  LnUrlWithdrawRequest sse_decode_ln_url_withdraw_request(SseDeserializer deserializer);

  @protected
  LnUrlWithdrawRequestData sse_decode_ln_url_withdraw_request_data(SseDeserializer deserializer);

  @protected
  LnUrlWithdrawResult sse_decode_ln_url_withdraw_result(SseDeserializer deserializer);

  @protected
  LnUrlWithdrawSuccessData sse_decode_ln_url_withdraw_success_data(SseDeserializer deserializer);

  @protected
  LocaleOverrides sse_decode_locale_overrides(SseDeserializer deserializer);

  @protected
  LocalizedName sse_decode_localized_name(SseDeserializer deserializer);

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer);

  @protected
  LspInformation sse_decode_lsp_information(SseDeserializer deserializer);

  @protected
  MaxReverseSwapAmountResponse sse_decode_max_reverse_swap_amount_response(SseDeserializer deserializer);

  @protected
  MessageSuccessActionData sse_decode_message_success_action_data(SseDeserializer deserializer);

  @protected
  MetadataFilter sse_decode_metadata_filter(SseDeserializer deserializer);

  @protected
  Network sse_decode_network(SseDeserializer deserializer);

  @protected
  NodeConfig sse_decode_node_config(SseDeserializer deserializer);

  @protected
  NodeCredentials sse_decode_node_credentials(SseDeserializer deserializer);

  @protected
  NodeState sse_decode_node_state(SseDeserializer deserializer);

  @protected
  OnchainPaymentLimitsResponse sse_decode_onchain_payment_limits_response(SseDeserializer deserializer);

  @protected
  OpenChannelFeeRequest sse_decode_open_channel_fee_request(SseDeserializer deserializer);

  @protected
  OpenChannelFeeResponse sse_decode_open_channel_fee_response(SseDeserializer deserializer);

  @protected
  OpeningFeeParams sse_decode_opening_fee_params(SseDeserializer deserializer);

  @protected
  OpeningFeeParamsMenu sse_decode_opening_fee_params_menu(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer);

  @protected
  GreenlightCredentials? sse_decode_opt_box_autoadd_greenlight_credentials(SseDeserializer deserializer);

  @protected
  PlatformInt64? sse_decode_opt_box_autoadd_i_64(SseDeserializer deserializer);

  @protected
  LNInvoice? sse_decode_opt_box_autoadd_ln_invoice(SseDeserializer deserializer);

  @protected
  LspInformation? sse_decode_opt_box_autoadd_lsp_information(SseDeserializer deserializer);

  @protected
  NodeCredentials? sse_decode_opt_box_autoadd_node_credentials(SseDeserializer deserializer);

  @protected
  OpeningFeeParams? sse_decode_opt_box_autoadd_opening_fee_params(SseDeserializer deserializer);

  @protected
  Payment? sse_decode_opt_box_autoadd_payment(SseDeserializer deserializer);

  @protected
  ReverseSwapInfo? sse_decode_opt_box_autoadd_reverse_swap_info(SseDeserializer deserializer);

  @protected
  SuccessActionProcessed? sse_decode_opt_box_autoadd_success_action_processed(SseDeserializer deserializer);

  @protected
  SwapInfo? sse_decode_opt_box_autoadd_swap_info(SseDeserializer deserializer);

  @protected
  Symbol? sse_decode_opt_box_autoadd_symbol(SseDeserializer deserializer);

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer);

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer);

  @protected
  List<String>? sse_decode_opt_list_String(SseDeserializer deserializer);

  @protected
  List<LocaleOverrides>? sse_decode_opt_list_locale_overrides(SseDeserializer deserializer);

  @protected
  List<LocalizedName>? sse_decode_opt_list_localized_name(SseDeserializer deserializer);

  @protected
  List<MetadataFilter>? sse_decode_opt_list_metadata_filter(SseDeserializer deserializer);

  @protected
  List<PaymentTypeFilter>? sse_decode_opt_list_payment_type_filter(SseDeserializer deserializer);

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<TlvEntry>? sse_decode_opt_list_tlv_entry(SseDeserializer deserializer);

  @protected
  PayOnchainRequest sse_decode_pay_onchain_request(SseDeserializer deserializer);

  @protected
  PayOnchainResponse sse_decode_pay_onchain_response(SseDeserializer deserializer);

  @protected
  Payment sse_decode_payment(SseDeserializer deserializer);

  @protected
  PaymentDetails sse_decode_payment_details(SseDeserializer deserializer);

  @protected
  PaymentFailedData sse_decode_payment_failed_data(SseDeserializer deserializer);

  @protected
  PaymentStatus sse_decode_payment_status(SseDeserializer deserializer);

  @protected
  PaymentType sse_decode_payment_type(SseDeserializer deserializer);

  @protected
  PaymentTypeFilter sse_decode_payment_type_filter(SseDeserializer deserializer);

  @protected
  PrepareOnchainPaymentRequest sse_decode_prepare_onchain_payment_request(SseDeserializer deserializer);

  @protected
  PrepareOnchainPaymentResponse sse_decode_prepare_onchain_payment_response(SseDeserializer deserializer);

  @protected
  PrepareRedeemOnchainFundsRequest sse_decode_prepare_redeem_onchain_funds_request(
      SseDeserializer deserializer);

  @protected
  PrepareRedeemOnchainFundsResponse sse_decode_prepare_redeem_onchain_funds_response(
      SseDeserializer deserializer);

  @protected
  PrepareRefundRequest sse_decode_prepare_refund_request(SseDeserializer deserializer);

  @protected
  PrepareRefundResponse sse_decode_prepare_refund_response(SseDeserializer deserializer);

  @protected
  Rate sse_decode_rate(SseDeserializer deserializer);

  @protected
  ReceiveOnchainRequest sse_decode_receive_onchain_request(SseDeserializer deserializer);

  @protected
  ReceivePaymentRequest sse_decode_receive_payment_request(SseDeserializer deserializer);

  @protected
  ReceivePaymentResponse sse_decode_receive_payment_response(SseDeserializer deserializer);

  @protected
  RecommendedFees sse_decode_recommended_fees(SseDeserializer deserializer);

  @protected
  RedeemOnchainFundsRequest sse_decode_redeem_onchain_funds_request(SseDeserializer deserializer);

  @protected
  RedeemOnchainFundsResponse sse_decode_redeem_onchain_funds_response(SseDeserializer deserializer);

  @protected
  RefundRequest sse_decode_refund_request(SseDeserializer deserializer);

  @protected
  RefundResponse sse_decode_refund_response(SseDeserializer deserializer);

  @protected
  ReportIssueRequest sse_decode_report_issue_request(SseDeserializer deserializer);

  @protected
  ReportPaymentFailureDetails sse_decode_report_payment_failure_details(SseDeserializer deserializer);

  @protected
  ReverseSwapFeesRequest sse_decode_reverse_swap_fees_request(SseDeserializer deserializer);

  @protected
  ReverseSwapInfo sse_decode_reverse_swap_info(SseDeserializer deserializer);

  @protected
  ReverseSwapPairInfo sse_decode_reverse_swap_pair_info(SseDeserializer deserializer);

  @protected
  ReverseSwapStatus sse_decode_reverse_swap_status(SseDeserializer deserializer);

  @protected
  RouteHint sse_decode_route_hint(SseDeserializer deserializer);

  @protected
  RouteHintHop sse_decode_route_hint_hop(SseDeserializer deserializer);

  @protected
  SendOnchainRequest sse_decode_send_onchain_request(SseDeserializer deserializer);

  @protected
  SendOnchainResponse sse_decode_send_onchain_response(SseDeserializer deserializer);

  @protected
  SendPaymentRequest sse_decode_send_payment_request(SseDeserializer deserializer);

  @protected
  SendPaymentResponse sse_decode_send_payment_response(SseDeserializer deserializer);

  @protected
  SendSpontaneousPaymentRequest sse_decode_send_spontaneous_payment_request(SseDeserializer deserializer);

  @protected
  ServiceHealthCheckResponse sse_decode_service_health_check_response(SseDeserializer deserializer);

  @protected
  SignMessageRequest sse_decode_sign_message_request(SseDeserializer deserializer);

  @protected
  SignMessageResponse sse_decode_sign_message_response(SseDeserializer deserializer);

  @protected
  StaticBackupRequest sse_decode_static_backup_request(SseDeserializer deserializer);

  @protected
  StaticBackupResponse sse_decode_static_backup_response(SseDeserializer deserializer);

  @protected
  SuccessActionProcessed sse_decode_success_action_processed(SseDeserializer deserializer);

  @protected
  SwapAmountType sse_decode_swap_amount_type(SseDeserializer deserializer);

  @protected
  SwapInfo sse_decode_swap_info(SseDeserializer deserializer);

  @protected
  SwapStatus sse_decode_swap_status(SseDeserializer deserializer);

  @protected
  Symbol sse_decode_symbol(SseDeserializer deserializer);

  @protected
  TlvEntry sse_decode_tlv_entry(SseDeserializer deserializer);

  @protected
  int sse_decode_u_16(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  UnspentTransactionOutput sse_decode_unspent_transaction_output(SseDeserializer deserializer);

  @protected
  UrlSuccessActionData sse_decode_url_success_action_data(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_AnyhowException(AnyhowException raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_StreamSink_breez_event_Dco(
      RustStreamSink<BreezEvent> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_String(raw.setupAndSerialize(
        codec: DcoCodec(
      decodeSuccessData: dco_decode_breez_event,
      decodeErrorData: dco_decode_AnyhowException,
    )));
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_StreamSink_log_entry_Dco(
      RustStreamSink<LogEntry> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_String(raw.setupAndSerialize(
        codec: DcoCodec(
      decodeSuccessData: dco_decode_log_entry,
      decodeErrorData: dco_decode_AnyhowException,
    )));
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_cst_aes_success_action_data_decrypted>
      cst_encode_box_autoadd_aes_success_action_data_decrypted(AesSuccessActionDataDecrypted raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_aes_success_action_data_decrypted();
    cst_api_fill_to_wire_aes_success_action_data_decrypted(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_aes_success_action_data_result> cst_encode_box_autoadd_aes_success_action_data_result(
      AesSuccessActionDataResult raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_aes_success_action_data_result();
    cst_api_fill_to_wire_aes_success_action_data_result(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_backup_failed_data> cst_encode_box_autoadd_backup_failed_data(BackupFailedData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_backup_failed_data();
    cst_api_fill_to_wire_backup_failed_data(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_binding_event_listener> cst_encode_box_autoadd_binding_event_listener(
      BindingEventListener raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_binding_event_listener();

    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_bitcoin_address_data> cst_encode_box_autoadd_bitcoin_address_data(
      BitcoinAddressData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_bitcoin_address_data();
    cst_api_fill_to_wire_bitcoin_address_data(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Bool> cst_encode_box_autoadd_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_bool(cst_encode_bool(raw));
  }

  @protected
  ffi.Pointer<wire_cst_breez_event> cst_encode_box_autoadd_breez_event(BreezEvent raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_breez_event();
    cst_api_fill_to_wire_breez_event(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_buy_bitcoin_request> cst_encode_box_autoadd_buy_bitcoin_request(
      BuyBitcoinRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_buy_bitcoin_request();
    cst_api_fill_to_wire_buy_bitcoin_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_check_message_request> cst_encode_box_autoadd_check_message_request(
      CheckMessageRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_check_message_request();
    cst_api_fill_to_wire_check_message_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_closed_channel_payment_details> cst_encode_box_autoadd_closed_channel_payment_details(
      ClosedChannelPaymentDetails raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_closed_channel_payment_details();
    cst_api_fill_to_wire_closed_channel_payment_details(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_configure_node_request> cst_encode_box_autoadd_configure_node_request(
      ConfigureNodeRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_configure_node_request();
    cst_api_fill_to_wire_configure_node_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_connect_request> cst_encode_box_autoadd_connect_request(ConnectRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_connect_request();
    cst_api_fill_to_wire_connect_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_greenlight_credentials> cst_encode_box_autoadd_greenlight_credentials(
      GreenlightCredentials raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_greenlight_credentials();
    cst_api_fill_to_wire_greenlight_credentials(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_greenlight_node_config> cst_encode_box_autoadd_greenlight_node_config(
      GreenlightNodeConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_greenlight_node_config();
    cst_api_fill_to_wire_greenlight_node_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Int64> cst_encode_box_autoadd_i_64(PlatformInt64 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_i_64(cst_encode_i_64(raw));
  }

  @protected
  ffi.Pointer<wire_cst_invoice_paid_details> cst_encode_box_autoadd_invoice_paid_details(
      InvoicePaidDetails raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_invoice_paid_details();
    cst_api_fill_to_wire_invoice_paid_details(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_list_payments_request> cst_encode_box_autoadd_list_payments_request(
      ListPaymentsRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_list_payments_request();
    cst_api_fill_to_wire_list_payments_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ln_invoice> cst_encode_box_autoadd_ln_invoice(LNInvoice raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ln_invoice();
    cst_api_fill_to_wire_ln_invoice(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ln_payment_details> cst_encode_box_autoadd_ln_payment_details(LnPaymentDetails raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ln_payment_details();
    cst_api_fill_to_wire_ln_payment_details(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ln_url_auth_request_data> cst_encode_box_autoadd_ln_url_auth_request_data(
      LnUrlAuthRequestData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ln_url_auth_request_data();
    cst_api_fill_to_wire_ln_url_auth_request_data(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ln_url_error_data> cst_encode_box_autoadd_ln_url_error_data(LnUrlErrorData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ln_url_error_data();
    cst_api_fill_to_wire_ln_url_error_data(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ln_url_pay_error_data> cst_encode_box_autoadd_ln_url_pay_error_data(
      LnUrlPayErrorData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ln_url_pay_error_data();
    cst_api_fill_to_wire_ln_url_pay_error_data(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ln_url_pay_request> cst_encode_box_autoadd_ln_url_pay_request(LnUrlPayRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ln_url_pay_request();
    cst_api_fill_to_wire_ln_url_pay_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ln_url_pay_request_data> cst_encode_box_autoadd_ln_url_pay_request_data(
      LnUrlPayRequestData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ln_url_pay_request_data();
    cst_api_fill_to_wire_ln_url_pay_request_data(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ln_url_pay_success_data> cst_encode_box_autoadd_ln_url_pay_success_data(
      LnUrlPaySuccessData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ln_url_pay_success_data();
    cst_api_fill_to_wire_ln_url_pay_success_data(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ln_url_withdraw_request> cst_encode_box_autoadd_ln_url_withdraw_request(
      LnUrlWithdrawRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ln_url_withdraw_request();
    cst_api_fill_to_wire_ln_url_withdraw_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ln_url_withdraw_request_data> cst_encode_box_autoadd_ln_url_withdraw_request_data(
      LnUrlWithdrawRequestData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ln_url_withdraw_request_data();
    cst_api_fill_to_wire_ln_url_withdraw_request_data(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_ln_url_withdraw_success_data> cst_encode_box_autoadd_ln_url_withdraw_success_data(
      LnUrlWithdrawSuccessData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_ln_url_withdraw_success_data();
    cst_api_fill_to_wire_ln_url_withdraw_success_data(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_lsp_information> cst_encode_box_autoadd_lsp_information(LspInformation raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_lsp_information();
    cst_api_fill_to_wire_lsp_information(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_message_success_action_data> cst_encode_box_autoadd_message_success_action_data(
      MessageSuccessActionData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_message_success_action_data();
    cst_api_fill_to_wire_message_success_action_data(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_node_config> cst_encode_box_autoadd_node_config(NodeConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_node_config();
    cst_api_fill_to_wire_node_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_node_credentials> cst_encode_box_autoadd_node_credentials(NodeCredentials raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_node_credentials();
    cst_api_fill_to_wire_node_credentials(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_open_channel_fee_request> cst_encode_box_autoadd_open_channel_fee_request(
      OpenChannelFeeRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_open_channel_fee_request();
    cst_api_fill_to_wire_open_channel_fee_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_opening_fee_params> cst_encode_box_autoadd_opening_fee_params(OpeningFeeParams raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_opening_fee_params();
    cst_api_fill_to_wire_opening_fee_params(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_pay_onchain_request> cst_encode_box_autoadd_pay_onchain_request(
      PayOnchainRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_pay_onchain_request();
    cst_api_fill_to_wire_pay_onchain_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_payment> cst_encode_box_autoadd_payment(Payment raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_payment();
    cst_api_fill_to_wire_payment(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_payment_failed_data> cst_encode_box_autoadd_payment_failed_data(
      PaymentFailedData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_payment_failed_data();
    cst_api_fill_to_wire_payment_failed_data(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_prepare_onchain_payment_request>
      cst_encode_box_autoadd_prepare_onchain_payment_request(PrepareOnchainPaymentRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_prepare_onchain_payment_request();
    cst_api_fill_to_wire_prepare_onchain_payment_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_prepare_redeem_onchain_funds_request>
      cst_encode_box_autoadd_prepare_redeem_onchain_funds_request(PrepareRedeemOnchainFundsRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_prepare_redeem_onchain_funds_request();
    cst_api_fill_to_wire_prepare_redeem_onchain_funds_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_prepare_refund_request> cst_encode_box_autoadd_prepare_refund_request(
      PrepareRefundRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_prepare_refund_request();
    cst_api_fill_to_wire_prepare_refund_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_receive_onchain_request> cst_encode_box_autoadd_receive_onchain_request(
      ReceiveOnchainRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_receive_onchain_request();
    cst_api_fill_to_wire_receive_onchain_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_receive_payment_request> cst_encode_box_autoadd_receive_payment_request(
      ReceivePaymentRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_receive_payment_request();
    cst_api_fill_to_wire_receive_payment_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_redeem_onchain_funds_request> cst_encode_box_autoadd_redeem_onchain_funds_request(
      RedeemOnchainFundsRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_redeem_onchain_funds_request();
    cst_api_fill_to_wire_redeem_onchain_funds_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_refund_request> cst_encode_box_autoadd_refund_request(RefundRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_refund_request();
    cst_api_fill_to_wire_refund_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_report_issue_request> cst_encode_box_autoadd_report_issue_request(
      ReportIssueRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_report_issue_request();
    cst_api_fill_to_wire_report_issue_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_report_payment_failure_details> cst_encode_box_autoadd_report_payment_failure_details(
      ReportPaymentFailureDetails raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_report_payment_failure_details();
    cst_api_fill_to_wire_report_payment_failure_details(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_reverse_swap_fees_request> cst_encode_box_autoadd_reverse_swap_fees_request(
      ReverseSwapFeesRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_reverse_swap_fees_request();
    cst_api_fill_to_wire_reverse_swap_fees_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_reverse_swap_info> cst_encode_box_autoadd_reverse_swap_info(ReverseSwapInfo raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_reverse_swap_info();
    cst_api_fill_to_wire_reverse_swap_info(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_send_onchain_request> cst_encode_box_autoadd_send_onchain_request(
      SendOnchainRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_send_onchain_request();
    cst_api_fill_to_wire_send_onchain_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_send_payment_request> cst_encode_box_autoadd_send_payment_request(
      SendPaymentRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_send_payment_request();
    cst_api_fill_to_wire_send_payment_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_send_spontaneous_payment_request>
      cst_encode_box_autoadd_send_spontaneous_payment_request(SendSpontaneousPaymentRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_send_spontaneous_payment_request();
    cst_api_fill_to_wire_send_spontaneous_payment_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_sign_message_request> cst_encode_box_autoadd_sign_message_request(
      SignMessageRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_sign_message_request();
    cst_api_fill_to_wire_sign_message_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_static_backup_request> cst_encode_box_autoadd_static_backup_request(
      StaticBackupRequest raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_static_backup_request();
    cst_api_fill_to_wire_static_backup_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_success_action_processed> cst_encode_box_autoadd_success_action_processed(
      SuccessActionProcessed raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_success_action_processed();
    cst_api_fill_to_wire_success_action_processed(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_swap_info> cst_encode_box_autoadd_swap_info(SwapInfo raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_swap_info();
    cst_api_fill_to_wire_swap_info(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_symbol> cst_encode_box_autoadd_symbol(Symbol raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_symbol();
    cst_api_fill_to_wire_symbol(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint32> cst_encode_box_autoadd_u_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_u_32(cst_encode_u_32(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_box_autoadd_u_64(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return wire.cst_new_box_autoadd_u_64(cst_encode_u_64(raw));
  }

  @protected
  ffi.Pointer<wire_cst_url_success_action_data> cst_encode_box_autoadd_url_success_action_data(
      UrlSuccessActionData raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_url_success_action_data();
    cst_api_fill_to_wire_url_success_action_data(raw, ptr.ref);
    return ptr;
  }

  @protected
  int cst_encode_i_64(PlatformInt64 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.toInt();
  }

  @protected
  ffi.Pointer<wire_cst_list_String> cst_encode_list_String(List<String> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_String(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_String(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_fiat_currency> cst_encode_list_fiat_currency(List<FiatCurrency> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_fiat_currency(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_fiat_currency(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_locale_overrides> cst_encode_list_locale_overrides(List<LocaleOverrides> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_locale_overrides(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_locale_overrides(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_localized_name> cst_encode_list_localized_name(List<LocalizedName> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_localized_name(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_localized_name(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_lsp_information> cst_encode_list_lsp_information(List<LspInformation> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_lsp_information(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_lsp_information(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_metadata_filter> cst_encode_list_metadata_filter(List<MetadataFilter> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_metadata_filter(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_metadata_filter(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_opening_fee_params> cst_encode_list_opening_fee_params(
      List<OpeningFeeParams> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_opening_fee_params(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_opening_fee_params(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_payment> cst_encode_list_payment(List<Payment> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_payment(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_payment(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_payment_type_filter> cst_encode_list_payment_type_filter(
      List<PaymentTypeFilter> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_payment_type_filter(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_payment_type_filter(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(Uint8List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_rate> cst_encode_list_rate(List<Rate> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_rate(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_rate(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_reverse_swap_info> cst_encode_list_reverse_swap_info(List<ReverseSwapInfo> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_reverse_swap_info(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_reverse_swap_info(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_route_hint> cst_encode_list_route_hint(List<RouteHint> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_route_hint(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_route_hint(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_route_hint_hop> cst_encode_list_route_hint_hop(List<RouteHintHop> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_route_hint_hop(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_route_hint_hop(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_swap_info> cst_encode_list_swap_info(List<SwapInfo> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_swap_info(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_swap_info(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_tlv_entry> cst_encode_list_tlv_entry(List<TlvEntry> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_tlv_entry(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_tlv_entry(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_unspent_transaction_output> cst_encode_list_unspent_transaction_output(
      List<UnspentTransactionOutput> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_unspent_transaction_output(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_unspent_transaction_output(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_opt_String(String? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_String(raw);
  }

  @protected
  ffi.Pointer<ffi.Bool> cst_encode_opt_box_autoadd_bool(bool? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_bool(raw);
  }

  @protected
  ffi.Pointer<wire_cst_greenlight_credentials> cst_encode_opt_box_autoadd_greenlight_credentials(
      GreenlightCredentials? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_greenlight_credentials(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> cst_encode_opt_box_autoadd_i_64(PlatformInt64? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_i_64(raw);
  }

  @protected
  ffi.Pointer<wire_cst_ln_invoice> cst_encode_opt_box_autoadd_ln_invoice(LNInvoice? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_ln_invoice(raw);
  }

  @protected
  ffi.Pointer<wire_cst_lsp_information> cst_encode_opt_box_autoadd_lsp_information(LspInformation? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_lsp_information(raw);
  }

  @protected
  ffi.Pointer<wire_cst_node_credentials> cst_encode_opt_box_autoadd_node_credentials(NodeCredentials? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_node_credentials(raw);
  }

  @protected
  ffi.Pointer<wire_cst_opening_fee_params> cst_encode_opt_box_autoadd_opening_fee_params(
      OpeningFeeParams? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_opening_fee_params(raw);
  }

  @protected
  ffi.Pointer<wire_cst_payment> cst_encode_opt_box_autoadd_payment(Payment? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_payment(raw);
  }

  @protected
  ffi.Pointer<wire_cst_reverse_swap_info> cst_encode_opt_box_autoadd_reverse_swap_info(ReverseSwapInfo? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_reverse_swap_info(raw);
  }

  @protected
  ffi.Pointer<wire_cst_success_action_processed> cst_encode_opt_box_autoadd_success_action_processed(
      SuccessActionProcessed? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_success_action_processed(raw);
  }

  @protected
  ffi.Pointer<wire_cst_swap_info> cst_encode_opt_box_autoadd_swap_info(SwapInfo? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_swap_info(raw);
  }

  @protected
  ffi.Pointer<wire_cst_symbol> cst_encode_opt_box_autoadd_symbol(Symbol? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_symbol(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint32> cst_encode_opt_box_autoadd_u_32(int? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_32(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> cst_encode_opt_box_autoadd_u_64(BigInt? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_box_autoadd_u_64(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_String> cst_encode_opt_list_String(List<String>? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_list_String(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_locale_overrides> cst_encode_opt_list_locale_overrides(
      List<LocaleOverrides>? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_list_locale_overrides(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_localized_name> cst_encode_opt_list_localized_name(List<LocalizedName>? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_list_localized_name(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_metadata_filter> cst_encode_opt_list_metadata_filter(List<MetadataFilter>? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_list_metadata_filter(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_payment_type_filter> cst_encode_opt_list_payment_type_filter(
      List<PaymentTypeFilter>? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_list_payment_type_filter(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_opt_list_prim_u_8_strict(Uint8List? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_list_prim_u_8_strict(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_tlv_entry> cst_encode_opt_list_tlv_entry(List<TlvEntry>? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_list_tlv_entry(raw);
  }

  @protected
  int cst_encode_u_64(BigInt raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.toSigned(64).toInt();
  }

  @protected
  void cst_api_fill_to_wire_aes_success_action_data_decrypted(
      AesSuccessActionDataDecrypted apiObj, wire_cst_aes_success_action_data_decrypted wireObj) {
    wireObj.description = cst_encode_String(apiObj.description);
    wireObj.plaintext = cst_encode_String(apiObj.plaintext);
  }

  @protected
  void cst_api_fill_to_wire_aes_success_action_data_result(
      AesSuccessActionDataResult apiObj, wire_cst_aes_success_action_data_result wireObj) {
    if (apiObj is AesSuccessActionDataResult_Decrypted) {
      var pre_data = cst_encode_box_autoadd_aes_success_action_data_decrypted(apiObj.data);
      wireObj.tag = 0;
      wireObj.kind.Decrypted.data = pre_data;
      return;
    }
    if (apiObj is AesSuccessActionDataResult_ErrorStatus) {
      var pre_reason = cst_encode_String(apiObj.reason);
      wireObj.tag = 1;
      wireObj.kind.ErrorStatus.reason = pre_reason;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_backup_failed_data(BackupFailedData apiObj, wire_cst_backup_failed_data wireObj) {
    wireObj.error = cst_encode_String(apiObj.error);
  }

  @protected
  void cst_api_fill_to_wire_backup_status(BackupStatus apiObj, wire_cst_backup_status wireObj) {
    wireObj.backed_up = cst_encode_bool(apiObj.backedUp);
    wireObj.last_backup_time = cst_encode_opt_box_autoadd_u_64(apiObj.lastBackupTime);
  }

  @protected
  void cst_api_fill_to_wire_binding_event_listener(
      BindingEventListener apiObj, wire_cst_binding_event_listener wireObj) {}

  @protected
  void cst_api_fill_to_wire_bitcoin_address_data(
      BitcoinAddressData apiObj, wire_cst_bitcoin_address_data wireObj) {
    wireObj.address = cst_encode_String(apiObj.address);
    wireObj.network = cst_encode_network(apiObj.network);
    wireObj.amount_sat = cst_encode_opt_box_autoadd_u_64(apiObj.amountSat);
    wireObj.label = cst_encode_opt_String(apiObj.label);
    wireObj.message = cst_encode_opt_String(apiObj.message);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_aes_success_action_data_decrypted(
      AesSuccessActionDataDecrypted apiObj, ffi.Pointer<wire_cst_aes_success_action_data_decrypted> wireObj) {
    cst_api_fill_to_wire_aes_success_action_data_decrypted(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_aes_success_action_data_result(
      AesSuccessActionDataResult apiObj, ffi.Pointer<wire_cst_aes_success_action_data_result> wireObj) {
    cst_api_fill_to_wire_aes_success_action_data_result(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_backup_failed_data(
      BackupFailedData apiObj, ffi.Pointer<wire_cst_backup_failed_data> wireObj) {
    cst_api_fill_to_wire_backup_failed_data(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_bitcoin_address_data(
      BitcoinAddressData apiObj, ffi.Pointer<wire_cst_bitcoin_address_data> wireObj) {
    cst_api_fill_to_wire_bitcoin_address_data(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_breez_event(
      BreezEvent apiObj, ffi.Pointer<wire_cst_breez_event> wireObj) {
    cst_api_fill_to_wire_breez_event(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_buy_bitcoin_request(
      BuyBitcoinRequest apiObj, ffi.Pointer<wire_cst_buy_bitcoin_request> wireObj) {
    cst_api_fill_to_wire_buy_bitcoin_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_check_message_request(
      CheckMessageRequest apiObj, ffi.Pointer<wire_cst_check_message_request> wireObj) {
    cst_api_fill_to_wire_check_message_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_closed_channel_payment_details(
      ClosedChannelPaymentDetails apiObj, ffi.Pointer<wire_cst_closed_channel_payment_details> wireObj) {
    cst_api_fill_to_wire_closed_channel_payment_details(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_configure_node_request(
      ConfigureNodeRequest apiObj, ffi.Pointer<wire_cst_configure_node_request> wireObj) {
    cst_api_fill_to_wire_configure_node_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_connect_request(
      ConnectRequest apiObj, ffi.Pointer<wire_cst_connect_request> wireObj) {
    cst_api_fill_to_wire_connect_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_greenlight_credentials(
      GreenlightCredentials apiObj, ffi.Pointer<wire_cst_greenlight_credentials> wireObj) {
    cst_api_fill_to_wire_greenlight_credentials(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_greenlight_node_config(
      GreenlightNodeConfig apiObj, ffi.Pointer<wire_cst_greenlight_node_config> wireObj) {
    cst_api_fill_to_wire_greenlight_node_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_invoice_paid_details(
      InvoicePaidDetails apiObj, ffi.Pointer<wire_cst_invoice_paid_details> wireObj) {
    cst_api_fill_to_wire_invoice_paid_details(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_list_payments_request(
      ListPaymentsRequest apiObj, ffi.Pointer<wire_cst_list_payments_request> wireObj) {
    cst_api_fill_to_wire_list_payments_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ln_invoice(
      LNInvoice apiObj, ffi.Pointer<wire_cst_ln_invoice> wireObj) {
    cst_api_fill_to_wire_ln_invoice(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ln_payment_details(
      LnPaymentDetails apiObj, ffi.Pointer<wire_cst_ln_payment_details> wireObj) {
    cst_api_fill_to_wire_ln_payment_details(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ln_url_auth_request_data(
      LnUrlAuthRequestData apiObj, ffi.Pointer<wire_cst_ln_url_auth_request_data> wireObj) {
    cst_api_fill_to_wire_ln_url_auth_request_data(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ln_url_error_data(
      LnUrlErrorData apiObj, ffi.Pointer<wire_cst_ln_url_error_data> wireObj) {
    cst_api_fill_to_wire_ln_url_error_data(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ln_url_pay_error_data(
      LnUrlPayErrorData apiObj, ffi.Pointer<wire_cst_ln_url_pay_error_data> wireObj) {
    cst_api_fill_to_wire_ln_url_pay_error_data(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ln_url_pay_request(
      LnUrlPayRequest apiObj, ffi.Pointer<wire_cst_ln_url_pay_request> wireObj) {
    cst_api_fill_to_wire_ln_url_pay_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ln_url_pay_request_data(
      LnUrlPayRequestData apiObj, ffi.Pointer<wire_cst_ln_url_pay_request_data> wireObj) {
    cst_api_fill_to_wire_ln_url_pay_request_data(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ln_url_pay_success_data(
      LnUrlPaySuccessData apiObj, ffi.Pointer<wire_cst_ln_url_pay_success_data> wireObj) {
    cst_api_fill_to_wire_ln_url_pay_success_data(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ln_url_withdraw_request(
      LnUrlWithdrawRequest apiObj, ffi.Pointer<wire_cst_ln_url_withdraw_request> wireObj) {
    cst_api_fill_to_wire_ln_url_withdraw_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ln_url_withdraw_request_data(
      LnUrlWithdrawRequestData apiObj, ffi.Pointer<wire_cst_ln_url_withdraw_request_data> wireObj) {
    cst_api_fill_to_wire_ln_url_withdraw_request_data(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_ln_url_withdraw_success_data(
      LnUrlWithdrawSuccessData apiObj, ffi.Pointer<wire_cst_ln_url_withdraw_success_data> wireObj) {
    cst_api_fill_to_wire_ln_url_withdraw_success_data(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_lsp_information(
      LspInformation apiObj, ffi.Pointer<wire_cst_lsp_information> wireObj) {
    cst_api_fill_to_wire_lsp_information(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_message_success_action_data(
      MessageSuccessActionData apiObj, ffi.Pointer<wire_cst_message_success_action_data> wireObj) {
    cst_api_fill_to_wire_message_success_action_data(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_node_config(
      NodeConfig apiObj, ffi.Pointer<wire_cst_node_config> wireObj) {
    cst_api_fill_to_wire_node_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_node_credentials(
      NodeCredentials apiObj, ffi.Pointer<wire_cst_node_credentials> wireObj) {
    cst_api_fill_to_wire_node_credentials(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_open_channel_fee_request(
      OpenChannelFeeRequest apiObj, ffi.Pointer<wire_cst_open_channel_fee_request> wireObj) {
    cst_api_fill_to_wire_open_channel_fee_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_opening_fee_params(
      OpeningFeeParams apiObj, ffi.Pointer<wire_cst_opening_fee_params> wireObj) {
    cst_api_fill_to_wire_opening_fee_params(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_pay_onchain_request(
      PayOnchainRequest apiObj, ffi.Pointer<wire_cst_pay_onchain_request> wireObj) {
    cst_api_fill_to_wire_pay_onchain_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_payment(Payment apiObj, ffi.Pointer<wire_cst_payment> wireObj) {
    cst_api_fill_to_wire_payment(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_payment_failed_data(
      PaymentFailedData apiObj, ffi.Pointer<wire_cst_payment_failed_data> wireObj) {
    cst_api_fill_to_wire_payment_failed_data(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_prepare_onchain_payment_request(
      PrepareOnchainPaymentRequest apiObj, ffi.Pointer<wire_cst_prepare_onchain_payment_request> wireObj) {
    cst_api_fill_to_wire_prepare_onchain_payment_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_prepare_redeem_onchain_funds_request(
      PrepareRedeemOnchainFundsRequest apiObj,
      ffi.Pointer<wire_cst_prepare_redeem_onchain_funds_request> wireObj) {
    cst_api_fill_to_wire_prepare_redeem_onchain_funds_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_prepare_refund_request(
      PrepareRefundRequest apiObj, ffi.Pointer<wire_cst_prepare_refund_request> wireObj) {
    cst_api_fill_to_wire_prepare_refund_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_receive_onchain_request(
      ReceiveOnchainRequest apiObj, ffi.Pointer<wire_cst_receive_onchain_request> wireObj) {
    cst_api_fill_to_wire_receive_onchain_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_receive_payment_request(
      ReceivePaymentRequest apiObj, ffi.Pointer<wire_cst_receive_payment_request> wireObj) {
    cst_api_fill_to_wire_receive_payment_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_redeem_onchain_funds_request(
      RedeemOnchainFundsRequest apiObj, ffi.Pointer<wire_cst_redeem_onchain_funds_request> wireObj) {
    cst_api_fill_to_wire_redeem_onchain_funds_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_refund_request(
      RefundRequest apiObj, ffi.Pointer<wire_cst_refund_request> wireObj) {
    cst_api_fill_to_wire_refund_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_report_issue_request(
      ReportIssueRequest apiObj, ffi.Pointer<wire_cst_report_issue_request> wireObj) {
    cst_api_fill_to_wire_report_issue_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_report_payment_failure_details(
      ReportPaymentFailureDetails apiObj, ffi.Pointer<wire_cst_report_payment_failure_details> wireObj) {
    cst_api_fill_to_wire_report_payment_failure_details(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_reverse_swap_fees_request(
      ReverseSwapFeesRequest apiObj, ffi.Pointer<wire_cst_reverse_swap_fees_request> wireObj) {
    cst_api_fill_to_wire_reverse_swap_fees_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_reverse_swap_info(
      ReverseSwapInfo apiObj, ffi.Pointer<wire_cst_reverse_swap_info> wireObj) {
    cst_api_fill_to_wire_reverse_swap_info(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_send_onchain_request(
      SendOnchainRequest apiObj, ffi.Pointer<wire_cst_send_onchain_request> wireObj) {
    cst_api_fill_to_wire_send_onchain_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_send_payment_request(
      SendPaymentRequest apiObj, ffi.Pointer<wire_cst_send_payment_request> wireObj) {
    cst_api_fill_to_wire_send_payment_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_send_spontaneous_payment_request(
      SendSpontaneousPaymentRequest apiObj, ffi.Pointer<wire_cst_send_spontaneous_payment_request> wireObj) {
    cst_api_fill_to_wire_send_spontaneous_payment_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_sign_message_request(
      SignMessageRequest apiObj, ffi.Pointer<wire_cst_sign_message_request> wireObj) {
    cst_api_fill_to_wire_sign_message_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_static_backup_request(
      StaticBackupRequest apiObj, ffi.Pointer<wire_cst_static_backup_request> wireObj) {
    cst_api_fill_to_wire_static_backup_request(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_success_action_processed(
      SuccessActionProcessed apiObj, ffi.Pointer<wire_cst_success_action_processed> wireObj) {
    cst_api_fill_to_wire_success_action_processed(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_swap_info(SwapInfo apiObj, ffi.Pointer<wire_cst_swap_info> wireObj) {
    cst_api_fill_to_wire_swap_info(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_symbol(Symbol apiObj, ffi.Pointer<wire_cst_symbol> wireObj) {
    cst_api_fill_to_wire_symbol(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_url_success_action_data(
      UrlSuccessActionData apiObj, ffi.Pointer<wire_cst_url_success_action_data> wireObj) {
    cst_api_fill_to_wire_url_success_action_data(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_breez_event(BreezEvent apiObj, wire_cst_breez_event wireObj) {
    if (apiObj is BreezEvent_NewBlock) {
      var pre_block = cst_encode_u_32(apiObj.block);
      wireObj.tag = 0;
      wireObj.kind.NewBlock.block = pre_block;
      return;
    }
    if (apiObj is BreezEvent_InvoicePaid) {
      var pre_details = cst_encode_box_autoadd_invoice_paid_details(apiObj.details);
      wireObj.tag = 1;
      wireObj.kind.InvoicePaid.details = pre_details;
      return;
    }
    if (apiObj is BreezEvent_Synced) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is BreezEvent_PaymentSucceed) {
      var pre_details = cst_encode_box_autoadd_payment(apiObj.details);
      wireObj.tag = 3;
      wireObj.kind.PaymentSucceed.details = pre_details;
      return;
    }
    if (apiObj is BreezEvent_PaymentFailed) {
      var pre_details = cst_encode_box_autoadd_payment_failed_data(apiObj.details);
      wireObj.tag = 4;
      wireObj.kind.PaymentFailed.details = pre_details;
      return;
    }
    if (apiObj is BreezEvent_BackupStarted) {
      wireObj.tag = 5;
      return;
    }
    if (apiObj is BreezEvent_BackupSucceeded) {
      wireObj.tag = 6;
      return;
    }
    if (apiObj is BreezEvent_BackupFailed) {
      var pre_details = cst_encode_box_autoadd_backup_failed_data(apiObj.details);
      wireObj.tag = 7;
      wireObj.kind.BackupFailed.details = pre_details;
      return;
    }
    if (apiObj is BreezEvent_SwapUpdated) {
      var pre_details = cst_encode_box_autoadd_swap_info(apiObj.details);
      wireObj.tag = 8;
      wireObj.kind.SwapUpdated.details = pre_details;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_buy_bitcoin_request(
      BuyBitcoinRequest apiObj, wire_cst_buy_bitcoin_request wireObj) {
    wireObj.provider = cst_encode_buy_bitcoin_provider(apiObj.provider);
    wireObj.opening_fee_params = cst_encode_opt_box_autoadd_opening_fee_params(apiObj.openingFeeParams);
  }

  @protected
  void cst_api_fill_to_wire_buy_bitcoin_response(
      BuyBitcoinResponse apiObj, wire_cst_buy_bitcoin_response wireObj) {
    wireObj.url = cst_encode_String(apiObj.url);
    wireObj.opening_fee_params = cst_encode_opt_box_autoadd_opening_fee_params(apiObj.openingFeeParams);
  }

  @protected
  void cst_api_fill_to_wire_check_message_request(
      CheckMessageRequest apiObj, wire_cst_check_message_request wireObj) {
    wireObj.message = cst_encode_String(apiObj.message);
    wireObj.pubkey = cst_encode_String(apiObj.pubkey);
    wireObj.signature = cst_encode_String(apiObj.signature);
  }

  @protected
  void cst_api_fill_to_wire_check_message_response(
      CheckMessageResponse apiObj, wire_cst_check_message_response wireObj) {
    wireObj.is_valid = cst_encode_bool(apiObj.isValid);
  }

  @protected
  void cst_api_fill_to_wire_closed_channel_payment_details(
      ClosedChannelPaymentDetails apiObj, wire_cst_closed_channel_payment_details wireObj) {
    wireObj.state = cst_encode_channel_state(apiObj.state);
    wireObj.funding_txid = cst_encode_String(apiObj.fundingTxid);
    wireObj.short_channel_id = cst_encode_opt_String(apiObj.shortChannelId);
    wireObj.closing_txid = cst_encode_opt_String(apiObj.closingTxid);
  }

  @protected
  void cst_api_fill_to_wire_config(Config apiObj, wire_cst_config wireObj) {
    wireObj.breezserver = cst_encode_String(apiObj.breezserver);
    wireObj.chainnotifier_url = cst_encode_String(apiObj.chainnotifierUrl);
    wireObj.mempoolspace_url = cst_encode_opt_String(apiObj.mempoolspaceUrl);
    wireObj.working_dir = cst_encode_String(apiObj.workingDir);
    wireObj.network = cst_encode_network(apiObj.network);
    wireObj.payment_timeout_sec = cst_encode_u_32(apiObj.paymentTimeoutSec);
    wireObj.default_lsp_id = cst_encode_opt_String(apiObj.defaultLspId);
    wireObj.api_key = cst_encode_opt_String(apiObj.apiKey);
    wireObj.maxfee_percent = cst_encode_f_64(apiObj.maxfeePercent);
    wireObj.exemptfee_msat = cst_encode_u_64(apiObj.exemptfeeMsat);
    cst_api_fill_to_wire_node_config(apiObj.nodeConfig, wireObj.node_config);
  }

  @protected
  void cst_api_fill_to_wire_configure_node_request(
      ConfigureNodeRequest apiObj, wire_cst_configure_node_request wireObj) {
    wireObj.close_to_address = cst_encode_opt_String(apiObj.closeToAddress);
  }

  @protected
  void cst_api_fill_to_wire_connect_request(ConnectRequest apiObj, wire_cst_connect_request wireObj) {
    cst_api_fill_to_wire_config(apiObj.config, wireObj.config);
    wireObj.seed = cst_encode_list_prim_u_8_strict(apiObj.seed);
    wireObj.restore_only = cst_encode_opt_box_autoadd_bool(apiObj.restoreOnly);
  }

  @protected
  void cst_api_fill_to_wire_currency_info(CurrencyInfo apiObj, wire_cst_currency_info wireObj) {
    wireObj.name = cst_encode_String(apiObj.name);
    wireObj.fraction_size = cst_encode_u_32(apiObj.fractionSize);
    wireObj.spacing = cst_encode_opt_box_autoadd_u_32(apiObj.spacing);
    wireObj.symbol = cst_encode_opt_box_autoadd_symbol(apiObj.symbol);
    wireObj.uniq_symbol = cst_encode_opt_box_autoadd_symbol(apiObj.uniqSymbol);
    wireObj.localized_name = cst_encode_opt_list_localized_name(apiObj.localizedName);
    wireObj.locale_overrides = cst_encode_opt_list_locale_overrides(apiObj.localeOverrides);
  }

  @protected
  void cst_api_fill_to_wire_fiat_currency(FiatCurrency apiObj, wire_cst_fiat_currency wireObj) {
    wireObj.id = cst_encode_String(apiObj.id);
    cst_api_fill_to_wire_currency_info(apiObj.info, wireObj.info);
  }

  @protected
  void cst_api_fill_to_wire_greenlight_credentials(
      GreenlightCredentials apiObj, wire_cst_greenlight_credentials wireObj) {
    wireObj.device_key = cst_encode_list_prim_u_8_strict(apiObj.deviceKey);
    wireObj.device_cert = cst_encode_list_prim_u_8_strict(apiObj.deviceCert);
  }

  @protected
  void cst_api_fill_to_wire_greenlight_node_config(
      GreenlightNodeConfig apiObj, wire_cst_greenlight_node_config wireObj) {
    wireObj.partner_credentials =
        cst_encode_opt_box_autoadd_greenlight_credentials(apiObj.partnerCredentials);
    wireObj.invite_code = cst_encode_opt_String(apiObj.inviteCode);
  }

  @protected
  void cst_api_fill_to_wire_input_type(InputType apiObj, wire_cst_input_type wireObj) {
    if (apiObj is InputType_BitcoinAddress) {
      var pre_address = cst_encode_box_autoadd_bitcoin_address_data(apiObj.address);
      wireObj.tag = 0;
      wireObj.kind.BitcoinAddress.address = pre_address;
      return;
    }
    if (apiObj is InputType_Bolt11) {
      var pre_invoice = cst_encode_box_autoadd_ln_invoice(apiObj.invoice);
      wireObj.tag = 1;
      wireObj.kind.Bolt11.invoice = pre_invoice;
      return;
    }
    if (apiObj is InputType_NodeId) {
      var pre_node_id = cst_encode_String(apiObj.nodeId);
      wireObj.tag = 2;
      wireObj.kind.NodeId.node_id = pre_node_id;
      return;
    }
    if (apiObj is InputType_Url) {
      var pre_url = cst_encode_String(apiObj.url);
      wireObj.tag = 3;
      wireObj.kind.Url.url = pre_url;
      return;
    }
    if (apiObj is InputType_LnUrlPay) {
      var pre_data = cst_encode_box_autoadd_ln_url_pay_request_data(apiObj.data);
      wireObj.tag = 4;
      wireObj.kind.LnUrlPay.data = pre_data;
      return;
    }
    if (apiObj is InputType_LnUrlWithdraw) {
      var pre_data = cst_encode_box_autoadd_ln_url_withdraw_request_data(apiObj.data);
      wireObj.tag = 5;
      wireObj.kind.LnUrlWithdraw.data = pre_data;
      return;
    }
    if (apiObj is InputType_LnUrlAuth) {
      var pre_data = cst_encode_box_autoadd_ln_url_auth_request_data(apiObj.data);
      wireObj.tag = 6;
      wireObj.kind.LnUrlAuth.data = pre_data;
      return;
    }
    if (apiObj is InputType_LnUrlError) {
      var pre_data = cst_encode_box_autoadd_ln_url_error_data(apiObj.data);
      wireObj.tag = 7;
      wireObj.kind.LnUrlError.data = pre_data;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_invoice_paid_details(
      InvoicePaidDetails apiObj, wire_cst_invoice_paid_details wireObj) {
    wireObj.payment_hash = cst_encode_String(apiObj.paymentHash);
    wireObj.bolt11 = cst_encode_String(apiObj.bolt11);
    wireObj.payment = cst_encode_opt_box_autoadd_payment(apiObj.payment);
  }

  @protected
  void cst_api_fill_to_wire_list_payments_request(
      ListPaymentsRequest apiObj, wire_cst_list_payments_request wireObj) {
    wireObj.filters = cst_encode_opt_list_payment_type_filter(apiObj.filters);
    wireObj.metadata_filters = cst_encode_opt_list_metadata_filter(apiObj.metadataFilters);
    wireObj.from_timestamp = cst_encode_opt_box_autoadd_i_64(apiObj.fromTimestamp);
    wireObj.to_timestamp = cst_encode_opt_box_autoadd_i_64(apiObj.toTimestamp);
    wireObj.include_failures = cst_encode_opt_box_autoadd_bool(apiObj.includeFailures);
    wireObj.offset = cst_encode_opt_box_autoadd_u_32(apiObj.offset);
    wireObj.limit = cst_encode_opt_box_autoadd_u_32(apiObj.limit);
  }

  @protected
  void cst_api_fill_to_wire_ln_invoice(LNInvoice apiObj, wire_cst_ln_invoice wireObj) {
    wireObj.bolt11 = cst_encode_String(apiObj.bolt11);
    wireObj.network = cst_encode_network(apiObj.network);
    wireObj.payee_pubkey = cst_encode_String(apiObj.payeePubkey);
    wireObj.payment_hash = cst_encode_String(apiObj.paymentHash);
    wireObj.description = cst_encode_opt_String(apiObj.description);
    wireObj.description_hash = cst_encode_opt_String(apiObj.descriptionHash);
    wireObj.amount_msat = cst_encode_opt_box_autoadd_u_64(apiObj.amountMsat);
    wireObj.timestamp = cst_encode_u_64(apiObj.timestamp);
    wireObj.expiry = cst_encode_u_64(apiObj.expiry);
    wireObj.routing_hints = cst_encode_list_route_hint(apiObj.routingHints);
    wireObj.payment_secret = cst_encode_list_prim_u_8_strict(apiObj.paymentSecret);
    wireObj.min_final_cltv_expiry_delta = cst_encode_u_64(apiObj.minFinalCltvExpiryDelta);
  }

  @protected
  void cst_api_fill_to_wire_ln_payment_details(LnPaymentDetails apiObj, wire_cst_ln_payment_details wireObj) {
    wireObj.payment_hash = cst_encode_String(apiObj.paymentHash);
    wireObj.label = cst_encode_String(apiObj.label);
    wireObj.destination_pubkey = cst_encode_String(apiObj.destinationPubkey);
    wireObj.payment_preimage = cst_encode_String(apiObj.paymentPreimage);
    wireObj.keysend = cst_encode_bool(apiObj.keysend);
    wireObj.bolt11 = cst_encode_String(apiObj.bolt11);
    wireObj.open_channel_bolt11 = cst_encode_opt_String(apiObj.openChannelBolt11);
    wireObj.lnurl_success_action =
        cst_encode_opt_box_autoadd_success_action_processed(apiObj.lnurlSuccessAction);
    wireObj.lnurl_pay_domain = cst_encode_opt_String(apiObj.lnurlPayDomain);
    wireObj.lnurl_pay_comment = cst_encode_opt_String(apiObj.lnurlPayComment);
    wireObj.ln_address = cst_encode_opt_String(apiObj.lnAddress);
    wireObj.lnurl_metadata = cst_encode_opt_String(apiObj.lnurlMetadata);
    wireObj.lnurl_withdraw_endpoint = cst_encode_opt_String(apiObj.lnurlWithdrawEndpoint);
    wireObj.swap_info = cst_encode_opt_box_autoadd_swap_info(apiObj.swapInfo);
    wireObj.reverse_swap_info = cst_encode_opt_box_autoadd_reverse_swap_info(apiObj.reverseSwapInfo);
    wireObj.pending_expiration_block = cst_encode_opt_box_autoadd_u_32(apiObj.pendingExpirationBlock);
  }

  @protected
  void cst_api_fill_to_wire_ln_url_auth_request_data(
      LnUrlAuthRequestData apiObj, wire_cst_ln_url_auth_request_data wireObj) {
    wireObj.k1 = cst_encode_String(apiObj.k1);
    wireObj.action = cst_encode_opt_String(apiObj.action);
    wireObj.domain = cst_encode_String(apiObj.domain);
    wireObj.url = cst_encode_String(apiObj.url);
  }

  @protected
  void cst_api_fill_to_wire_ln_url_callback_status(
      LnUrlCallbackStatus apiObj, wire_cst_ln_url_callback_status wireObj) {
    if (apiObj is LnUrlCallbackStatus_Ok) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is LnUrlCallbackStatus_ErrorStatus) {
      var pre_data = cst_encode_box_autoadd_ln_url_error_data(apiObj.data);
      wireObj.tag = 1;
      wireObj.kind.ErrorStatus.data = pre_data;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_ln_url_error_data(LnUrlErrorData apiObj, wire_cst_ln_url_error_data wireObj) {
    wireObj.reason = cst_encode_String(apiObj.reason);
  }

  @protected
  void cst_api_fill_to_wire_ln_url_pay_error_data(
      LnUrlPayErrorData apiObj, wire_cst_ln_url_pay_error_data wireObj) {
    wireObj.payment_hash = cst_encode_String(apiObj.paymentHash);
    wireObj.reason = cst_encode_String(apiObj.reason);
  }

  @protected
  void cst_api_fill_to_wire_ln_url_pay_request(LnUrlPayRequest apiObj, wire_cst_ln_url_pay_request wireObj) {
    cst_api_fill_to_wire_ln_url_pay_request_data(apiObj.data, wireObj.data);
    wireObj.amount_msat = cst_encode_u_64(apiObj.amountMsat);
    wireObj.comment = cst_encode_opt_String(apiObj.comment);
    wireObj.payment_label = cst_encode_opt_String(apiObj.paymentLabel);
  }

  @protected
  void cst_api_fill_to_wire_ln_url_pay_request_data(
      LnUrlPayRequestData apiObj, wire_cst_ln_url_pay_request_data wireObj) {
    wireObj.callback = cst_encode_String(apiObj.callback);
    wireObj.min_sendable = cst_encode_u_64(apiObj.minSendable);
    wireObj.max_sendable = cst_encode_u_64(apiObj.maxSendable);
    wireObj.metadata_str = cst_encode_String(apiObj.metadataStr);
    wireObj.comment_allowed = cst_encode_u_16(apiObj.commentAllowed);
    wireObj.domain = cst_encode_String(apiObj.domain);
    wireObj.allows_nostr = cst_encode_bool(apiObj.allowsNostr);
    wireObj.nostr_pubkey = cst_encode_opt_String(apiObj.nostrPubkey);
    wireObj.ln_address = cst_encode_opt_String(apiObj.lnAddress);
  }

  @protected
  void cst_api_fill_to_wire_ln_url_pay_result(LnUrlPayResult apiObj, wire_cst_ln_url_pay_result wireObj) {
    if (apiObj is LnUrlPayResult_EndpointSuccess) {
      var pre_data = cst_encode_box_autoadd_ln_url_pay_success_data(apiObj.data);
      wireObj.tag = 0;
      wireObj.kind.EndpointSuccess.data = pre_data;
      return;
    }
    if (apiObj is LnUrlPayResult_EndpointError) {
      var pre_data = cst_encode_box_autoadd_ln_url_error_data(apiObj.data);
      wireObj.tag = 1;
      wireObj.kind.EndpointError.data = pre_data;
      return;
    }
    if (apiObj is LnUrlPayResult_PayError) {
      var pre_data = cst_encode_box_autoadd_ln_url_pay_error_data(apiObj.data);
      wireObj.tag = 2;
      wireObj.kind.PayError.data = pre_data;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_ln_url_pay_success_data(
      LnUrlPaySuccessData apiObj, wire_cst_ln_url_pay_success_data wireObj) {
    cst_api_fill_to_wire_payment(apiObj.payment, wireObj.payment);
    wireObj.success_action = cst_encode_opt_box_autoadd_success_action_processed(apiObj.successAction);
  }

  @protected
  void cst_api_fill_to_wire_ln_url_withdraw_request(
      LnUrlWithdrawRequest apiObj, wire_cst_ln_url_withdraw_request wireObj) {
    cst_api_fill_to_wire_ln_url_withdraw_request_data(apiObj.data, wireObj.data);
    wireObj.amount_msat = cst_encode_u_64(apiObj.amountMsat);
    wireObj.description = cst_encode_opt_String(apiObj.description);
  }

  @protected
  void cst_api_fill_to_wire_ln_url_withdraw_request_data(
      LnUrlWithdrawRequestData apiObj, wire_cst_ln_url_withdraw_request_data wireObj) {
    wireObj.callback = cst_encode_String(apiObj.callback);
    wireObj.k1 = cst_encode_String(apiObj.k1);
    wireObj.default_description = cst_encode_String(apiObj.defaultDescription);
    wireObj.min_withdrawable = cst_encode_u_64(apiObj.minWithdrawable);
    wireObj.max_withdrawable = cst_encode_u_64(apiObj.maxWithdrawable);
  }

  @protected
  void cst_api_fill_to_wire_ln_url_withdraw_result(
      LnUrlWithdrawResult apiObj, wire_cst_ln_url_withdraw_result wireObj) {
    if (apiObj is LnUrlWithdrawResult_Ok) {
      var pre_data = cst_encode_box_autoadd_ln_url_withdraw_success_data(apiObj.data);
      wireObj.tag = 0;
      wireObj.kind.Ok.data = pre_data;
      return;
    }
    if (apiObj is LnUrlWithdrawResult_ErrorStatus) {
      var pre_data = cst_encode_box_autoadd_ln_url_error_data(apiObj.data);
      wireObj.tag = 1;
      wireObj.kind.ErrorStatus.data = pre_data;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_ln_url_withdraw_success_data(
      LnUrlWithdrawSuccessData apiObj, wire_cst_ln_url_withdraw_success_data wireObj) {
    cst_api_fill_to_wire_ln_invoice(apiObj.invoice, wireObj.invoice);
  }

  @protected
  void cst_api_fill_to_wire_locale_overrides(LocaleOverrides apiObj, wire_cst_locale_overrides wireObj) {
    wireObj.locale = cst_encode_String(apiObj.locale);
    wireObj.spacing = cst_encode_opt_box_autoadd_u_32(apiObj.spacing);
    cst_api_fill_to_wire_symbol(apiObj.symbol, wireObj.symbol);
  }

  @protected
  void cst_api_fill_to_wire_localized_name(LocalizedName apiObj, wire_cst_localized_name wireObj) {
    wireObj.locale = cst_encode_String(apiObj.locale);
    wireObj.name = cst_encode_String(apiObj.name);
  }

  @protected
  void cst_api_fill_to_wire_log_entry(LogEntry apiObj, wire_cst_log_entry wireObj) {
    wireObj.line = cst_encode_String(apiObj.line);
    wireObj.level = cst_encode_String(apiObj.level);
  }

  @protected
  void cst_api_fill_to_wire_lsp_information(LspInformation apiObj, wire_cst_lsp_information wireObj) {
    wireObj.id = cst_encode_String(apiObj.id);
    wireObj.name = cst_encode_String(apiObj.name);
    wireObj.widget_url = cst_encode_String(apiObj.widgetUrl);
    wireObj.pubkey = cst_encode_String(apiObj.pubkey);
    wireObj.host = cst_encode_String(apiObj.host);
    wireObj.base_fee_msat = cst_encode_i_64(apiObj.baseFeeMsat);
    wireObj.fee_rate = cst_encode_f_64(apiObj.feeRate);
    wireObj.time_lock_delta = cst_encode_u_32(apiObj.timeLockDelta);
    wireObj.min_htlc_msat = cst_encode_i_64(apiObj.minHtlcMsat);
    wireObj.lsp_pubkey = cst_encode_list_prim_u_8_strict(apiObj.lspPubkey);
    cst_api_fill_to_wire_opening_fee_params_menu(
        apiObj.openingFeeParamsList, wireObj.opening_fee_params_list);
  }

  @protected
  void cst_api_fill_to_wire_max_reverse_swap_amount_response(
      MaxReverseSwapAmountResponse apiObj, wire_cst_max_reverse_swap_amount_response wireObj) {
    wireObj.total_sat = cst_encode_u_64(apiObj.totalSat);
  }

  @protected
  void cst_api_fill_to_wire_message_success_action_data(
      MessageSuccessActionData apiObj, wire_cst_message_success_action_data wireObj) {
    wireObj.message = cst_encode_String(apiObj.message);
  }

  @protected
  void cst_api_fill_to_wire_metadata_filter(MetadataFilter apiObj, wire_cst_metadata_filter wireObj) {
    wireObj.json_path = cst_encode_String(apiObj.jsonPath);
    wireObj.json_value = cst_encode_String(apiObj.jsonValue);
  }

  @protected
  void cst_api_fill_to_wire_node_config(NodeConfig apiObj, wire_cst_node_config wireObj) {
    if (apiObj is NodeConfig_Greenlight) {
      var pre_config = cst_encode_box_autoadd_greenlight_node_config(apiObj.config);
      wireObj.tag = 0;
      wireObj.kind.Greenlight.config = pre_config;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_node_credentials(NodeCredentials apiObj, wire_cst_node_credentials wireObj) {
    if (apiObj is NodeCredentials_Greenlight) {
      var pre_credentials = cst_encode_box_autoadd_greenlight_credentials(apiObj.credentials);
      wireObj.tag = 0;
      wireObj.kind.Greenlight.credentials = pre_credentials;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_node_state(NodeState apiObj, wire_cst_node_state wireObj) {
    wireObj.id = cst_encode_String(apiObj.id);
    wireObj.block_height = cst_encode_u_32(apiObj.blockHeight);
    wireObj.channels_balance_msat = cst_encode_u_64(apiObj.channelsBalanceMsat);
    wireObj.onchain_balance_msat = cst_encode_u_64(apiObj.onchainBalanceMsat);
    wireObj.pending_onchain_balance_msat = cst_encode_u_64(apiObj.pendingOnchainBalanceMsat);
    wireObj.utxos = cst_encode_list_unspent_transaction_output(apiObj.utxos);
    wireObj.max_payable_msat = cst_encode_u_64(apiObj.maxPayableMsat);
    wireObj.max_receivable_msat = cst_encode_u_64(apiObj.maxReceivableMsat);
    wireObj.max_single_payment_amount_msat = cst_encode_u_64(apiObj.maxSinglePaymentAmountMsat);
    wireObj.max_chan_reserve_msats = cst_encode_u_64(apiObj.maxChanReserveMsats);
    wireObj.connected_peers = cst_encode_list_String(apiObj.connectedPeers);
    wireObj.inbound_liquidity_msats = cst_encode_u_64(apiObj.inboundLiquidityMsats);
  }

  @protected
  void cst_api_fill_to_wire_onchain_payment_limits_response(
      OnchainPaymentLimitsResponse apiObj, wire_cst_onchain_payment_limits_response wireObj) {
    wireObj.min_sat = cst_encode_u_64(apiObj.minSat);
    wireObj.max_sat = cst_encode_u_64(apiObj.maxSat);
  }

  @protected
  void cst_api_fill_to_wire_open_channel_fee_request(
      OpenChannelFeeRequest apiObj, wire_cst_open_channel_fee_request wireObj) {
    wireObj.amount_msat = cst_encode_opt_box_autoadd_u_64(apiObj.amountMsat);
    wireObj.expiry = cst_encode_opt_box_autoadd_u_32(apiObj.expiry);
  }

  @protected
  void cst_api_fill_to_wire_open_channel_fee_response(
      OpenChannelFeeResponse apiObj, wire_cst_open_channel_fee_response wireObj) {
    wireObj.fee_msat = cst_encode_opt_box_autoadd_u_64(apiObj.feeMsat);
    cst_api_fill_to_wire_opening_fee_params(apiObj.feeParams, wireObj.fee_params);
  }

  @protected
  void cst_api_fill_to_wire_opening_fee_params(OpeningFeeParams apiObj, wire_cst_opening_fee_params wireObj) {
    wireObj.min_msat = cst_encode_u_64(apiObj.minMsat);
    wireObj.proportional = cst_encode_u_32(apiObj.proportional);
    wireObj.valid_until = cst_encode_String(apiObj.validUntil);
    wireObj.max_idle_time = cst_encode_u_32(apiObj.maxIdleTime);
    wireObj.max_client_to_self_delay = cst_encode_u_32(apiObj.maxClientToSelfDelay);
    wireObj.promise = cst_encode_String(apiObj.promise);
  }

  @protected
  void cst_api_fill_to_wire_opening_fee_params_menu(
      OpeningFeeParamsMenu apiObj, wire_cst_opening_fee_params_menu wireObj) {
    wireObj.values = cst_encode_list_opening_fee_params(apiObj.values);
  }

  @protected
  void cst_api_fill_to_wire_pay_onchain_request(
      PayOnchainRequest apiObj, wire_cst_pay_onchain_request wireObj) {
    wireObj.recipient_address = cst_encode_String(apiObj.recipientAddress);
    cst_api_fill_to_wire_prepare_onchain_payment_response(apiObj.prepareRes, wireObj.prepare_res);
  }

  @protected
  void cst_api_fill_to_wire_pay_onchain_response(
      PayOnchainResponse apiObj, wire_cst_pay_onchain_response wireObj) {
    cst_api_fill_to_wire_reverse_swap_info(apiObj.reverseSwapInfo, wireObj.reverse_swap_info);
  }

  @protected
  void cst_api_fill_to_wire_payment(Payment apiObj, wire_cst_payment wireObj) {
    wireObj.id = cst_encode_String(apiObj.id);
    wireObj.payment_type = cst_encode_payment_type(apiObj.paymentType);
    wireObj.payment_time = cst_encode_i_64(apiObj.paymentTime);
    wireObj.amount_msat = cst_encode_u_64(apiObj.amountMsat);
    wireObj.fee_msat = cst_encode_u_64(apiObj.feeMsat);
    wireObj.status = cst_encode_payment_status(apiObj.status);
    wireObj.error = cst_encode_opt_String(apiObj.error);
    wireObj.description = cst_encode_opt_String(apiObj.description);
    cst_api_fill_to_wire_payment_details(apiObj.details, wireObj.details);
    wireObj.metadata = cst_encode_opt_String(apiObj.metadata);
  }

  @protected
  void cst_api_fill_to_wire_payment_details(PaymentDetails apiObj, wire_cst_payment_details wireObj) {
    if (apiObj is PaymentDetails_Ln) {
      var pre_data = cst_encode_box_autoadd_ln_payment_details(apiObj.data);
      wireObj.tag = 0;
      wireObj.kind.Ln.data = pre_data;
      return;
    }
    if (apiObj is PaymentDetails_ClosedChannel) {
      var pre_data = cst_encode_box_autoadd_closed_channel_payment_details(apiObj.data);
      wireObj.tag = 1;
      wireObj.kind.ClosedChannel.data = pre_data;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_payment_failed_data(
      PaymentFailedData apiObj, wire_cst_payment_failed_data wireObj) {
    wireObj.error = cst_encode_String(apiObj.error);
    wireObj.node_id = cst_encode_String(apiObj.nodeId);
    wireObj.invoice = cst_encode_opt_box_autoadd_ln_invoice(apiObj.invoice);
    wireObj.label = cst_encode_opt_String(apiObj.label);
  }

  @protected
  void cst_api_fill_to_wire_prepare_onchain_payment_request(
      PrepareOnchainPaymentRequest apiObj, wire_cst_prepare_onchain_payment_request wireObj) {
    wireObj.amount_sat = cst_encode_u_64(apiObj.amountSat);
    wireObj.amount_type = cst_encode_swap_amount_type(apiObj.amountType);
    wireObj.claim_tx_feerate = cst_encode_u_32(apiObj.claimTxFeerate);
  }

  @protected
  void cst_api_fill_to_wire_prepare_onchain_payment_response(
      PrepareOnchainPaymentResponse apiObj, wire_cst_prepare_onchain_payment_response wireObj) {
    wireObj.fees_hash = cst_encode_String(apiObj.feesHash);
    wireObj.fees_percentage = cst_encode_f_64(apiObj.feesPercentage);
    wireObj.fees_lockup = cst_encode_u_64(apiObj.feesLockup);
    wireObj.fees_claim = cst_encode_u_64(apiObj.feesClaim);
    wireObj.sender_amount_sat = cst_encode_u_64(apiObj.senderAmountSat);
    wireObj.recipient_amount_sat = cst_encode_u_64(apiObj.recipientAmountSat);
    wireObj.total_fees = cst_encode_u_64(apiObj.totalFees);
  }

  @protected
  void cst_api_fill_to_wire_prepare_redeem_onchain_funds_request(
      PrepareRedeemOnchainFundsRequest apiObj, wire_cst_prepare_redeem_onchain_funds_request wireObj) {
    wireObj.to_address = cst_encode_String(apiObj.toAddress);
    wireObj.sat_per_vbyte = cst_encode_u_32(apiObj.satPerVbyte);
  }

  @protected
  void cst_api_fill_to_wire_prepare_redeem_onchain_funds_response(
      PrepareRedeemOnchainFundsResponse apiObj, wire_cst_prepare_redeem_onchain_funds_response wireObj) {
    wireObj.tx_weight = cst_encode_u_64(apiObj.txWeight);
    wireObj.tx_fee_sat = cst_encode_u_64(apiObj.txFeeSat);
  }

  @protected
  void cst_api_fill_to_wire_prepare_refund_request(
      PrepareRefundRequest apiObj, wire_cst_prepare_refund_request wireObj) {
    wireObj.swap_address = cst_encode_String(apiObj.swapAddress);
    wireObj.to_address = cst_encode_String(apiObj.toAddress);
    wireObj.sat_per_vbyte = cst_encode_u_32(apiObj.satPerVbyte);
  }

  @protected
  void cst_api_fill_to_wire_prepare_refund_response(
      PrepareRefundResponse apiObj, wire_cst_prepare_refund_response wireObj) {
    wireObj.refund_tx_weight = cst_encode_u_32(apiObj.refundTxWeight);
    wireObj.refund_tx_fee_sat = cst_encode_u_64(apiObj.refundTxFeeSat);
  }

  @protected
  void cst_api_fill_to_wire_rate(Rate apiObj, wire_cst_rate wireObj) {
    wireObj.coin = cst_encode_String(apiObj.coin);
    wireObj.value = cst_encode_f_64(apiObj.value);
  }

  @protected
  void cst_api_fill_to_wire_receive_onchain_request(
      ReceiveOnchainRequest apiObj, wire_cst_receive_onchain_request wireObj) {
    wireObj.opening_fee_params = cst_encode_opt_box_autoadd_opening_fee_params(apiObj.openingFeeParams);
  }

  @protected
  void cst_api_fill_to_wire_receive_payment_request(
      ReceivePaymentRequest apiObj, wire_cst_receive_payment_request wireObj) {
    wireObj.amount_msat = cst_encode_u_64(apiObj.amountMsat);
    wireObj.description = cst_encode_String(apiObj.description);
    wireObj.preimage = cst_encode_opt_list_prim_u_8_strict(apiObj.preimage);
    wireObj.opening_fee_params = cst_encode_opt_box_autoadd_opening_fee_params(apiObj.openingFeeParams);
    wireObj.use_description_hash = cst_encode_opt_box_autoadd_bool(apiObj.useDescriptionHash);
    wireObj.expiry = cst_encode_opt_box_autoadd_u_32(apiObj.expiry);
    wireObj.cltv = cst_encode_opt_box_autoadd_u_32(apiObj.cltv);
  }

  @protected
  void cst_api_fill_to_wire_receive_payment_response(
      ReceivePaymentResponse apiObj, wire_cst_receive_payment_response wireObj) {
    cst_api_fill_to_wire_ln_invoice(apiObj.lnInvoice, wireObj.ln_invoice);
    wireObj.opening_fee_params = cst_encode_opt_box_autoadd_opening_fee_params(apiObj.openingFeeParams);
    wireObj.opening_fee_msat = cst_encode_opt_box_autoadd_u_64(apiObj.openingFeeMsat);
  }

  @protected
  void cst_api_fill_to_wire_recommended_fees(RecommendedFees apiObj, wire_cst_recommended_fees wireObj) {
    wireObj.fastest_fee = cst_encode_u_64(apiObj.fastestFee);
    wireObj.half_hour_fee = cst_encode_u_64(apiObj.halfHourFee);
    wireObj.hour_fee = cst_encode_u_64(apiObj.hourFee);
    wireObj.economy_fee = cst_encode_u_64(apiObj.economyFee);
    wireObj.minimum_fee = cst_encode_u_64(apiObj.minimumFee);
  }

  @protected
  void cst_api_fill_to_wire_redeem_onchain_funds_request(
      RedeemOnchainFundsRequest apiObj, wire_cst_redeem_onchain_funds_request wireObj) {
    wireObj.to_address = cst_encode_String(apiObj.toAddress);
    wireObj.sat_per_vbyte = cst_encode_u_32(apiObj.satPerVbyte);
  }

  @protected
  void cst_api_fill_to_wire_redeem_onchain_funds_response(
      RedeemOnchainFundsResponse apiObj, wire_cst_redeem_onchain_funds_response wireObj) {
    wireObj.txid = cst_encode_list_prim_u_8_strict(apiObj.txid);
  }

  @protected
  void cst_api_fill_to_wire_refund_request(RefundRequest apiObj, wire_cst_refund_request wireObj) {
    wireObj.swap_address = cst_encode_String(apiObj.swapAddress);
    wireObj.to_address = cst_encode_String(apiObj.toAddress);
    wireObj.sat_per_vbyte = cst_encode_u_32(apiObj.satPerVbyte);
  }

  @protected
  void cst_api_fill_to_wire_refund_response(RefundResponse apiObj, wire_cst_refund_response wireObj) {
    wireObj.refund_tx_id = cst_encode_String(apiObj.refundTxId);
  }

  @protected
  void cst_api_fill_to_wire_report_issue_request(
      ReportIssueRequest apiObj, wire_cst_report_issue_request wireObj) {
    if (apiObj is ReportIssueRequest_PaymentFailure) {
      var pre_data = cst_encode_box_autoadd_report_payment_failure_details(apiObj.data);
      wireObj.tag = 0;
      wireObj.kind.PaymentFailure.data = pre_data;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_report_payment_failure_details(
      ReportPaymentFailureDetails apiObj, wire_cst_report_payment_failure_details wireObj) {
    wireObj.payment_hash = cst_encode_String(apiObj.paymentHash);
    wireObj.comment = cst_encode_opt_String(apiObj.comment);
  }

  @protected
  void cst_api_fill_to_wire_reverse_swap_fees_request(
      ReverseSwapFeesRequest apiObj, wire_cst_reverse_swap_fees_request wireObj) {
    wireObj.send_amount_sat = cst_encode_opt_box_autoadd_u_64(apiObj.sendAmountSat);
    wireObj.claim_tx_feerate = cst_encode_opt_box_autoadd_u_32(apiObj.claimTxFeerate);
  }

  @protected
  void cst_api_fill_to_wire_reverse_swap_info(ReverseSwapInfo apiObj, wire_cst_reverse_swap_info wireObj) {
    wireObj.id = cst_encode_String(apiObj.id);
    wireObj.claim_pubkey = cst_encode_String(apiObj.claimPubkey);
    wireObj.lockup_txid = cst_encode_opt_String(apiObj.lockupTxid);
    wireObj.claim_txid = cst_encode_opt_String(apiObj.claimTxid);
    wireObj.onchain_amount_sat = cst_encode_u_64(apiObj.onchainAmountSat);
    wireObj.status = cst_encode_reverse_swap_status(apiObj.status);
  }

  @protected
  void cst_api_fill_to_wire_reverse_swap_pair_info(
      ReverseSwapPairInfo apiObj, wire_cst_reverse_swap_pair_info wireObj) {
    wireObj.min = cst_encode_u_64(apiObj.min);
    wireObj.max = cst_encode_u_64(apiObj.max);
    wireObj.fees_hash = cst_encode_String(apiObj.feesHash);
    wireObj.fees_percentage = cst_encode_f_64(apiObj.feesPercentage);
    wireObj.fees_lockup = cst_encode_u_64(apiObj.feesLockup);
    wireObj.fees_claim = cst_encode_u_64(apiObj.feesClaim);
    wireObj.total_fees = cst_encode_opt_box_autoadd_u_64(apiObj.totalFees);
  }

  @protected
  void cst_api_fill_to_wire_route_hint(RouteHint apiObj, wire_cst_route_hint wireObj) {
    wireObj.hops = cst_encode_list_route_hint_hop(apiObj.hops);
  }

  @protected
  void cst_api_fill_to_wire_route_hint_hop(RouteHintHop apiObj, wire_cst_route_hint_hop wireObj) {
    wireObj.src_node_id = cst_encode_String(apiObj.srcNodeId);
    wireObj.short_channel_id = cst_encode_u_64(apiObj.shortChannelId);
    wireObj.fees_base_msat = cst_encode_u_32(apiObj.feesBaseMsat);
    wireObj.fees_proportional_millionths = cst_encode_u_32(apiObj.feesProportionalMillionths);
    wireObj.cltv_expiry_delta = cst_encode_u_64(apiObj.cltvExpiryDelta);
    wireObj.htlc_minimum_msat = cst_encode_opt_box_autoadd_u_64(apiObj.htlcMinimumMsat);
    wireObj.htlc_maximum_msat = cst_encode_opt_box_autoadd_u_64(apiObj.htlcMaximumMsat);
  }

  @protected
  void cst_api_fill_to_wire_send_onchain_request(
      SendOnchainRequest apiObj, wire_cst_send_onchain_request wireObj) {
    wireObj.amount_sat = cst_encode_u_64(apiObj.amountSat);
    wireObj.onchain_recipient_address = cst_encode_String(apiObj.onchainRecipientAddress);
    wireObj.pair_hash = cst_encode_String(apiObj.pairHash);
    wireObj.sat_per_vbyte = cst_encode_u_32(apiObj.satPerVbyte);
  }

  @protected
  void cst_api_fill_to_wire_send_onchain_response(
      SendOnchainResponse apiObj, wire_cst_send_onchain_response wireObj) {
    cst_api_fill_to_wire_reverse_swap_info(apiObj.reverseSwapInfo, wireObj.reverse_swap_info);
  }

  @protected
  void cst_api_fill_to_wire_send_payment_request(
      SendPaymentRequest apiObj, wire_cst_send_payment_request wireObj) {
    wireObj.bolt11 = cst_encode_String(apiObj.bolt11);
    wireObj.amount_msat = cst_encode_opt_box_autoadd_u_64(apiObj.amountMsat);
    wireObj.label = cst_encode_opt_String(apiObj.label);
  }

  @protected
  void cst_api_fill_to_wire_send_payment_response(
      SendPaymentResponse apiObj, wire_cst_send_payment_response wireObj) {
    cst_api_fill_to_wire_payment(apiObj.payment, wireObj.payment);
  }

  @protected
  void cst_api_fill_to_wire_send_spontaneous_payment_request(
      SendSpontaneousPaymentRequest apiObj, wire_cst_send_spontaneous_payment_request wireObj) {
    wireObj.node_id = cst_encode_String(apiObj.nodeId);
    wireObj.amount_msat = cst_encode_u_64(apiObj.amountMsat);
    wireObj.extra_tlvs = cst_encode_opt_list_tlv_entry(apiObj.extraTlvs);
    wireObj.label = cst_encode_opt_String(apiObj.label);
  }

  @protected
  void cst_api_fill_to_wire_service_health_check_response(
      ServiceHealthCheckResponse apiObj, wire_cst_service_health_check_response wireObj) {
    wireObj.status = cst_encode_health_check_status(apiObj.status);
  }

  @protected
  void cst_api_fill_to_wire_sign_message_request(
      SignMessageRequest apiObj, wire_cst_sign_message_request wireObj) {
    wireObj.message = cst_encode_String(apiObj.message);
  }

  @protected
  void cst_api_fill_to_wire_sign_message_response(
      SignMessageResponse apiObj, wire_cst_sign_message_response wireObj) {
    wireObj.signature = cst_encode_String(apiObj.signature);
  }

  @protected
  void cst_api_fill_to_wire_static_backup_request(
      StaticBackupRequest apiObj, wire_cst_static_backup_request wireObj) {
    wireObj.working_dir = cst_encode_String(apiObj.workingDir);
  }

  @protected
  void cst_api_fill_to_wire_static_backup_response(
      StaticBackupResponse apiObj, wire_cst_static_backup_response wireObj) {
    wireObj.backup = cst_encode_opt_list_String(apiObj.backup);
  }

  @protected
  void cst_api_fill_to_wire_success_action_processed(
      SuccessActionProcessed apiObj, wire_cst_success_action_processed wireObj) {
    if (apiObj is SuccessActionProcessed_Aes) {
      var pre_result = cst_encode_box_autoadd_aes_success_action_data_result(apiObj.result);
      wireObj.tag = 0;
      wireObj.kind.Aes.result = pre_result;
      return;
    }
    if (apiObj is SuccessActionProcessed_Message) {
      var pre_data = cst_encode_box_autoadd_message_success_action_data(apiObj.data);
      wireObj.tag = 1;
      wireObj.kind.Message.data = pre_data;
      return;
    }
    if (apiObj is SuccessActionProcessed_Url) {
      var pre_data = cst_encode_box_autoadd_url_success_action_data(apiObj.data);
      wireObj.tag = 2;
      wireObj.kind.Url.data = pre_data;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_swap_info(SwapInfo apiObj, wire_cst_swap_info wireObj) {
    wireObj.bitcoin_address = cst_encode_String(apiObj.bitcoinAddress);
    wireObj.created_at = cst_encode_i_64(apiObj.createdAt);
    wireObj.lock_height = cst_encode_i_64(apiObj.lockHeight);
    wireObj.payment_hash = cst_encode_list_prim_u_8_strict(apiObj.paymentHash);
    wireObj.preimage = cst_encode_list_prim_u_8_strict(apiObj.preimage);
    wireObj.private_key = cst_encode_list_prim_u_8_strict(apiObj.privateKey);
    wireObj.public_key = cst_encode_list_prim_u_8_strict(apiObj.publicKey);
    wireObj.swapper_public_key = cst_encode_list_prim_u_8_strict(apiObj.swapperPublicKey);
    wireObj.script = cst_encode_list_prim_u_8_strict(apiObj.script);
    wireObj.bolt11 = cst_encode_opt_String(apiObj.bolt11);
    wireObj.paid_msat = cst_encode_u_64(apiObj.paidMsat);
    wireObj.total_incoming_txs = cst_encode_u_64(apiObj.totalIncomingTxs);
    wireObj.confirmed_sats = cst_encode_u_64(apiObj.confirmedSats);
    wireObj.unconfirmed_sats = cst_encode_u_64(apiObj.unconfirmedSats);
    wireObj.status = cst_encode_swap_status(apiObj.status);
    wireObj.refund_tx_ids = cst_encode_list_String(apiObj.refundTxIds);
    wireObj.unconfirmed_tx_ids = cst_encode_list_String(apiObj.unconfirmedTxIds);
    wireObj.confirmed_tx_ids = cst_encode_list_String(apiObj.confirmedTxIds);
    wireObj.min_allowed_deposit = cst_encode_i_64(apiObj.minAllowedDeposit);
    wireObj.max_allowed_deposit = cst_encode_i_64(apiObj.maxAllowedDeposit);
    wireObj.max_swapper_payable = cst_encode_i_64(apiObj.maxSwapperPayable);
    wireObj.last_redeem_error = cst_encode_opt_String(apiObj.lastRedeemError);
    wireObj.channel_opening_fees = cst_encode_opt_box_autoadd_opening_fee_params(apiObj.channelOpeningFees);
    wireObj.confirmed_at = cst_encode_opt_box_autoadd_u_32(apiObj.confirmedAt);
  }

  @protected
  void cst_api_fill_to_wire_symbol(Symbol apiObj, wire_cst_symbol wireObj) {
    wireObj.grapheme = cst_encode_opt_String(apiObj.grapheme);
    wireObj.template_ = cst_encode_opt_String(apiObj.template);
    wireObj.rtl = cst_encode_opt_box_autoadd_bool(apiObj.rtl);
    wireObj.position = cst_encode_opt_box_autoadd_u_32(apiObj.position);
  }

  @protected
  void cst_api_fill_to_wire_tlv_entry(TlvEntry apiObj, wire_cst_tlv_entry wireObj) {
    wireObj.field_number = cst_encode_u_64(apiObj.fieldNumber);
    wireObj.value = cst_encode_list_prim_u_8_strict(apiObj.value);
  }

  @protected
  void cst_api_fill_to_wire_unspent_transaction_output(
      UnspentTransactionOutput apiObj, wire_cst_unspent_transaction_output wireObj) {
    wireObj.txid = cst_encode_list_prim_u_8_strict(apiObj.txid);
    wireObj.outnum = cst_encode_u_32(apiObj.outnum);
    wireObj.amount_millisatoshi = cst_encode_u_64(apiObj.amountMillisatoshi);
    wireObj.address = cst_encode_String(apiObj.address);
    wireObj.reserved = cst_encode_bool(apiObj.reserved);
  }

  @protected
  void cst_api_fill_to_wire_url_success_action_data(
      UrlSuccessActionData apiObj, wire_cst_url_success_action_data wireObj) {
    wireObj.description = cst_encode_String(apiObj.description);
    wireObj.url = cst_encode_String(apiObj.url);
  }

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_buy_bitcoin_provider(BuyBitcoinProvider raw);

  @protected
  int cst_encode_channel_state(ChannelState raw);

  @protected
  int cst_encode_environment_type(EnvironmentType raw);

  @protected
  double cst_encode_f_64(double raw);

  @protected
  int cst_encode_health_check_status(HealthCheckStatus raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_network(Network raw);

  @protected
  int cst_encode_payment_status(PaymentStatus raw);

  @protected
  int cst_encode_payment_type(PaymentType raw);

  @protected
  int cst_encode_payment_type_filter(PaymentTypeFilter raw);

  @protected
  int cst_encode_reverse_swap_status(ReverseSwapStatus raw);

  @protected
  int cst_encode_swap_amount_type(SwapAmountType raw);

  @protected
  int cst_encode_swap_status(SwapStatus raw);

  @protected
  int cst_encode_u_16(int raw);

  @protected
  int cst_encode_u_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  void sse_encode_AnyhowException(AnyhowException self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_breez_event_Dco(RustStreamSink<BreezEvent> self, SseSerializer serializer);

  @protected
  void sse_encode_StreamSink_log_entry_Dco(RustStreamSink<LogEntry> self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_aes_success_action_data_decrypted(
      AesSuccessActionDataDecrypted self, SseSerializer serializer);

  @protected
  void sse_encode_aes_success_action_data_result(AesSuccessActionDataResult self, SseSerializer serializer);

  @protected
  void sse_encode_backup_failed_data(BackupFailedData self, SseSerializer serializer);

  @protected
  void sse_encode_backup_status(BackupStatus self, SseSerializer serializer);

  @protected
  void sse_encode_binding_event_listener(BindingEventListener self, SseSerializer serializer);

  @protected
  void sse_encode_bitcoin_address_data(BitcoinAddressData self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_aes_success_action_data_decrypted(
      AesSuccessActionDataDecrypted self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_aes_success_action_data_result(
      AesSuccessActionDataResult self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_backup_failed_data(BackupFailedData self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_binding_event_listener(BindingEventListener self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bitcoin_address_data(BitcoinAddressData self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_breez_event(BreezEvent self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_buy_bitcoin_request(BuyBitcoinRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_check_message_request(CheckMessageRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_closed_channel_payment_details(
      ClosedChannelPaymentDetails self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_configure_node_request(ConfigureNodeRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_connect_request(ConnectRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_greenlight_credentials(GreenlightCredentials self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_greenlight_node_config(GreenlightNodeConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_i_64(PlatformInt64 self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_invoice_paid_details(InvoicePaidDetails self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_list_payments_request(ListPaymentsRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ln_invoice(LNInvoice self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ln_payment_details(LnPaymentDetails self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ln_url_auth_request_data(LnUrlAuthRequestData self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ln_url_error_data(LnUrlErrorData self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ln_url_pay_error_data(LnUrlPayErrorData self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ln_url_pay_request(LnUrlPayRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ln_url_pay_request_data(LnUrlPayRequestData self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ln_url_pay_success_data(LnUrlPaySuccessData self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ln_url_withdraw_request(LnUrlWithdrawRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ln_url_withdraw_request_data(
      LnUrlWithdrawRequestData self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_ln_url_withdraw_success_data(
      LnUrlWithdrawSuccessData self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_lsp_information(LspInformation self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_message_success_action_data(
      MessageSuccessActionData self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_node_config(NodeConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_node_credentials(NodeCredentials self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_open_channel_fee_request(OpenChannelFeeRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_opening_fee_params(OpeningFeeParams self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_pay_onchain_request(PayOnchainRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_payment(Payment self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_payment_failed_data(PaymentFailedData self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_prepare_onchain_payment_request(
      PrepareOnchainPaymentRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_prepare_redeem_onchain_funds_request(
      PrepareRedeemOnchainFundsRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_prepare_refund_request(PrepareRefundRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_receive_onchain_request(ReceiveOnchainRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_receive_payment_request(ReceivePaymentRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_redeem_onchain_funds_request(
      RedeemOnchainFundsRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_refund_request(RefundRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_report_issue_request(ReportIssueRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_report_payment_failure_details(
      ReportPaymentFailureDetails self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_reverse_swap_fees_request(
      ReverseSwapFeesRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_reverse_swap_info(ReverseSwapInfo self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_send_onchain_request(SendOnchainRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_send_payment_request(SendPaymentRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_send_spontaneous_payment_request(
      SendSpontaneousPaymentRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_sign_message_request(SignMessageRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_static_backup_request(StaticBackupRequest self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_success_action_processed(SuccessActionProcessed self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_swap_info(SwapInfo self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_symbol(Symbol self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_url_success_action_data(UrlSuccessActionData self, SseSerializer serializer);

  @protected
  void sse_encode_breez_event(BreezEvent self, SseSerializer serializer);

  @protected
  void sse_encode_buy_bitcoin_provider(BuyBitcoinProvider self, SseSerializer serializer);

  @protected
  void sse_encode_buy_bitcoin_request(BuyBitcoinRequest self, SseSerializer serializer);

  @protected
  void sse_encode_buy_bitcoin_response(BuyBitcoinResponse self, SseSerializer serializer);

  @protected
  void sse_encode_channel_state(ChannelState self, SseSerializer serializer);

  @protected
  void sse_encode_check_message_request(CheckMessageRequest self, SseSerializer serializer);

  @protected
  void sse_encode_check_message_response(CheckMessageResponse self, SseSerializer serializer);

  @protected
  void sse_encode_closed_channel_payment_details(ClosedChannelPaymentDetails self, SseSerializer serializer);

  @protected
  void sse_encode_config(Config self, SseSerializer serializer);

  @protected
  void sse_encode_configure_node_request(ConfigureNodeRequest self, SseSerializer serializer);

  @protected
  void sse_encode_connect_request(ConnectRequest self, SseSerializer serializer);

  @protected
  void sse_encode_currency_info(CurrencyInfo self, SseSerializer serializer);

  @protected
  void sse_encode_environment_type(EnvironmentType self, SseSerializer serializer);

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer);

  @protected
  void sse_encode_fiat_currency(FiatCurrency self, SseSerializer serializer);

  @protected
  void sse_encode_greenlight_credentials(GreenlightCredentials self, SseSerializer serializer);

  @protected
  void sse_encode_greenlight_node_config(GreenlightNodeConfig self, SseSerializer serializer);

  @protected
  void sse_encode_health_check_status(HealthCheckStatus self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer);

  @protected
  void sse_encode_input_type(InputType self, SseSerializer serializer);

  @protected
  void sse_encode_invoice_paid_details(InvoicePaidDetails self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_fiat_currency(List<FiatCurrency> self, SseSerializer serializer);

  @protected
  void sse_encode_list_locale_overrides(List<LocaleOverrides> self, SseSerializer serializer);

  @protected
  void sse_encode_list_localized_name(List<LocalizedName> self, SseSerializer serializer);

  @protected
  void sse_encode_list_lsp_information(List<LspInformation> self, SseSerializer serializer);

  @protected
  void sse_encode_list_metadata_filter(List<MetadataFilter> self, SseSerializer serializer);

  @protected
  void sse_encode_list_opening_fee_params(List<OpeningFeeParams> self, SseSerializer serializer);

  @protected
  void sse_encode_list_payment(List<Payment> self, SseSerializer serializer);

  @protected
  void sse_encode_list_payment_type_filter(List<PaymentTypeFilter> self, SseSerializer serializer);

  @protected
  void sse_encode_list_payments_request(ListPaymentsRequest self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_rate(List<Rate> self, SseSerializer serializer);

  @protected
  void sse_encode_list_reverse_swap_info(List<ReverseSwapInfo> self, SseSerializer serializer);

  @protected
  void sse_encode_list_route_hint(List<RouteHint> self, SseSerializer serializer);

  @protected
  void sse_encode_list_route_hint_hop(List<RouteHintHop> self, SseSerializer serializer);

  @protected
  void sse_encode_list_swap_info(List<SwapInfo> self, SseSerializer serializer);

  @protected
  void sse_encode_list_tlv_entry(List<TlvEntry> self, SseSerializer serializer);

  @protected
  void sse_encode_list_unspent_transaction_output(
      List<UnspentTransactionOutput> self, SseSerializer serializer);

  @protected
  void sse_encode_ln_invoice(LNInvoice self, SseSerializer serializer);

  @protected
  void sse_encode_ln_payment_details(LnPaymentDetails self, SseSerializer serializer);

  @protected
  void sse_encode_ln_url_auth_request_data(LnUrlAuthRequestData self, SseSerializer serializer);

  @protected
  void sse_encode_ln_url_callback_status(LnUrlCallbackStatus self, SseSerializer serializer);

  @protected
  void sse_encode_ln_url_error_data(LnUrlErrorData self, SseSerializer serializer);

  @protected
  void sse_encode_ln_url_pay_error_data(LnUrlPayErrorData self, SseSerializer serializer);

  @protected
  void sse_encode_ln_url_pay_request(LnUrlPayRequest self, SseSerializer serializer);

  @protected
  void sse_encode_ln_url_pay_request_data(LnUrlPayRequestData self, SseSerializer serializer);

  @protected
  void sse_encode_ln_url_pay_result(LnUrlPayResult self, SseSerializer serializer);

  @protected
  void sse_encode_ln_url_pay_success_data(LnUrlPaySuccessData self, SseSerializer serializer);

  @protected
  void sse_encode_ln_url_withdraw_request(LnUrlWithdrawRequest self, SseSerializer serializer);

  @protected
  void sse_encode_ln_url_withdraw_request_data(LnUrlWithdrawRequestData self, SseSerializer serializer);

  @protected
  void sse_encode_ln_url_withdraw_result(LnUrlWithdrawResult self, SseSerializer serializer);

  @protected
  void sse_encode_ln_url_withdraw_success_data(LnUrlWithdrawSuccessData self, SseSerializer serializer);

  @protected
  void sse_encode_locale_overrides(LocaleOverrides self, SseSerializer serializer);

  @protected
  void sse_encode_localized_name(LocalizedName self, SseSerializer serializer);

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer);

  @protected
  void sse_encode_lsp_information(LspInformation self, SseSerializer serializer);

  @protected
  void sse_encode_max_reverse_swap_amount_response(
      MaxReverseSwapAmountResponse self, SseSerializer serializer);

  @protected
  void sse_encode_message_success_action_data(MessageSuccessActionData self, SseSerializer serializer);

  @protected
  void sse_encode_metadata_filter(MetadataFilter self, SseSerializer serializer);

  @protected
  void sse_encode_network(Network self, SseSerializer serializer);

  @protected
  void sse_encode_node_config(NodeConfig self, SseSerializer serializer);

  @protected
  void sse_encode_node_credentials(NodeCredentials self, SseSerializer serializer);

  @protected
  void sse_encode_node_state(NodeState self, SseSerializer serializer);

  @protected
  void sse_encode_onchain_payment_limits_response(
      OnchainPaymentLimitsResponse self, SseSerializer serializer);

  @protected
  void sse_encode_open_channel_fee_request(OpenChannelFeeRequest self, SseSerializer serializer);

  @protected
  void sse_encode_open_channel_fee_response(OpenChannelFeeResponse self, SseSerializer serializer);

  @protected
  void sse_encode_opening_fee_params(OpeningFeeParams self, SseSerializer serializer);

  @protected
  void sse_encode_opening_fee_params_menu(OpeningFeeParamsMenu self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_greenlight_credentials(
      GreenlightCredentials? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_i_64(PlatformInt64? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_ln_invoice(LNInvoice? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_lsp_information(LspInformation? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_node_credentials(NodeCredentials? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_opening_fee_params(OpeningFeeParams? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_payment(Payment? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_reverse_swap_info(ReverseSwapInfo? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_success_action_processed(
      SuccessActionProcessed? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_swap_info(SwapInfo? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_symbol(Symbol? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_String(List<String>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_locale_overrides(List<LocaleOverrides>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_localized_name(List<LocalizedName>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_metadata_filter(List<MetadataFilter>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_payment_type_filter(List<PaymentTypeFilter>? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_prim_u_8_strict(Uint8List? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_tlv_entry(List<TlvEntry>? self, SseSerializer serializer);

  @protected
  void sse_encode_pay_onchain_request(PayOnchainRequest self, SseSerializer serializer);

  @protected
  void sse_encode_pay_onchain_response(PayOnchainResponse self, SseSerializer serializer);

  @protected
  void sse_encode_payment(Payment self, SseSerializer serializer);

  @protected
  void sse_encode_payment_details(PaymentDetails self, SseSerializer serializer);

  @protected
  void sse_encode_payment_failed_data(PaymentFailedData self, SseSerializer serializer);

  @protected
  void sse_encode_payment_status(PaymentStatus self, SseSerializer serializer);

  @protected
  void sse_encode_payment_type(PaymentType self, SseSerializer serializer);

  @protected
  void sse_encode_payment_type_filter(PaymentTypeFilter self, SseSerializer serializer);

  @protected
  void sse_encode_prepare_onchain_payment_request(
      PrepareOnchainPaymentRequest self, SseSerializer serializer);

  @protected
  void sse_encode_prepare_onchain_payment_response(
      PrepareOnchainPaymentResponse self, SseSerializer serializer);

  @protected
  void sse_encode_prepare_redeem_onchain_funds_request(
      PrepareRedeemOnchainFundsRequest self, SseSerializer serializer);

  @protected
  void sse_encode_prepare_redeem_onchain_funds_response(
      PrepareRedeemOnchainFundsResponse self, SseSerializer serializer);

  @protected
  void sse_encode_prepare_refund_request(PrepareRefundRequest self, SseSerializer serializer);

  @protected
  void sse_encode_prepare_refund_response(PrepareRefundResponse self, SseSerializer serializer);

  @protected
  void sse_encode_rate(Rate self, SseSerializer serializer);

  @protected
  void sse_encode_receive_onchain_request(ReceiveOnchainRequest self, SseSerializer serializer);

  @protected
  void sse_encode_receive_payment_request(ReceivePaymentRequest self, SseSerializer serializer);

  @protected
  void sse_encode_receive_payment_response(ReceivePaymentResponse self, SseSerializer serializer);

  @protected
  void sse_encode_recommended_fees(RecommendedFees self, SseSerializer serializer);

  @protected
  void sse_encode_redeem_onchain_funds_request(RedeemOnchainFundsRequest self, SseSerializer serializer);

  @protected
  void sse_encode_redeem_onchain_funds_response(RedeemOnchainFundsResponse self, SseSerializer serializer);

  @protected
  void sse_encode_refund_request(RefundRequest self, SseSerializer serializer);

  @protected
  void sse_encode_refund_response(RefundResponse self, SseSerializer serializer);

  @protected
  void sse_encode_report_issue_request(ReportIssueRequest self, SseSerializer serializer);

  @protected
  void sse_encode_report_payment_failure_details(ReportPaymentFailureDetails self, SseSerializer serializer);

  @protected
  void sse_encode_reverse_swap_fees_request(ReverseSwapFeesRequest self, SseSerializer serializer);

  @protected
  void sse_encode_reverse_swap_info(ReverseSwapInfo self, SseSerializer serializer);

  @protected
  void sse_encode_reverse_swap_pair_info(ReverseSwapPairInfo self, SseSerializer serializer);

  @protected
  void sse_encode_reverse_swap_status(ReverseSwapStatus self, SseSerializer serializer);

  @protected
  void sse_encode_route_hint(RouteHint self, SseSerializer serializer);

  @protected
  void sse_encode_route_hint_hop(RouteHintHop self, SseSerializer serializer);

  @protected
  void sse_encode_send_onchain_request(SendOnchainRequest self, SseSerializer serializer);

  @protected
  void sse_encode_send_onchain_response(SendOnchainResponse self, SseSerializer serializer);

  @protected
  void sse_encode_send_payment_request(SendPaymentRequest self, SseSerializer serializer);

  @protected
  void sse_encode_send_payment_response(SendPaymentResponse self, SseSerializer serializer);

  @protected
  void sse_encode_send_spontaneous_payment_request(
      SendSpontaneousPaymentRequest self, SseSerializer serializer);

  @protected
  void sse_encode_service_health_check_response(ServiceHealthCheckResponse self, SseSerializer serializer);

  @protected
  void sse_encode_sign_message_request(SignMessageRequest self, SseSerializer serializer);

  @protected
  void sse_encode_sign_message_response(SignMessageResponse self, SseSerializer serializer);

  @protected
  void sse_encode_static_backup_request(StaticBackupRequest self, SseSerializer serializer);

  @protected
  void sse_encode_static_backup_response(StaticBackupResponse self, SseSerializer serializer);

  @protected
  void sse_encode_success_action_processed(SuccessActionProcessed self, SseSerializer serializer);

  @protected
  void sse_encode_swap_amount_type(SwapAmountType self, SseSerializer serializer);

  @protected
  void sse_encode_swap_info(SwapInfo self, SseSerializer serializer);

  @protected
  void sse_encode_swap_status(SwapStatus self, SseSerializer serializer);

  @protected
  void sse_encode_symbol(Symbol self, SseSerializer serializer);

  @protected
  void sse_encode_tlv_entry(TlvEntry self, SseSerializer serializer);

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_unspent_transaction_output(UnspentTransactionOutput self, SseSerializer serializer);

  @protected
  void sse_encode_url_success_action_data(UrlSuccessActionData self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class BreezSdkBindingsWire implements BaseWire {
  factory BreezSdkBindingsWire.fromExternalLibrary(ExternalLibrary lib) =>
      BreezSdkBindingsWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BreezSdkBindingsWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BreezSdkBindingsWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject =
      _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  void wire__crate__binding__backup(
    int port_,
  ) {
    return _wire__crate__binding__backup(
      port_,
    );
  }

  late final _wire__crate__binding__backupPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
      'frbgen_breez_sdk_wire__crate__binding__backup');
  late final _wire__crate__binding__backup =
      _wire__crate__binding__backupPtr.asFunction<void Function(int)>();

  void wire__crate__binding__backup_status(
    int port_,
  ) {
    return _wire__crate__binding__backup_status(
      port_,
    );
  }

  late final _wire__crate__binding__backup_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_breez_sdk_wire__crate__binding__backup_status');
  late final _wire__crate__binding__backup_status =
      _wire__crate__binding__backup_statusPtr.asFunction<void Function(int)>();

  void wire__crate__binding__binding_event_listener_on_event(
    int port_,
    ffi.Pointer<wire_cst_binding_event_listener> that,
    ffi.Pointer<wire_cst_breez_event> e,
  ) {
    return _wire__crate__binding__binding_event_listener_on_event(
      port_,
      that,
      e,
    );
  }

  late final _wire__crate__binding__binding_event_listener_on_eventPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_binding_event_listener>,
                  ffi.Pointer<wire_cst_breez_event>)>>(
      'frbgen_breez_sdk_wire__crate__binding__binding_event_listener_on_event');
  late final _wire__crate__binding__binding_event_listener_on_event =
      _wire__crate__binding__binding_event_listener_on_eventPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_cst_binding_event_listener>, ffi.Pointer<wire_cst_breez_event>)>();

  void wire__crate__binding__breez_events_stream(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> s,
  ) {
    return _wire__crate__binding__breez_events_stream(
      port_,
      s,
    );
  }

  late final _wire__crate__binding__breez_events_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_breez_sdk_wire__crate__binding__breez_events_stream');
  late final _wire__crate__binding__breez_events_stream = _wire__crate__binding__breez_events_streamPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__binding__breez_log_stream(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> s,
  ) {
    return _wire__crate__binding__breez_log_stream(
      port_,
      s,
    );
  }

  late final _wire__crate__binding__breez_log_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_breez_sdk_wire__crate__binding__breez_log_stream');
  late final _wire__crate__binding__breez_log_stream = _wire__crate__binding__breez_log_streamPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__binding__buy_bitcoin(
    int port_,
    ffi.Pointer<wire_cst_buy_bitcoin_request> req,
  ) {
    return _wire__crate__binding__buy_bitcoin(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__buy_bitcoinPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_buy_bitcoin_request>)>>(
          'frbgen_breez_sdk_wire__crate__binding__buy_bitcoin');
  late final _wire__crate__binding__buy_bitcoin = _wire__crate__binding__buy_bitcoinPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_buy_bitcoin_request>)>();

  void wire__crate__binding__check_message(
    int port_,
    ffi.Pointer<wire_cst_check_message_request> req,
  ) {
    return _wire__crate__binding__check_message(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__check_messagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_check_message_request>)>>(
          'frbgen_breez_sdk_wire__crate__binding__check_message');
  late final _wire__crate__binding__check_message = _wire__crate__binding__check_messagePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_check_message_request>)>();

  void wire__crate__binding__close_lsp_channels(
    int port_,
  ) {
    return _wire__crate__binding__close_lsp_channels(
      port_,
    );
  }

  late final _wire__crate__binding__close_lsp_channelsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_breez_sdk_wire__crate__binding__close_lsp_channels');
  late final _wire__crate__binding__close_lsp_channels =
      _wire__crate__binding__close_lsp_channelsPtr.asFunction<void Function(int)>();

  void wire__crate__binding__configure_node(
    int port_,
    ffi.Pointer<wire_cst_configure_node_request> req,
  ) {
    return _wire__crate__binding__configure_node(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__configure_nodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_configure_node_request>)>>(
          'frbgen_breez_sdk_wire__crate__binding__configure_node');
  late final _wire__crate__binding__configure_node = _wire__crate__binding__configure_nodePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_configure_node_request>)>();

  void wire__crate__binding__connect(
    int port_,
    ffi.Pointer<wire_cst_connect_request> req,
  ) {
    return _wire__crate__binding__connect(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__connectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_connect_request>)>>(
          'frbgen_breez_sdk_wire__crate__binding__connect');
  late final _wire__crate__binding__connect = _wire__crate__binding__connectPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_connect_request>)>();

  void wire__crate__binding__connect_lsp(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> lsp_id,
  ) {
    return _wire__crate__binding__connect_lsp(
      port_,
      lsp_id,
    );
  }

  late final _wire__crate__binding__connect_lspPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_breez_sdk_wire__crate__binding__connect_lsp');
  late final _wire__crate__binding__connect_lsp = _wire__crate__binding__connect_lspPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__binding__default_config(
    int port_,
    int env_type,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> api_key,
    ffi.Pointer<wire_cst_node_config> node_config,
  ) {
    return _wire__crate__binding__default_config(
      port_,
      env_type,
      api_key,
      node_config,
    );
  }

  late final _wire__crate__binding__default_configPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Pointer<wire_cst_node_config>)>>('frbgen_breez_sdk_wire__crate__binding__default_config');
  late final _wire__crate__binding__default_config = _wire__crate__binding__default_configPtr.asFunction<
      void Function(
          int, int, ffi.Pointer<wire_cst_list_prim_u_8_strict>, ffi.Pointer<wire_cst_node_config>)>();

  void wire__crate__binding__disconnect(
    int port_,
  ) {
    return _wire__crate__binding__disconnect(
      port_,
    );
  }

  late final _wire__crate__binding__disconnectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
      'frbgen_breez_sdk_wire__crate__binding__disconnect');
  late final _wire__crate__binding__disconnect =
      _wire__crate__binding__disconnectPtr.asFunction<void Function(int)>();

  void wire__crate__binding__execute_command(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> command,
  ) {
    return _wire__crate__binding__execute_command(
      port_,
      command,
    );
  }

  late final _wire__crate__binding__execute_commandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_breez_sdk_wire__crate__binding__execute_command');
  late final _wire__crate__binding__execute_command = _wire__crate__binding__execute_commandPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__binding__fetch_fiat_rates(
    int port_,
  ) {
    return _wire__crate__binding__fetch_fiat_rates(
      port_,
    );
  }

  late final _wire__crate__binding__fetch_fiat_ratesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_breez_sdk_wire__crate__binding__fetch_fiat_rates');
  late final _wire__crate__binding__fetch_fiat_rates =
      _wire__crate__binding__fetch_fiat_ratesPtr.asFunction<void Function(int)>();

  void wire__crate__binding__fetch_lsp_info(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> id,
  ) {
    return _wire__crate__binding__fetch_lsp_info(
      port_,
      id,
    );
  }

  late final _wire__crate__binding__fetch_lsp_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_breez_sdk_wire__crate__binding__fetch_lsp_info');
  late final _wire__crate__binding__fetch_lsp_info = _wire__crate__binding__fetch_lsp_infoPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__binding__fetch_reverse_swap_fees(
    int port_,
    ffi.Pointer<wire_cst_reverse_swap_fees_request> req,
  ) {
    return _wire__crate__binding__fetch_reverse_swap_fees(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__fetch_reverse_swap_feesPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_reverse_swap_fees_request>)>>(
      'frbgen_breez_sdk_wire__crate__binding__fetch_reverse_swap_fees');
  late final _wire__crate__binding__fetch_reverse_swap_fees =
      _wire__crate__binding__fetch_reverse_swap_feesPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_reverse_swap_fees_request>)>();

  void wire__crate__binding__generate_diagnostic_data(
    int port_,
  ) {
    return _wire__crate__binding__generate_diagnostic_data(
      port_,
    );
  }

  late final _wire__crate__binding__generate_diagnostic_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_breez_sdk_wire__crate__binding__generate_diagnostic_data');
  late final _wire__crate__binding__generate_diagnostic_data =
      _wire__crate__binding__generate_diagnostic_dataPtr.asFunction<void Function(int)>();

  void wire__crate__binding__in_progress_onchain_payments(
    int port_,
  ) {
    return _wire__crate__binding__in_progress_onchain_payments(
      port_,
    );
  }

  late final _wire__crate__binding__in_progress_onchain_paymentsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_breez_sdk_wire__crate__binding__in_progress_onchain_payments');
  late final _wire__crate__binding__in_progress_onchain_payments =
      _wire__crate__binding__in_progress_onchain_paymentsPtr.asFunction<void Function(int)>();

  void wire__crate__binding__in_progress_reverse_swaps(
    int port_,
  ) {
    return _wire__crate__binding__in_progress_reverse_swaps(
      port_,
    );
  }

  late final _wire__crate__binding__in_progress_reverse_swapsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_breez_sdk_wire__crate__binding__in_progress_reverse_swaps');
  late final _wire__crate__binding__in_progress_reverse_swaps =
      _wire__crate__binding__in_progress_reverse_swapsPtr.asFunction<void Function(int)>();

  void wire__crate__binding__in_progress_swap(
    int port_,
  ) {
    return _wire__crate__binding__in_progress_swap(
      port_,
    );
  }

  late final _wire__crate__binding__in_progress_swapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_breez_sdk_wire__crate__binding__in_progress_swap');
  late final _wire__crate__binding__in_progress_swap =
      _wire__crate__binding__in_progress_swapPtr.asFunction<void Function(int)>();

  void wire__crate__binding__is_initialized(
    int port_,
  ) {
    return _wire__crate__binding__is_initialized(
      port_,
    );
  }

  late final _wire__crate__binding__is_initializedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_breez_sdk_wire__crate__binding__is_initialized');
  late final _wire__crate__binding__is_initialized =
      _wire__crate__binding__is_initializedPtr.asFunction<void Function(int)>();

  void wire__crate__binding__list_fiat_currencies(
    int port_,
  ) {
    return _wire__crate__binding__list_fiat_currencies(
      port_,
    );
  }

  late final _wire__crate__binding__list_fiat_currenciesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_breez_sdk_wire__crate__binding__list_fiat_currencies');
  late final _wire__crate__binding__list_fiat_currencies =
      _wire__crate__binding__list_fiat_currenciesPtr.asFunction<void Function(int)>();

  void wire__crate__binding__list_lsps(
    int port_,
  ) {
    return _wire__crate__binding__list_lsps(
      port_,
    );
  }

  late final _wire__crate__binding__list_lspsPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
      'frbgen_breez_sdk_wire__crate__binding__list_lsps');
  late final _wire__crate__binding__list_lsps =
      _wire__crate__binding__list_lspsPtr.asFunction<void Function(int)>();

  void wire__crate__binding__list_payments(
    int port_,
    ffi.Pointer<wire_cst_list_payments_request> req,
  ) {
    return _wire__crate__binding__list_payments(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__list_paymentsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_payments_request>)>>(
          'frbgen_breez_sdk_wire__crate__binding__list_payments');
  late final _wire__crate__binding__list_payments = _wire__crate__binding__list_paymentsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_payments_request>)>();

  void wire__crate__binding__list_refundables(
    int port_,
  ) {
    return _wire__crate__binding__list_refundables(
      port_,
    );
  }

  late final _wire__crate__binding__list_refundablesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_breez_sdk_wire__crate__binding__list_refundables');
  late final _wire__crate__binding__list_refundables =
      _wire__crate__binding__list_refundablesPtr.asFunction<void Function(int)>();

  void wire__crate__binding__lnurl_auth(
    int port_,
    ffi.Pointer<wire_cst_ln_url_auth_request_data> req_data,
  ) {
    return _wire__crate__binding__lnurl_auth(
      port_,
      req_data,
    );
  }

  late final _wire__crate__binding__lnurl_authPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ln_url_auth_request_data>)>>(
      'frbgen_breez_sdk_wire__crate__binding__lnurl_auth');
  late final _wire__crate__binding__lnurl_auth = _wire__crate__binding__lnurl_authPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_ln_url_auth_request_data>)>();

  void wire__crate__binding__lnurl_pay(
    int port_,
    ffi.Pointer<wire_cst_ln_url_pay_request> req,
  ) {
    return _wire__crate__binding__lnurl_pay(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__lnurl_payPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ln_url_pay_request>)>>(
          'frbgen_breez_sdk_wire__crate__binding__lnurl_pay');
  late final _wire__crate__binding__lnurl_pay = _wire__crate__binding__lnurl_payPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_ln_url_pay_request>)>();

  void wire__crate__binding__lnurl_withdraw(
    int port_,
    ffi.Pointer<wire_cst_ln_url_withdraw_request> req,
  ) {
    return _wire__crate__binding__lnurl_withdraw(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__lnurl_withdrawPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_ln_url_withdraw_request>)>>(
      'frbgen_breez_sdk_wire__crate__binding__lnurl_withdraw');
  late final _wire__crate__binding__lnurl_withdraw = _wire__crate__binding__lnurl_withdrawPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_ln_url_withdraw_request>)>();

  void wire__crate__binding__lsp_id(
    int port_,
  ) {
    return _wire__crate__binding__lsp_id(
      port_,
    );
  }

  late final _wire__crate__binding__lsp_idPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
      'frbgen_breez_sdk_wire__crate__binding__lsp_id');
  late final _wire__crate__binding__lsp_id =
      _wire__crate__binding__lsp_idPtr.asFunction<void Function(int)>();

  void wire__crate__binding__lsp_info(
    int port_,
  ) {
    return _wire__crate__binding__lsp_info(
      port_,
    );
  }

  late final _wire__crate__binding__lsp_infoPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
      'frbgen_breez_sdk_wire__crate__binding__lsp_info');
  late final _wire__crate__binding__lsp_info =
      _wire__crate__binding__lsp_infoPtr.asFunction<void Function(int)>();

  void wire__crate__binding__max_reverse_swap_amount(
    int port_,
  ) {
    return _wire__crate__binding__max_reverse_swap_amount(
      port_,
    );
  }

  late final _wire__crate__binding__max_reverse_swap_amountPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_breez_sdk_wire__crate__binding__max_reverse_swap_amount');
  late final _wire__crate__binding__max_reverse_swap_amount =
      _wire__crate__binding__max_reverse_swap_amountPtr.asFunction<void Function(int)>();

  void wire__crate__binding__mnemonic_to_seed(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> phrase,
  ) {
    return _wire__crate__binding__mnemonic_to_seed(
      port_,
      phrase,
    );
  }

  late final _wire__crate__binding__mnemonic_to_seedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_breez_sdk_wire__crate__binding__mnemonic_to_seed');
  late final _wire__crate__binding__mnemonic_to_seed = _wire__crate__binding__mnemonic_to_seedPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__binding__node_credentials(
    int port_,
  ) {
    return _wire__crate__binding__node_credentials(
      port_,
    );
  }

  late final _wire__crate__binding__node_credentialsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_breez_sdk_wire__crate__binding__node_credentials');
  late final _wire__crate__binding__node_credentials =
      _wire__crate__binding__node_credentialsPtr.asFunction<void Function(int)>();

  void wire__crate__binding__node_info(
    int port_,
  ) {
    return _wire__crate__binding__node_info(
      port_,
    );
  }

  late final _wire__crate__binding__node_infoPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
      'frbgen_breez_sdk_wire__crate__binding__node_info');
  late final _wire__crate__binding__node_info =
      _wire__crate__binding__node_infoPtr.asFunction<void Function(int)>();

  void wire__crate__binding__onchain_payment_limits(
    int port_,
  ) {
    return _wire__crate__binding__onchain_payment_limits(
      port_,
    );
  }

  late final _wire__crate__binding__onchain_payment_limitsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_breez_sdk_wire__crate__binding__onchain_payment_limits');
  late final _wire__crate__binding__onchain_payment_limits =
      _wire__crate__binding__onchain_payment_limitsPtr.asFunction<void Function(int)>();

  void wire__crate__binding__open_channel_fee(
    int port_,
    ffi.Pointer<wire_cst_open_channel_fee_request> req,
  ) {
    return _wire__crate__binding__open_channel_fee(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__open_channel_feePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_open_channel_fee_request>)>>(
      'frbgen_breez_sdk_wire__crate__binding__open_channel_fee');
  late final _wire__crate__binding__open_channel_fee = _wire__crate__binding__open_channel_feePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_open_channel_fee_request>)>();

  void wire__crate__binding__parse_input(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> input,
  ) {
    return _wire__crate__binding__parse_input(
      port_,
      input,
    );
  }

  late final _wire__crate__binding__parse_inputPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_breez_sdk_wire__crate__binding__parse_input');
  late final _wire__crate__binding__parse_input = _wire__crate__binding__parse_inputPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__binding__parse_invoice(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> invoice,
  ) {
    return _wire__crate__binding__parse_invoice(
      port_,
      invoice,
    );
  }

  late final _wire__crate__binding__parse_invoicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_breez_sdk_wire__crate__binding__parse_invoice');
  late final _wire__crate__binding__parse_invoice = _wire__crate__binding__parse_invoicePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__binding__pay_onchain(
    int port_,
    ffi.Pointer<wire_cst_pay_onchain_request> req,
  ) {
    return _wire__crate__binding__pay_onchain(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__pay_onchainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_pay_onchain_request>)>>(
          'frbgen_breez_sdk_wire__crate__binding__pay_onchain');
  late final _wire__crate__binding__pay_onchain = _wire__crate__binding__pay_onchainPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_pay_onchain_request>)>();

  void wire__crate__binding__payment_by_hash(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> hash,
  ) {
    return _wire__crate__binding__payment_by_hash(
      port_,
      hash,
    );
  }

  late final _wire__crate__binding__payment_by_hashPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_breez_sdk_wire__crate__binding__payment_by_hash');
  late final _wire__crate__binding__payment_by_hash = _wire__crate__binding__payment_by_hashPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__binding__prepare_onchain_payment(
    int port_,
    ffi.Pointer<wire_cst_prepare_onchain_payment_request> req,
  ) {
    return _wire__crate__binding__prepare_onchain_payment(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__prepare_onchain_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_prepare_onchain_payment_request>)>>(
      'frbgen_breez_sdk_wire__crate__binding__prepare_onchain_payment');
  late final _wire__crate__binding__prepare_onchain_payment =
      _wire__crate__binding__prepare_onchain_paymentPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_prepare_onchain_payment_request>)>();

  void wire__crate__binding__prepare_redeem_onchain_funds(
    int port_,
    ffi.Pointer<wire_cst_prepare_redeem_onchain_funds_request> req,
  ) {
    return _wire__crate__binding__prepare_redeem_onchain_funds(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__prepare_redeem_onchain_fundsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_prepare_redeem_onchain_funds_request>)>>(
      'frbgen_breez_sdk_wire__crate__binding__prepare_redeem_onchain_funds');
  late final _wire__crate__binding__prepare_redeem_onchain_funds =
      _wire__crate__binding__prepare_redeem_onchain_fundsPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_prepare_redeem_onchain_funds_request>)>();

  void wire__crate__binding__prepare_refund(
    int port_,
    ffi.Pointer<wire_cst_prepare_refund_request> req,
  ) {
    return _wire__crate__binding__prepare_refund(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__prepare_refundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_prepare_refund_request>)>>(
          'frbgen_breez_sdk_wire__crate__binding__prepare_refund');
  late final _wire__crate__binding__prepare_refund = _wire__crate__binding__prepare_refundPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_prepare_refund_request>)>();

  void wire__crate__binding__receive_onchain(
    int port_,
    ffi.Pointer<wire_cst_receive_onchain_request> req,
  ) {
    return _wire__crate__binding__receive_onchain(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__receive_onchainPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_receive_onchain_request>)>>(
      'frbgen_breez_sdk_wire__crate__binding__receive_onchain');
  late final _wire__crate__binding__receive_onchain = _wire__crate__binding__receive_onchainPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_receive_onchain_request>)>();

  void wire__crate__binding__receive_payment(
    int port_,
    ffi.Pointer<wire_cst_receive_payment_request> req,
  ) {
    return _wire__crate__binding__receive_payment(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__receive_paymentPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_receive_payment_request>)>>(
      'frbgen_breez_sdk_wire__crate__binding__receive_payment');
  late final _wire__crate__binding__receive_payment = _wire__crate__binding__receive_paymentPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_receive_payment_request>)>();

  void wire__crate__binding__recommended_fees(
    int port_,
  ) {
    return _wire__crate__binding__recommended_fees(
      port_,
    );
  }

  late final _wire__crate__binding__recommended_feesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_breez_sdk_wire__crate__binding__recommended_fees');
  late final _wire__crate__binding__recommended_fees =
      _wire__crate__binding__recommended_feesPtr.asFunction<void Function(int)>();

  void wire__crate__binding__redeem_onchain_funds(
    int port_,
    ffi.Pointer<wire_cst_redeem_onchain_funds_request> req,
  ) {
    return _wire__crate__binding__redeem_onchain_funds(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__redeem_onchain_fundsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_redeem_onchain_funds_request>)>>(
      'frbgen_breez_sdk_wire__crate__binding__redeem_onchain_funds');
  late final _wire__crate__binding__redeem_onchain_funds = _wire__crate__binding__redeem_onchain_fundsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_redeem_onchain_funds_request>)>();

  void wire__crate__binding__redeem_swap(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> swap_address,
  ) {
    return _wire__crate__binding__redeem_swap(
      port_,
      swap_address,
    );
  }

  late final _wire__crate__binding__redeem_swapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_breez_sdk_wire__crate__binding__redeem_swap');
  late final _wire__crate__binding__redeem_swap = _wire__crate__binding__redeem_swapPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__binding__refund(
    int port_,
    ffi.Pointer<wire_cst_refund_request> req,
  ) {
    return _wire__crate__binding__refund(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__refundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_refund_request>)>>(
          'frbgen_breez_sdk_wire__crate__binding__refund');
  late final _wire__crate__binding__refund =
      _wire__crate__binding__refundPtr.asFunction<void Function(int, ffi.Pointer<wire_cst_refund_request>)>();

  void wire__crate__binding__register_webhook(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> webhook_url,
  ) {
    return _wire__crate__binding__register_webhook(
      port_,
      webhook_url,
    );
  }

  late final _wire__crate__binding__register_webhookPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_breez_sdk_wire__crate__binding__register_webhook');
  late final _wire__crate__binding__register_webhook = _wire__crate__binding__register_webhookPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__binding__report_issue(
    int port_,
    ffi.Pointer<wire_cst_report_issue_request> req,
  ) {
    return _wire__crate__binding__report_issue(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__report_issuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_report_issue_request>)>>(
          'frbgen_breez_sdk_wire__crate__binding__report_issue');
  late final _wire__crate__binding__report_issue = _wire__crate__binding__report_issuePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_report_issue_request>)>();

  void wire__crate__binding__rescan_swaps(
    int port_,
  ) {
    return _wire__crate__binding__rescan_swaps(
      port_,
    );
  }

  late final _wire__crate__binding__rescan_swapsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_breez_sdk_wire__crate__binding__rescan_swaps');
  late final _wire__crate__binding__rescan_swaps =
      _wire__crate__binding__rescan_swapsPtr.asFunction<void Function(int)>();

  void wire__crate__binding__send_onchain(
    int port_,
    ffi.Pointer<wire_cst_send_onchain_request> req,
  ) {
    return _wire__crate__binding__send_onchain(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__send_onchainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_send_onchain_request>)>>(
          'frbgen_breez_sdk_wire__crate__binding__send_onchain');
  late final _wire__crate__binding__send_onchain = _wire__crate__binding__send_onchainPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_send_onchain_request>)>();

  void wire__crate__binding__send_payment(
    int port_,
    ffi.Pointer<wire_cst_send_payment_request> req,
  ) {
    return _wire__crate__binding__send_payment(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__send_paymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_send_payment_request>)>>(
          'frbgen_breez_sdk_wire__crate__binding__send_payment');
  late final _wire__crate__binding__send_payment = _wire__crate__binding__send_paymentPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_send_payment_request>)>();

  void wire__crate__binding__send_spontaneous_payment(
    int port_,
    ffi.Pointer<wire_cst_send_spontaneous_payment_request> req,
  ) {
    return _wire__crate__binding__send_spontaneous_payment(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__send_spontaneous_paymentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_send_spontaneous_payment_request>)>>(
      'frbgen_breez_sdk_wire__crate__binding__send_spontaneous_payment');
  late final _wire__crate__binding__send_spontaneous_payment =
      _wire__crate__binding__send_spontaneous_paymentPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_send_spontaneous_payment_request>)>();

  void wire__crate__binding__service_health_check(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> api_key,
  ) {
    return _wire__crate__binding__service_health_check(
      port_,
      api_key,
    );
  }

  late final _wire__crate__binding__service_health_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_breez_sdk_wire__crate__binding__service_health_check');
  late final _wire__crate__binding__service_health_check = _wire__crate__binding__service_health_checkPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__binding__set_payment_metadata(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> hash,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> metadata,
  ) {
    return _wire__crate__binding__set_payment_metadata(
      port_,
      hash,
      metadata,
    );
  }

  late final _wire__crate__binding__set_payment_metadataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_breez_sdk_wire__crate__binding__set_payment_metadata');
  late final _wire__crate__binding__set_payment_metadata =
      _wire__crate__binding__set_payment_metadataPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_cst_list_prim_u_8_strict>, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire__crate__binding__sign_message(
    int port_,
    ffi.Pointer<wire_cst_sign_message_request> req,
  ) {
    return _wire__crate__binding__sign_message(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__sign_messagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_sign_message_request>)>>(
          'frbgen_breez_sdk_wire__crate__binding__sign_message');
  late final _wire__crate__binding__sign_message = _wire__crate__binding__sign_messagePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_sign_message_request>)>();

  void wire__crate__binding__static_backup(
    int port_,
    ffi.Pointer<wire_cst_static_backup_request> req,
  ) {
    return _wire__crate__binding__static_backup(
      port_,
      req,
    );
  }

  late final _wire__crate__binding__static_backupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_static_backup_request>)>>(
          'frbgen_breez_sdk_wire__crate__binding__static_backup');
  late final _wire__crate__binding__static_backup = _wire__crate__binding__static_backupPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_static_backup_request>)>();

  void wire__crate__binding__sync(
    int port_,
  ) {
    return _wire__crate__binding__sync(
      port_,
    );
  }

  late final _wire__crate__binding__syncPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
      'frbgen_breez_sdk_wire__crate__binding__sync');
  late final _wire__crate__binding__sync = _wire__crate__binding__syncPtr.asFunction<void Function(int)>();

  void wire__crate__binding__unregister_webhook(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> webhook_url,
  ) {
    return _wire__crate__binding__unregister_webhook(
      port_,
      webhook_url,
    );
  }

  late final _wire__crate__binding__unregister_webhookPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
          'frbgen_breez_sdk_wire__crate__binding__unregister_webhook');
  late final _wire__crate__binding__unregister_webhook = _wire__crate__binding__unregister_webhookPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  ffi.Pointer<wire_cst_aes_success_action_data_decrypted>
      cst_new_box_autoadd_aes_success_action_data_decrypted() {
    return _cst_new_box_autoadd_aes_success_action_data_decrypted();
  }

  late final _cst_new_box_autoadd_aes_success_action_data_decryptedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_aes_success_action_data_decrypted> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_aes_success_action_data_decrypted');
  late final _cst_new_box_autoadd_aes_success_action_data_decrypted =
      _cst_new_box_autoadd_aes_success_action_data_decryptedPtr
          .asFunction<ffi.Pointer<wire_cst_aes_success_action_data_decrypted> Function()>();

  ffi.Pointer<wire_cst_aes_success_action_data_result> cst_new_box_autoadd_aes_success_action_data_result() {
    return _cst_new_box_autoadd_aes_success_action_data_result();
  }

  late final _cst_new_box_autoadd_aes_success_action_data_resultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_aes_success_action_data_result> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_aes_success_action_data_result');
  late final _cst_new_box_autoadd_aes_success_action_data_result =
      _cst_new_box_autoadd_aes_success_action_data_resultPtr
          .asFunction<ffi.Pointer<wire_cst_aes_success_action_data_result> Function()>();

  ffi.Pointer<wire_cst_backup_failed_data> cst_new_box_autoadd_backup_failed_data() {
    return _cst_new_box_autoadd_backup_failed_data();
  }

  late final _cst_new_box_autoadd_backup_failed_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_backup_failed_data> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_backup_failed_data');
  late final _cst_new_box_autoadd_backup_failed_data = _cst_new_box_autoadd_backup_failed_dataPtr
      .asFunction<ffi.Pointer<wire_cst_backup_failed_data> Function()>();

  ffi.Pointer<wire_cst_binding_event_listener> cst_new_box_autoadd_binding_event_listener() {
    return _cst_new_box_autoadd_binding_event_listener();
  }

  late final _cst_new_box_autoadd_binding_event_listenerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_binding_event_listener> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_binding_event_listener');
  late final _cst_new_box_autoadd_binding_event_listener = _cst_new_box_autoadd_binding_event_listenerPtr
      .asFunction<ffi.Pointer<wire_cst_binding_event_listener> Function()>();

  ffi.Pointer<wire_cst_bitcoin_address_data> cst_new_box_autoadd_bitcoin_address_data() {
    return _cst_new_box_autoadd_bitcoin_address_data();
  }

  late final _cst_new_box_autoadd_bitcoin_address_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_bitcoin_address_data> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_bitcoin_address_data');
  late final _cst_new_box_autoadd_bitcoin_address_data = _cst_new_box_autoadd_bitcoin_address_dataPtr
      .asFunction<ffi.Pointer<wire_cst_bitcoin_address_data> Function()>();

  ffi.Pointer<ffi.Bool> cst_new_box_autoadd_bool(
    bool value,
  ) {
    return _cst_new_box_autoadd_bool(
      value,
    );
  }

  late final _cst_new_box_autoadd_boolPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function(ffi.Bool)>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_bool');
  late final _cst_new_box_autoadd_bool =
      _cst_new_box_autoadd_boolPtr.asFunction<ffi.Pointer<ffi.Bool> Function(bool)>();

  ffi.Pointer<wire_cst_breez_event> cst_new_box_autoadd_breez_event() {
    return _cst_new_box_autoadd_breez_event();
  }

  late final _cst_new_box_autoadd_breez_eventPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_breez_event> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_breez_event');
  late final _cst_new_box_autoadd_breez_event =
      _cst_new_box_autoadd_breez_eventPtr.asFunction<ffi.Pointer<wire_cst_breez_event> Function()>();

  ffi.Pointer<wire_cst_buy_bitcoin_request> cst_new_box_autoadd_buy_bitcoin_request() {
    return _cst_new_box_autoadd_buy_bitcoin_request();
  }

  late final _cst_new_box_autoadd_buy_bitcoin_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_buy_bitcoin_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_buy_bitcoin_request');
  late final _cst_new_box_autoadd_buy_bitcoin_request = _cst_new_box_autoadd_buy_bitcoin_requestPtr
      .asFunction<ffi.Pointer<wire_cst_buy_bitcoin_request> Function()>();

  ffi.Pointer<wire_cst_check_message_request> cst_new_box_autoadd_check_message_request() {
    return _cst_new_box_autoadd_check_message_request();
  }

  late final _cst_new_box_autoadd_check_message_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_check_message_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_check_message_request');
  late final _cst_new_box_autoadd_check_message_request = _cst_new_box_autoadd_check_message_requestPtr
      .asFunction<ffi.Pointer<wire_cst_check_message_request> Function()>();

  ffi.Pointer<wire_cst_closed_channel_payment_details> cst_new_box_autoadd_closed_channel_payment_details() {
    return _cst_new_box_autoadd_closed_channel_payment_details();
  }

  late final _cst_new_box_autoadd_closed_channel_payment_detailsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_closed_channel_payment_details> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_closed_channel_payment_details');
  late final _cst_new_box_autoadd_closed_channel_payment_details =
      _cst_new_box_autoadd_closed_channel_payment_detailsPtr
          .asFunction<ffi.Pointer<wire_cst_closed_channel_payment_details> Function()>();

  ffi.Pointer<wire_cst_configure_node_request> cst_new_box_autoadd_configure_node_request() {
    return _cst_new_box_autoadd_configure_node_request();
  }

  late final _cst_new_box_autoadd_configure_node_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_configure_node_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_configure_node_request');
  late final _cst_new_box_autoadd_configure_node_request = _cst_new_box_autoadd_configure_node_requestPtr
      .asFunction<ffi.Pointer<wire_cst_configure_node_request> Function()>();

  ffi.Pointer<wire_cst_connect_request> cst_new_box_autoadd_connect_request() {
    return _cst_new_box_autoadd_connect_request();
  }

  late final _cst_new_box_autoadd_connect_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_connect_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_connect_request');
  late final _cst_new_box_autoadd_connect_request =
      _cst_new_box_autoadd_connect_requestPtr.asFunction<ffi.Pointer<wire_cst_connect_request> Function()>();

  ffi.Pointer<wire_cst_greenlight_credentials> cst_new_box_autoadd_greenlight_credentials() {
    return _cst_new_box_autoadd_greenlight_credentials();
  }

  late final _cst_new_box_autoadd_greenlight_credentialsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_greenlight_credentials> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_greenlight_credentials');
  late final _cst_new_box_autoadd_greenlight_credentials = _cst_new_box_autoadd_greenlight_credentialsPtr
      .asFunction<ffi.Pointer<wire_cst_greenlight_credentials> Function()>();

  ffi.Pointer<wire_cst_greenlight_node_config> cst_new_box_autoadd_greenlight_node_config() {
    return _cst_new_box_autoadd_greenlight_node_config();
  }

  late final _cst_new_box_autoadd_greenlight_node_configPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_greenlight_node_config> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_greenlight_node_config');
  late final _cst_new_box_autoadd_greenlight_node_config = _cst_new_box_autoadd_greenlight_node_configPtr
      .asFunction<ffi.Pointer<wire_cst_greenlight_node_config> Function()>();

  ffi.Pointer<ffi.Int64> cst_new_box_autoadd_i_64(
    int value,
  ) {
    return _cst_new_box_autoadd_i_64(
      value,
    );
  }

  late final _cst_new_box_autoadd_i_64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_i_64');
  late final _cst_new_box_autoadd_i_64 =
      _cst_new_box_autoadd_i_64Ptr.asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<wire_cst_invoice_paid_details> cst_new_box_autoadd_invoice_paid_details() {
    return _cst_new_box_autoadd_invoice_paid_details();
  }

  late final _cst_new_box_autoadd_invoice_paid_detailsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_invoice_paid_details> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_invoice_paid_details');
  late final _cst_new_box_autoadd_invoice_paid_details = _cst_new_box_autoadd_invoice_paid_detailsPtr
      .asFunction<ffi.Pointer<wire_cst_invoice_paid_details> Function()>();

  ffi.Pointer<wire_cst_list_payments_request> cst_new_box_autoadd_list_payments_request() {
    return _cst_new_box_autoadd_list_payments_request();
  }

  late final _cst_new_box_autoadd_list_payments_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_payments_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_list_payments_request');
  late final _cst_new_box_autoadd_list_payments_request = _cst_new_box_autoadd_list_payments_requestPtr
      .asFunction<ffi.Pointer<wire_cst_list_payments_request> Function()>();

  ffi.Pointer<wire_cst_ln_invoice> cst_new_box_autoadd_ln_invoice() {
    return _cst_new_box_autoadd_ln_invoice();
  }

  late final _cst_new_box_autoadd_ln_invoicePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_ln_invoice> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_ln_invoice');
  late final _cst_new_box_autoadd_ln_invoice =
      _cst_new_box_autoadd_ln_invoicePtr.asFunction<ffi.Pointer<wire_cst_ln_invoice> Function()>();

  ffi.Pointer<wire_cst_ln_payment_details> cst_new_box_autoadd_ln_payment_details() {
    return _cst_new_box_autoadd_ln_payment_details();
  }

  late final _cst_new_box_autoadd_ln_payment_detailsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_ln_payment_details> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_ln_payment_details');
  late final _cst_new_box_autoadd_ln_payment_details = _cst_new_box_autoadd_ln_payment_detailsPtr
      .asFunction<ffi.Pointer<wire_cst_ln_payment_details> Function()>();

  ffi.Pointer<wire_cst_ln_url_auth_request_data> cst_new_box_autoadd_ln_url_auth_request_data() {
    return _cst_new_box_autoadd_ln_url_auth_request_data();
  }

  late final _cst_new_box_autoadd_ln_url_auth_request_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_ln_url_auth_request_data> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_ln_url_auth_request_data');
  late final _cst_new_box_autoadd_ln_url_auth_request_data = _cst_new_box_autoadd_ln_url_auth_request_dataPtr
      .asFunction<ffi.Pointer<wire_cst_ln_url_auth_request_data> Function()>();

  ffi.Pointer<wire_cst_ln_url_error_data> cst_new_box_autoadd_ln_url_error_data() {
    return _cst_new_box_autoadd_ln_url_error_data();
  }

  late final _cst_new_box_autoadd_ln_url_error_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_ln_url_error_data> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_ln_url_error_data');
  late final _cst_new_box_autoadd_ln_url_error_data = _cst_new_box_autoadd_ln_url_error_dataPtr
      .asFunction<ffi.Pointer<wire_cst_ln_url_error_data> Function()>();

  ffi.Pointer<wire_cst_ln_url_pay_error_data> cst_new_box_autoadd_ln_url_pay_error_data() {
    return _cst_new_box_autoadd_ln_url_pay_error_data();
  }

  late final _cst_new_box_autoadd_ln_url_pay_error_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_ln_url_pay_error_data> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_ln_url_pay_error_data');
  late final _cst_new_box_autoadd_ln_url_pay_error_data = _cst_new_box_autoadd_ln_url_pay_error_dataPtr
      .asFunction<ffi.Pointer<wire_cst_ln_url_pay_error_data> Function()>();

  ffi.Pointer<wire_cst_ln_url_pay_request> cst_new_box_autoadd_ln_url_pay_request() {
    return _cst_new_box_autoadd_ln_url_pay_request();
  }

  late final _cst_new_box_autoadd_ln_url_pay_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_ln_url_pay_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_ln_url_pay_request');
  late final _cst_new_box_autoadd_ln_url_pay_request = _cst_new_box_autoadd_ln_url_pay_requestPtr
      .asFunction<ffi.Pointer<wire_cst_ln_url_pay_request> Function()>();

  ffi.Pointer<wire_cst_ln_url_pay_request_data> cst_new_box_autoadd_ln_url_pay_request_data() {
    return _cst_new_box_autoadd_ln_url_pay_request_data();
  }

  late final _cst_new_box_autoadd_ln_url_pay_request_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_ln_url_pay_request_data> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_ln_url_pay_request_data');
  late final _cst_new_box_autoadd_ln_url_pay_request_data = _cst_new_box_autoadd_ln_url_pay_request_dataPtr
      .asFunction<ffi.Pointer<wire_cst_ln_url_pay_request_data> Function()>();

  ffi.Pointer<wire_cst_ln_url_pay_success_data> cst_new_box_autoadd_ln_url_pay_success_data() {
    return _cst_new_box_autoadd_ln_url_pay_success_data();
  }

  late final _cst_new_box_autoadd_ln_url_pay_success_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_ln_url_pay_success_data> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_ln_url_pay_success_data');
  late final _cst_new_box_autoadd_ln_url_pay_success_data = _cst_new_box_autoadd_ln_url_pay_success_dataPtr
      .asFunction<ffi.Pointer<wire_cst_ln_url_pay_success_data> Function()>();

  ffi.Pointer<wire_cst_ln_url_withdraw_request> cst_new_box_autoadd_ln_url_withdraw_request() {
    return _cst_new_box_autoadd_ln_url_withdraw_request();
  }

  late final _cst_new_box_autoadd_ln_url_withdraw_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_ln_url_withdraw_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_ln_url_withdraw_request');
  late final _cst_new_box_autoadd_ln_url_withdraw_request = _cst_new_box_autoadd_ln_url_withdraw_requestPtr
      .asFunction<ffi.Pointer<wire_cst_ln_url_withdraw_request> Function()>();

  ffi.Pointer<wire_cst_ln_url_withdraw_request_data> cst_new_box_autoadd_ln_url_withdraw_request_data() {
    return _cst_new_box_autoadd_ln_url_withdraw_request_data();
  }

  late final _cst_new_box_autoadd_ln_url_withdraw_request_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_ln_url_withdraw_request_data> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_ln_url_withdraw_request_data');
  late final _cst_new_box_autoadd_ln_url_withdraw_request_data =
      _cst_new_box_autoadd_ln_url_withdraw_request_dataPtr
          .asFunction<ffi.Pointer<wire_cst_ln_url_withdraw_request_data> Function()>();

  ffi.Pointer<wire_cst_ln_url_withdraw_success_data> cst_new_box_autoadd_ln_url_withdraw_success_data() {
    return _cst_new_box_autoadd_ln_url_withdraw_success_data();
  }

  late final _cst_new_box_autoadd_ln_url_withdraw_success_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_ln_url_withdraw_success_data> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_ln_url_withdraw_success_data');
  late final _cst_new_box_autoadd_ln_url_withdraw_success_data =
      _cst_new_box_autoadd_ln_url_withdraw_success_dataPtr
          .asFunction<ffi.Pointer<wire_cst_ln_url_withdraw_success_data> Function()>();

  ffi.Pointer<wire_cst_lsp_information> cst_new_box_autoadd_lsp_information() {
    return _cst_new_box_autoadd_lsp_information();
  }

  late final _cst_new_box_autoadd_lsp_informationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_lsp_information> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_lsp_information');
  late final _cst_new_box_autoadd_lsp_information =
      _cst_new_box_autoadd_lsp_informationPtr.asFunction<ffi.Pointer<wire_cst_lsp_information> Function()>();

  ffi.Pointer<wire_cst_message_success_action_data> cst_new_box_autoadd_message_success_action_data() {
    return _cst_new_box_autoadd_message_success_action_data();
  }

  late final _cst_new_box_autoadd_message_success_action_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_message_success_action_data> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_message_success_action_data');
  late final _cst_new_box_autoadd_message_success_action_data =
      _cst_new_box_autoadd_message_success_action_dataPtr
          .asFunction<ffi.Pointer<wire_cst_message_success_action_data> Function()>();

  ffi.Pointer<wire_cst_node_config> cst_new_box_autoadd_node_config() {
    return _cst_new_box_autoadd_node_config();
  }

  late final _cst_new_box_autoadd_node_configPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_node_config> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_node_config');
  late final _cst_new_box_autoadd_node_config =
      _cst_new_box_autoadd_node_configPtr.asFunction<ffi.Pointer<wire_cst_node_config> Function()>();

  ffi.Pointer<wire_cst_node_credentials> cst_new_box_autoadd_node_credentials() {
    return _cst_new_box_autoadd_node_credentials();
  }

  late final _cst_new_box_autoadd_node_credentialsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_node_credentials> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_node_credentials');
  late final _cst_new_box_autoadd_node_credentials = _cst_new_box_autoadd_node_credentialsPtr
      .asFunction<ffi.Pointer<wire_cst_node_credentials> Function()>();

  ffi.Pointer<wire_cst_open_channel_fee_request> cst_new_box_autoadd_open_channel_fee_request() {
    return _cst_new_box_autoadd_open_channel_fee_request();
  }

  late final _cst_new_box_autoadd_open_channel_fee_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_open_channel_fee_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_open_channel_fee_request');
  late final _cst_new_box_autoadd_open_channel_fee_request = _cst_new_box_autoadd_open_channel_fee_requestPtr
      .asFunction<ffi.Pointer<wire_cst_open_channel_fee_request> Function()>();

  ffi.Pointer<wire_cst_opening_fee_params> cst_new_box_autoadd_opening_fee_params() {
    return _cst_new_box_autoadd_opening_fee_params();
  }

  late final _cst_new_box_autoadd_opening_fee_paramsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_opening_fee_params> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_opening_fee_params');
  late final _cst_new_box_autoadd_opening_fee_params = _cst_new_box_autoadd_opening_fee_paramsPtr
      .asFunction<ffi.Pointer<wire_cst_opening_fee_params> Function()>();

  ffi.Pointer<wire_cst_pay_onchain_request> cst_new_box_autoadd_pay_onchain_request() {
    return _cst_new_box_autoadd_pay_onchain_request();
  }

  late final _cst_new_box_autoadd_pay_onchain_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_pay_onchain_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_pay_onchain_request');
  late final _cst_new_box_autoadd_pay_onchain_request = _cst_new_box_autoadd_pay_onchain_requestPtr
      .asFunction<ffi.Pointer<wire_cst_pay_onchain_request> Function()>();

  ffi.Pointer<wire_cst_payment> cst_new_box_autoadd_payment() {
    return _cst_new_box_autoadd_payment();
  }

  late final _cst_new_box_autoadd_paymentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_payment> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_payment');
  late final _cst_new_box_autoadd_payment =
      _cst_new_box_autoadd_paymentPtr.asFunction<ffi.Pointer<wire_cst_payment> Function()>();

  ffi.Pointer<wire_cst_payment_failed_data> cst_new_box_autoadd_payment_failed_data() {
    return _cst_new_box_autoadd_payment_failed_data();
  }

  late final _cst_new_box_autoadd_payment_failed_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_payment_failed_data> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_payment_failed_data');
  late final _cst_new_box_autoadd_payment_failed_data = _cst_new_box_autoadd_payment_failed_dataPtr
      .asFunction<ffi.Pointer<wire_cst_payment_failed_data> Function()>();

  ffi.Pointer<wire_cst_prepare_onchain_payment_request>
      cst_new_box_autoadd_prepare_onchain_payment_request() {
    return _cst_new_box_autoadd_prepare_onchain_payment_request();
  }

  late final _cst_new_box_autoadd_prepare_onchain_payment_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_prepare_onchain_payment_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_prepare_onchain_payment_request');
  late final _cst_new_box_autoadd_prepare_onchain_payment_request =
      _cst_new_box_autoadd_prepare_onchain_payment_requestPtr
          .asFunction<ffi.Pointer<wire_cst_prepare_onchain_payment_request> Function()>();

  ffi.Pointer<wire_cst_prepare_redeem_onchain_funds_request>
      cst_new_box_autoadd_prepare_redeem_onchain_funds_request() {
    return _cst_new_box_autoadd_prepare_redeem_onchain_funds_request();
  }

  late final _cst_new_box_autoadd_prepare_redeem_onchain_funds_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_prepare_redeem_onchain_funds_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_prepare_redeem_onchain_funds_request');
  late final _cst_new_box_autoadd_prepare_redeem_onchain_funds_request =
      _cst_new_box_autoadd_prepare_redeem_onchain_funds_requestPtr
          .asFunction<ffi.Pointer<wire_cst_prepare_redeem_onchain_funds_request> Function()>();

  ffi.Pointer<wire_cst_prepare_refund_request> cst_new_box_autoadd_prepare_refund_request() {
    return _cst_new_box_autoadd_prepare_refund_request();
  }

  late final _cst_new_box_autoadd_prepare_refund_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_prepare_refund_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_prepare_refund_request');
  late final _cst_new_box_autoadd_prepare_refund_request = _cst_new_box_autoadd_prepare_refund_requestPtr
      .asFunction<ffi.Pointer<wire_cst_prepare_refund_request> Function()>();

  ffi.Pointer<wire_cst_receive_onchain_request> cst_new_box_autoadd_receive_onchain_request() {
    return _cst_new_box_autoadd_receive_onchain_request();
  }

  late final _cst_new_box_autoadd_receive_onchain_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_receive_onchain_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_receive_onchain_request');
  late final _cst_new_box_autoadd_receive_onchain_request = _cst_new_box_autoadd_receive_onchain_requestPtr
      .asFunction<ffi.Pointer<wire_cst_receive_onchain_request> Function()>();

  ffi.Pointer<wire_cst_receive_payment_request> cst_new_box_autoadd_receive_payment_request() {
    return _cst_new_box_autoadd_receive_payment_request();
  }

  late final _cst_new_box_autoadd_receive_payment_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_receive_payment_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_receive_payment_request');
  late final _cst_new_box_autoadd_receive_payment_request = _cst_new_box_autoadd_receive_payment_requestPtr
      .asFunction<ffi.Pointer<wire_cst_receive_payment_request> Function()>();

  ffi.Pointer<wire_cst_redeem_onchain_funds_request> cst_new_box_autoadd_redeem_onchain_funds_request() {
    return _cst_new_box_autoadd_redeem_onchain_funds_request();
  }

  late final _cst_new_box_autoadd_redeem_onchain_funds_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_redeem_onchain_funds_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_redeem_onchain_funds_request');
  late final _cst_new_box_autoadd_redeem_onchain_funds_request =
      _cst_new_box_autoadd_redeem_onchain_funds_requestPtr
          .asFunction<ffi.Pointer<wire_cst_redeem_onchain_funds_request> Function()>();

  ffi.Pointer<wire_cst_refund_request> cst_new_box_autoadd_refund_request() {
    return _cst_new_box_autoadd_refund_request();
  }

  late final _cst_new_box_autoadd_refund_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_refund_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_refund_request');
  late final _cst_new_box_autoadd_refund_request =
      _cst_new_box_autoadd_refund_requestPtr.asFunction<ffi.Pointer<wire_cst_refund_request> Function()>();

  ffi.Pointer<wire_cst_report_issue_request> cst_new_box_autoadd_report_issue_request() {
    return _cst_new_box_autoadd_report_issue_request();
  }

  late final _cst_new_box_autoadd_report_issue_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_report_issue_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_report_issue_request');
  late final _cst_new_box_autoadd_report_issue_request = _cst_new_box_autoadd_report_issue_requestPtr
      .asFunction<ffi.Pointer<wire_cst_report_issue_request> Function()>();

  ffi.Pointer<wire_cst_report_payment_failure_details> cst_new_box_autoadd_report_payment_failure_details() {
    return _cst_new_box_autoadd_report_payment_failure_details();
  }

  late final _cst_new_box_autoadd_report_payment_failure_detailsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_report_payment_failure_details> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_report_payment_failure_details');
  late final _cst_new_box_autoadd_report_payment_failure_details =
      _cst_new_box_autoadd_report_payment_failure_detailsPtr
          .asFunction<ffi.Pointer<wire_cst_report_payment_failure_details> Function()>();

  ffi.Pointer<wire_cst_reverse_swap_fees_request> cst_new_box_autoadd_reverse_swap_fees_request() {
    return _cst_new_box_autoadd_reverse_swap_fees_request();
  }

  late final _cst_new_box_autoadd_reverse_swap_fees_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_reverse_swap_fees_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_reverse_swap_fees_request');
  late final _cst_new_box_autoadd_reverse_swap_fees_request =
      _cst_new_box_autoadd_reverse_swap_fees_requestPtr
          .asFunction<ffi.Pointer<wire_cst_reverse_swap_fees_request> Function()>();

  ffi.Pointer<wire_cst_reverse_swap_info> cst_new_box_autoadd_reverse_swap_info() {
    return _cst_new_box_autoadd_reverse_swap_info();
  }

  late final _cst_new_box_autoadd_reverse_swap_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_reverse_swap_info> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_reverse_swap_info');
  late final _cst_new_box_autoadd_reverse_swap_info = _cst_new_box_autoadd_reverse_swap_infoPtr
      .asFunction<ffi.Pointer<wire_cst_reverse_swap_info> Function()>();

  ffi.Pointer<wire_cst_send_onchain_request> cst_new_box_autoadd_send_onchain_request() {
    return _cst_new_box_autoadd_send_onchain_request();
  }

  late final _cst_new_box_autoadd_send_onchain_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_send_onchain_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_send_onchain_request');
  late final _cst_new_box_autoadd_send_onchain_request = _cst_new_box_autoadd_send_onchain_requestPtr
      .asFunction<ffi.Pointer<wire_cst_send_onchain_request> Function()>();

  ffi.Pointer<wire_cst_send_payment_request> cst_new_box_autoadd_send_payment_request() {
    return _cst_new_box_autoadd_send_payment_request();
  }

  late final _cst_new_box_autoadd_send_payment_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_send_payment_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_send_payment_request');
  late final _cst_new_box_autoadd_send_payment_request = _cst_new_box_autoadd_send_payment_requestPtr
      .asFunction<ffi.Pointer<wire_cst_send_payment_request> Function()>();

  ffi.Pointer<wire_cst_send_spontaneous_payment_request>
      cst_new_box_autoadd_send_spontaneous_payment_request() {
    return _cst_new_box_autoadd_send_spontaneous_payment_request();
  }

  late final _cst_new_box_autoadd_send_spontaneous_payment_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_send_spontaneous_payment_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_send_spontaneous_payment_request');
  late final _cst_new_box_autoadd_send_spontaneous_payment_request =
      _cst_new_box_autoadd_send_spontaneous_payment_requestPtr
          .asFunction<ffi.Pointer<wire_cst_send_spontaneous_payment_request> Function()>();

  ffi.Pointer<wire_cst_sign_message_request> cst_new_box_autoadd_sign_message_request() {
    return _cst_new_box_autoadd_sign_message_request();
  }

  late final _cst_new_box_autoadd_sign_message_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_sign_message_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_sign_message_request');
  late final _cst_new_box_autoadd_sign_message_request = _cst_new_box_autoadd_sign_message_requestPtr
      .asFunction<ffi.Pointer<wire_cst_sign_message_request> Function()>();

  ffi.Pointer<wire_cst_static_backup_request> cst_new_box_autoadd_static_backup_request() {
    return _cst_new_box_autoadd_static_backup_request();
  }

  late final _cst_new_box_autoadd_static_backup_requestPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_static_backup_request> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_static_backup_request');
  late final _cst_new_box_autoadd_static_backup_request = _cst_new_box_autoadd_static_backup_requestPtr
      .asFunction<ffi.Pointer<wire_cst_static_backup_request> Function()>();

  ffi.Pointer<wire_cst_success_action_processed> cst_new_box_autoadd_success_action_processed() {
    return _cst_new_box_autoadd_success_action_processed();
  }

  late final _cst_new_box_autoadd_success_action_processedPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_success_action_processed> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_success_action_processed');
  late final _cst_new_box_autoadd_success_action_processed = _cst_new_box_autoadd_success_action_processedPtr
      .asFunction<ffi.Pointer<wire_cst_success_action_processed> Function()>();

  ffi.Pointer<wire_cst_swap_info> cst_new_box_autoadd_swap_info() {
    return _cst_new_box_autoadd_swap_info();
  }

  late final _cst_new_box_autoadd_swap_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_swap_info> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_swap_info');
  late final _cst_new_box_autoadd_swap_info =
      _cst_new_box_autoadd_swap_infoPtr.asFunction<ffi.Pointer<wire_cst_swap_info> Function()>();

  ffi.Pointer<wire_cst_symbol> cst_new_box_autoadd_symbol() {
    return _cst_new_box_autoadd_symbol();
  }

  late final _cst_new_box_autoadd_symbolPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_symbol> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_symbol');
  late final _cst_new_box_autoadd_symbol =
      _cst_new_box_autoadd_symbolPtr.asFunction<ffi.Pointer<wire_cst_symbol> Function()>();

  ffi.Pointer<ffi.Uint32> cst_new_box_autoadd_u_32(
    int value,
  ) {
    return _cst_new_box_autoadd_u_32(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_32Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_u_32');
  late final _cst_new_box_autoadd_u_32 =
      _cst_new_box_autoadd_u_32Ptr.asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<ffi.Uint64> cst_new_box_autoadd_u_64(
    int value,
  ) {
    return _cst_new_box_autoadd_u_64(
      value,
    );
  }

  late final _cst_new_box_autoadd_u_64Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_u_64');
  late final _cst_new_box_autoadd_u_64 =
      _cst_new_box_autoadd_u_64Ptr.asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<wire_cst_url_success_action_data> cst_new_box_autoadd_url_success_action_data() {
    return _cst_new_box_autoadd_url_success_action_data();
  }

  late final _cst_new_box_autoadd_url_success_action_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_url_success_action_data> Function()>>(
          'frbgen_breez_sdk_cst_new_box_autoadd_url_success_action_data');
  late final _cst_new_box_autoadd_url_success_action_data = _cst_new_box_autoadd_url_success_action_dataPtr
      .asFunction<ffi.Pointer<wire_cst_url_success_action_data> Function()>();

  ffi.Pointer<wire_cst_list_String> cst_new_list_String(
    int len,
  ) {
    return _cst_new_list_String(
      len,
    );
  }

  late final _cst_new_list_StringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_String> Function(ffi.Int32)>>(
          'frbgen_breez_sdk_cst_new_list_String');
  late final _cst_new_list_String =
      _cst_new_list_StringPtr.asFunction<ffi.Pointer<wire_cst_list_String> Function(int)>();

  ffi.Pointer<wire_cst_list_fiat_currency> cst_new_list_fiat_currency(
    int len,
  ) {
    return _cst_new_list_fiat_currency(
      len,
    );
  }

  late final _cst_new_list_fiat_currencyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_fiat_currency> Function(ffi.Int32)>>(
          'frbgen_breez_sdk_cst_new_list_fiat_currency');
  late final _cst_new_list_fiat_currency =
      _cst_new_list_fiat_currencyPtr.asFunction<ffi.Pointer<wire_cst_list_fiat_currency> Function(int)>();

  ffi.Pointer<wire_cst_list_locale_overrides> cst_new_list_locale_overrides(
    int len,
  ) {
    return _cst_new_list_locale_overrides(
      len,
    );
  }

  late final _cst_new_list_locale_overridesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_locale_overrides> Function(ffi.Int32)>>(
          'frbgen_breez_sdk_cst_new_list_locale_overrides');
  late final _cst_new_list_locale_overrides = _cst_new_list_locale_overridesPtr
      .asFunction<ffi.Pointer<wire_cst_list_locale_overrides> Function(int)>();

  ffi.Pointer<wire_cst_list_localized_name> cst_new_list_localized_name(
    int len,
  ) {
    return _cst_new_list_localized_name(
      len,
    );
  }

  late final _cst_new_list_localized_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_localized_name> Function(ffi.Int32)>>(
          'frbgen_breez_sdk_cst_new_list_localized_name');
  late final _cst_new_list_localized_name =
      _cst_new_list_localized_namePtr.asFunction<ffi.Pointer<wire_cst_list_localized_name> Function(int)>();

  ffi.Pointer<wire_cst_list_lsp_information> cst_new_list_lsp_information(
    int len,
  ) {
    return _cst_new_list_lsp_information(
      len,
    );
  }

  late final _cst_new_list_lsp_informationPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_lsp_information> Function(ffi.Int32)>>(
          'frbgen_breez_sdk_cst_new_list_lsp_information');
  late final _cst_new_list_lsp_information =
      _cst_new_list_lsp_informationPtr.asFunction<ffi.Pointer<wire_cst_list_lsp_information> Function(int)>();

  ffi.Pointer<wire_cst_list_metadata_filter> cst_new_list_metadata_filter(
    int len,
  ) {
    return _cst_new_list_metadata_filter(
      len,
    );
  }

  late final _cst_new_list_metadata_filterPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_metadata_filter> Function(ffi.Int32)>>(
          'frbgen_breez_sdk_cst_new_list_metadata_filter');
  late final _cst_new_list_metadata_filter =
      _cst_new_list_metadata_filterPtr.asFunction<ffi.Pointer<wire_cst_list_metadata_filter> Function(int)>();

  ffi.Pointer<wire_cst_list_opening_fee_params> cst_new_list_opening_fee_params(
    int len,
  ) {
    return _cst_new_list_opening_fee_params(
      len,
    );
  }

  late final _cst_new_list_opening_fee_paramsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_opening_fee_params> Function(ffi.Int32)>>(
          'frbgen_breez_sdk_cst_new_list_opening_fee_params');
  late final _cst_new_list_opening_fee_params = _cst_new_list_opening_fee_paramsPtr
      .asFunction<ffi.Pointer<wire_cst_list_opening_fee_params> Function(int)>();

  ffi.Pointer<wire_cst_list_payment> cst_new_list_payment(
    int len,
  ) {
    return _cst_new_list_payment(
      len,
    );
  }

  late final _cst_new_list_paymentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_payment> Function(ffi.Int32)>>(
          'frbgen_breez_sdk_cst_new_list_payment');
  late final _cst_new_list_payment =
      _cst_new_list_paymentPtr.asFunction<ffi.Pointer<wire_cst_list_payment> Function(int)>();

  ffi.Pointer<wire_cst_list_payment_type_filter> cst_new_list_payment_type_filter(
    int len,
  ) {
    return _cst_new_list_payment_type_filter(
      len,
    );
  }

  late final _cst_new_list_payment_type_filterPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_payment_type_filter> Function(ffi.Int32)>>(
          'frbgen_breez_sdk_cst_new_list_payment_type_filter');
  late final _cst_new_list_payment_type_filter = _cst_new_list_payment_type_filterPtr
      .asFunction<ffi.Pointer<wire_cst_list_payment_type_filter> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_strictPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(ffi.Int32)>>(
          'frbgen_breez_sdk_cst_new_list_prim_u_8_strict');
  late final _cst_new_list_prim_u_8_strict =
      _cst_new_list_prim_u_8_strictPtr.asFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)>();

  ffi.Pointer<wire_cst_list_rate> cst_new_list_rate(
    int len,
  ) {
    return _cst_new_list_rate(
      len,
    );
  }

  late final _cst_new_list_ratePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_rate> Function(ffi.Int32)>>(
          'frbgen_breez_sdk_cst_new_list_rate');
  late final _cst_new_list_rate =
      _cst_new_list_ratePtr.asFunction<ffi.Pointer<wire_cst_list_rate> Function(int)>();

  ffi.Pointer<wire_cst_list_reverse_swap_info> cst_new_list_reverse_swap_info(
    int len,
  ) {
    return _cst_new_list_reverse_swap_info(
      len,
    );
  }

  late final _cst_new_list_reverse_swap_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_reverse_swap_info> Function(ffi.Int32)>>(
          'frbgen_breez_sdk_cst_new_list_reverse_swap_info');
  late final _cst_new_list_reverse_swap_info = _cst_new_list_reverse_swap_infoPtr
      .asFunction<ffi.Pointer<wire_cst_list_reverse_swap_info> Function(int)>();

  ffi.Pointer<wire_cst_list_route_hint> cst_new_list_route_hint(
    int len,
  ) {
    return _cst_new_list_route_hint(
      len,
    );
  }

  late final _cst_new_list_route_hintPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_route_hint> Function(ffi.Int32)>>(
          'frbgen_breez_sdk_cst_new_list_route_hint');
  late final _cst_new_list_route_hint =
      _cst_new_list_route_hintPtr.asFunction<ffi.Pointer<wire_cst_list_route_hint> Function(int)>();

  ffi.Pointer<wire_cst_list_route_hint_hop> cst_new_list_route_hint_hop(
    int len,
  ) {
    return _cst_new_list_route_hint_hop(
      len,
    );
  }

  late final _cst_new_list_route_hint_hopPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_route_hint_hop> Function(ffi.Int32)>>(
          'frbgen_breez_sdk_cst_new_list_route_hint_hop');
  late final _cst_new_list_route_hint_hop =
      _cst_new_list_route_hint_hopPtr.asFunction<ffi.Pointer<wire_cst_list_route_hint_hop> Function(int)>();

  ffi.Pointer<wire_cst_list_swap_info> cst_new_list_swap_info(
    int len,
  ) {
    return _cst_new_list_swap_info(
      len,
    );
  }

  late final _cst_new_list_swap_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_swap_info> Function(ffi.Int32)>>(
          'frbgen_breez_sdk_cst_new_list_swap_info');
  late final _cst_new_list_swap_info =
      _cst_new_list_swap_infoPtr.asFunction<ffi.Pointer<wire_cst_list_swap_info> Function(int)>();

  ffi.Pointer<wire_cst_list_tlv_entry> cst_new_list_tlv_entry(
    int len,
  ) {
    return _cst_new_list_tlv_entry(
      len,
    );
  }

  late final _cst_new_list_tlv_entryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_tlv_entry> Function(ffi.Int32)>>(
          'frbgen_breez_sdk_cst_new_list_tlv_entry');
  late final _cst_new_list_tlv_entry =
      _cst_new_list_tlv_entryPtr.asFunction<ffi.Pointer<wire_cst_list_tlv_entry> Function(int)>();

  ffi.Pointer<wire_cst_list_unspent_transaction_output> cst_new_list_unspent_transaction_output(
    int len,
  ) {
    return _cst_new_list_unspent_transaction_output(
      len,
    );
  }

  late final _cst_new_list_unspent_transaction_outputPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_list_unspent_transaction_output> Function(ffi.Int32)>>(
          'frbgen_breez_sdk_cst_new_list_unspent_transaction_output');
  late final _cst_new_list_unspent_transaction_output = _cst_new_list_unspent_transaction_outputPtr
      .asFunction<ffi.Pointer<wire_cst_list_unspent_transaction_output> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

typedef DartPostCObjectFnType
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;

final class wire_cst_binding_event_listener extends ffi.Opaque {}

final class wire_cst_BreezEvent_NewBlock extends ffi.Struct {
  @ffi.Uint32()
  external int block;
}

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_aes_success_action_data_decrypted extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> description;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> plaintext;
}

final class wire_cst_AesSuccessActionDataResult_Decrypted extends ffi.Struct {
  external ffi.Pointer<wire_cst_aes_success_action_data_decrypted> data;
}

final class wire_cst_AesSuccessActionDataResult_ErrorStatus extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> reason;
}

final class AesSuccessActionDataResultKind extends ffi.Union {
  external wire_cst_AesSuccessActionDataResult_Decrypted Decrypted;

  external wire_cst_AesSuccessActionDataResult_ErrorStatus ErrorStatus;
}

final class wire_cst_aes_success_action_data_result extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external AesSuccessActionDataResultKind kind;
}

final class wire_cst_SuccessActionProcessed_Aes extends ffi.Struct {
  external ffi.Pointer<wire_cst_aes_success_action_data_result> result;
}

final class wire_cst_message_success_action_data extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> message;
}

final class wire_cst_SuccessActionProcessed_Message extends ffi.Struct {
  external ffi.Pointer<wire_cst_message_success_action_data> data;
}

final class wire_cst_url_success_action_data extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> description;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> url;
}

final class wire_cst_SuccessActionProcessed_Url extends ffi.Struct {
  external ffi.Pointer<wire_cst_url_success_action_data> data;
}

final class SuccessActionProcessedKind extends ffi.Union {
  external wire_cst_SuccessActionProcessed_Aes Aes;

  external wire_cst_SuccessActionProcessed_Message Message;

  external wire_cst_SuccessActionProcessed_Url Url;
}

final class wire_cst_success_action_processed extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external SuccessActionProcessedKind kind;
}

final class wire_cst_list_String extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_cst_list_prim_u_8_strict>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_opening_fee_params extends ffi.Struct {
  @ffi.Uint64()
  external int min_msat;

  @ffi.Uint32()
  external int proportional;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> valid_until;

  @ffi.Uint32()
  external int max_idle_time;

  @ffi.Uint32()
  external int max_client_to_self_delay;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> promise;
}

final class wire_cst_swap_info extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> bitcoin_address;

  @ffi.Int64()
  external int created_at;

  @ffi.Int64()
  external int lock_height;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> payment_hash;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> preimage;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> private_key;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> public_key;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> swapper_public_key;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> script;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> bolt11;

  @ffi.Uint64()
  external int paid_msat;

  @ffi.Uint64()
  external int total_incoming_txs;

  @ffi.Uint64()
  external int confirmed_sats;

  @ffi.Uint64()
  external int unconfirmed_sats;

  @ffi.Int32()
  external int status;

  external ffi.Pointer<wire_cst_list_String> refund_tx_ids;

  external ffi.Pointer<wire_cst_list_String> unconfirmed_tx_ids;

  external ffi.Pointer<wire_cst_list_String> confirmed_tx_ids;

  @ffi.Int64()
  external int min_allowed_deposit;

  @ffi.Int64()
  external int max_allowed_deposit;

  @ffi.Int64()
  external int max_swapper_payable;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> last_redeem_error;

  external ffi.Pointer<wire_cst_opening_fee_params> channel_opening_fees;

  external ffi.Pointer<ffi.Uint32> confirmed_at;
}

final class wire_cst_reverse_swap_info extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> id;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> claim_pubkey;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> lockup_txid;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> claim_txid;

  @ffi.Uint64()
  external int onchain_amount_sat;

  @ffi.Int32()
  external int status;
}

final class wire_cst_ln_payment_details extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> payment_hash;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> label;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> destination_pubkey;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> payment_preimage;

  @ffi.Bool()
  external bool keysend;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> bolt11;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> open_channel_bolt11;

  external ffi.Pointer<wire_cst_success_action_processed> lnurl_success_action;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> lnurl_pay_domain;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> lnurl_pay_comment;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> ln_address;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> lnurl_metadata;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> lnurl_withdraw_endpoint;

  external ffi.Pointer<wire_cst_swap_info> swap_info;

  external ffi.Pointer<wire_cst_reverse_swap_info> reverse_swap_info;

  external ffi.Pointer<ffi.Uint32> pending_expiration_block;
}

final class wire_cst_PaymentDetails_Ln extends ffi.Struct {
  external ffi.Pointer<wire_cst_ln_payment_details> data;
}

final class wire_cst_closed_channel_payment_details extends ffi.Struct {
  @ffi.Int32()
  external int state;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> funding_txid;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> short_channel_id;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> closing_txid;
}

final class wire_cst_PaymentDetails_ClosedChannel extends ffi.Struct {
  external ffi.Pointer<wire_cst_closed_channel_payment_details> data;
}

final class PaymentDetailsKind extends ffi.Union {
  external wire_cst_PaymentDetails_Ln Ln;

  external wire_cst_PaymentDetails_ClosedChannel ClosedChannel;
}

final class wire_cst_payment_details extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external PaymentDetailsKind kind;
}

final class wire_cst_payment extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> id;

  @ffi.Int32()
  external int payment_type;

  @ffi.Int64()
  external int payment_time;

  @ffi.Uint64()
  external int amount_msat;

  @ffi.Uint64()
  external int fee_msat;

  @ffi.Int32()
  external int status;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> description;

  external wire_cst_payment_details details;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> metadata;
}

final class wire_cst_invoice_paid_details extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> payment_hash;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> bolt11;

  external ffi.Pointer<wire_cst_payment> payment;
}

final class wire_cst_BreezEvent_InvoicePaid extends ffi.Struct {
  external ffi.Pointer<wire_cst_invoice_paid_details> details;
}

final class wire_cst_BreezEvent_PaymentSucceed extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment> details;
}

final class wire_cst_route_hint_hop extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> src_node_id;

  @ffi.Uint64()
  external int short_channel_id;

  @ffi.Uint32()
  external int fees_base_msat;

  @ffi.Uint32()
  external int fees_proportional_millionths;

  @ffi.Uint64()
  external int cltv_expiry_delta;

  external ffi.Pointer<ffi.Uint64> htlc_minimum_msat;

  external ffi.Pointer<ffi.Uint64> htlc_maximum_msat;
}

final class wire_cst_list_route_hint_hop extends ffi.Struct {
  external ffi.Pointer<wire_cst_route_hint_hop> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_route_hint extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_route_hint_hop> hops;
}

final class wire_cst_list_route_hint extends ffi.Struct {
  external ffi.Pointer<wire_cst_route_hint> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_ln_invoice extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> bolt11;

  @ffi.Int32()
  external int network;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> payee_pubkey;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> payment_hash;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> description;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> description_hash;

  external ffi.Pointer<ffi.Uint64> amount_msat;

  @ffi.Uint64()
  external int timestamp;

  @ffi.Uint64()
  external int expiry;

  external ffi.Pointer<wire_cst_list_route_hint> routing_hints;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> payment_secret;

  @ffi.Uint64()
  external int min_final_cltv_expiry_delta;
}

final class wire_cst_payment_failed_data extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> node_id;

  external ffi.Pointer<wire_cst_ln_invoice> invoice;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> label;
}

final class wire_cst_BreezEvent_PaymentFailed extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment_failed_data> details;
}

final class wire_cst_backup_failed_data extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> error;
}

final class wire_cst_BreezEvent_BackupFailed extends ffi.Struct {
  external ffi.Pointer<wire_cst_backup_failed_data> details;
}

final class wire_cst_BreezEvent_SwapUpdated extends ffi.Struct {
  external ffi.Pointer<wire_cst_swap_info> details;
}

final class BreezEventKind extends ffi.Union {
  external wire_cst_BreezEvent_NewBlock NewBlock;

  external wire_cst_BreezEvent_InvoicePaid InvoicePaid;

  external wire_cst_BreezEvent_PaymentSucceed PaymentSucceed;

  external wire_cst_BreezEvent_PaymentFailed PaymentFailed;

  external wire_cst_BreezEvent_BackupFailed BackupFailed;

  external wire_cst_BreezEvent_SwapUpdated SwapUpdated;
}

final class wire_cst_breez_event extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external BreezEventKind kind;
}

final class wire_cst_buy_bitcoin_request extends ffi.Struct {
  @ffi.Int32()
  external int provider;

  external ffi.Pointer<wire_cst_opening_fee_params> opening_fee_params;
}

final class wire_cst_check_message_request extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> message;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> pubkey;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> signature;
}

final class wire_cst_configure_node_request extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> close_to_address;
}

final class wire_cst_greenlight_credentials extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> device_key;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> device_cert;
}

final class wire_cst_greenlight_node_config extends ffi.Struct {
  external ffi.Pointer<wire_cst_greenlight_credentials> partner_credentials;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> invite_code;
}

final class wire_cst_NodeConfig_Greenlight extends ffi.Struct {
  external ffi.Pointer<wire_cst_greenlight_node_config> config;
}

final class NodeConfigKind extends ffi.Union {
  external wire_cst_NodeConfig_Greenlight Greenlight;
}

final class wire_cst_node_config extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external NodeConfigKind kind;
}

final class wire_cst_config extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> breezserver;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> chainnotifier_url;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> mempoolspace_url;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> working_dir;

  @ffi.Int32()
  external int network;

  @ffi.Uint32()
  external int payment_timeout_sec;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> default_lsp_id;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> api_key;

  @ffi.Double()
  external double maxfee_percent;

  @ffi.Uint64()
  external int exemptfee_msat;

  external wire_cst_node_config node_config;
}

final class wire_cst_connect_request extends ffi.Struct {
  external wire_cst_config config;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> seed;

  external ffi.Pointer<ffi.Bool> restore_only;
}

final class wire_cst_reverse_swap_fees_request extends ffi.Struct {
  external ffi.Pointer<ffi.Uint64> send_amount_sat;

  external ffi.Pointer<ffi.Uint32> claim_tx_feerate;
}

final class wire_cst_list_payment_type_filter extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_metadata_filter extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> json_path;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> json_value;
}

final class wire_cst_list_metadata_filter extends ffi.Struct {
  external ffi.Pointer<wire_cst_metadata_filter> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_payments_request extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_payment_type_filter> filters;

  external ffi.Pointer<wire_cst_list_metadata_filter> metadata_filters;

  external ffi.Pointer<ffi.Int64> from_timestamp;

  external ffi.Pointer<ffi.Int64> to_timestamp;

  external ffi.Pointer<ffi.Bool> include_failures;

  external ffi.Pointer<ffi.Uint32> offset;

  external ffi.Pointer<ffi.Uint32> limit;
}

final class wire_cst_ln_url_auth_request_data extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> k1;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> action;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> domain;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> url;
}

final class wire_cst_ln_url_pay_request_data extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> callback;

  @ffi.Uint64()
  external int min_sendable;

  @ffi.Uint64()
  external int max_sendable;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> metadata_str;

  @ffi.Uint16()
  external int comment_allowed;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> domain;

  @ffi.Bool()
  external bool allows_nostr;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> nostr_pubkey;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> ln_address;
}

final class wire_cst_ln_url_pay_request extends ffi.Struct {
  external wire_cst_ln_url_pay_request_data data;

  @ffi.Uint64()
  external int amount_msat;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> comment;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> payment_label;
}

final class wire_cst_ln_url_withdraw_request_data extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> callback;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> k1;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> default_description;

  @ffi.Uint64()
  external int min_withdrawable;

  @ffi.Uint64()
  external int max_withdrawable;
}

final class wire_cst_ln_url_withdraw_request extends ffi.Struct {
  external wire_cst_ln_url_withdraw_request_data data;

  @ffi.Uint64()
  external int amount_msat;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> description;
}

final class wire_cst_open_channel_fee_request extends ffi.Struct {
  external ffi.Pointer<ffi.Uint64> amount_msat;

  external ffi.Pointer<ffi.Uint32> expiry;
}

final class wire_cst_prepare_onchain_payment_response extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> fees_hash;

  @ffi.Double()
  external double fees_percentage;

  @ffi.Uint64()
  external int fees_lockup;

  @ffi.Uint64()
  external int fees_claim;

  @ffi.Uint64()
  external int sender_amount_sat;

  @ffi.Uint64()
  external int recipient_amount_sat;

  @ffi.Uint64()
  external int total_fees;
}

final class wire_cst_pay_onchain_request extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> recipient_address;

  external wire_cst_prepare_onchain_payment_response prepare_res;
}

final class wire_cst_prepare_onchain_payment_request extends ffi.Struct {
  @ffi.Uint64()
  external int amount_sat;

  @ffi.Int32()
  external int amount_type;

  @ffi.Uint32()
  external int claim_tx_feerate;
}

final class wire_cst_prepare_redeem_onchain_funds_request extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> to_address;

  @ffi.Uint32()
  external int sat_per_vbyte;
}

final class wire_cst_prepare_refund_request extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> swap_address;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> to_address;

  @ffi.Uint32()
  external int sat_per_vbyte;
}

final class wire_cst_receive_onchain_request extends ffi.Struct {
  external ffi.Pointer<wire_cst_opening_fee_params> opening_fee_params;
}

final class wire_cst_receive_payment_request extends ffi.Struct {
  @ffi.Uint64()
  external int amount_msat;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> description;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> preimage;

  external ffi.Pointer<wire_cst_opening_fee_params> opening_fee_params;

  external ffi.Pointer<ffi.Bool> use_description_hash;

  external ffi.Pointer<ffi.Uint32> expiry;

  external ffi.Pointer<ffi.Uint32> cltv;
}

final class wire_cst_redeem_onchain_funds_request extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> to_address;

  @ffi.Uint32()
  external int sat_per_vbyte;
}

final class wire_cst_refund_request extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> swap_address;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> to_address;

  @ffi.Uint32()
  external int sat_per_vbyte;
}

final class wire_cst_report_payment_failure_details extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> payment_hash;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> comment;
}

final class wire_cst_ReportIssueRequest_PaymentFailure extends ffi.Struct {
  external ffi.Pointer<wire_cst_report_payment_failure_details> data;
}

final class ReportIssueRequestKind extends ffi.Union {
  external wire_cst_ReportIssueRequest_PaymentFailure PaymentFailure;
}

final class wire_cst_report_issue_request extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ReportIssueRequestKind kind;
}

final class wire_cst_send_onchain_request extends ffi.Struct {
  @ffi.Uint64()
  external int amount_sat;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> onchain_recipient_address;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> pair_hash;

  @ffi.Uint32()
  external int sat_per_vbyte;
}

final class wire_cst_send_payment_request extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> bolt11;

  external ffi.Pointer<ffi.Uint64> amount_msat;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> label;
}

final class wire_cst_tlv_entry extends ffi.Struct {
  @ffi.Uint64()
  external int field_number;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> value;
}

final class wire_cst_list_tlv_entry extends ffi.Struct {
  external ffi.Pointer<wire_cst_tlv_entry> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_send_spontaneous_payment_request extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> node_id;

  @ffi.Uint64()
  external int amount_msat;

  external ffi.Pointer<wire_cst_list_tlv_entry> extra_tlvs;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> label;
}

final class wire_cst_sign_message_request extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> message;
}

final class wire_cst_static_backup_request extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> working_dir;
}

final class wire_cst_bitcoin_address_data extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> address;

  @ffi.Int32()
  external int network;

  external ffi.Pointer<ffi.Uint64> amount_sat;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> label;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> message;
}

final class wire_cst_ln_url_error_data extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> reason;
}

final class wire_cst_ln_url_pay_error_data extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> payment_hash;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> reason;
}

final class wire_cst_ln_url_pay_success_data extends ffi.Struct {
  external wire_cst_payment payment;

  external ffi.Pointer<wire_cst_success_action_processed> success_action;
}

final class wire_cst_ln_url_withdraw_success_data extends ffi.Struct {
  external wire_cst_ln_invoice invoice;
}

final class wire_cst_list_opening_fee_params extends ffi.Struct {
  external ffi.Pointer<wire_cst_opening_fee_params> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_opening_fee_params_menu extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_opening_fee_params> values;
}

final class wire_cst_lsp_information extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> id;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> name;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> widget_url;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> pubkey;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> host;

  @ffi.Int64()
  external int base_fee_msat;

  @ffi.Double()
  external double fee_rate;

  @ffi.Uint32()
  external int time_lock_delta;

  @ffi.Int64()
  external int min_htlc_msat;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> lsp_pubkey;

  external wire_cst_opening_fee_params_menu opening_fee_params_list;
}

final class wire_cst_NodeCredentials_Greenlight extends ffi.Struct {
  external ffi.Pointer<wire_cst_greenlight_credentials> credentials;
}

final class NodeCredentialsKind extends ffi.Union {
  external wire_cst_NodeCredentials_Greenlight Greenlight;
}

final class wire_cst_node_credentials extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external NodeCredentialsKind kind;
}

final class wire_cst_symbol extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> grapheme;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> template_;

  external ffi.Pointer<ffi.Bool> rtl;

  external ffi.Pointer<ffi.Uint32> position;
}

final class wire_cst_localized_name extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> locale;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> name;
}

final class wire_cst_list_localized_name extends ffi.Struct {
  external ffi.Pointer<wire_cst_localized_name> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_locale_overrides extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> locale;

  external ffi.Pointer<ffi.Uint32> spacing;

  external wire_cst_symbol symbol;
}

final class wire_cst_list_locale_overrides extends ffi.Struct {
  external ffi.Pointer<wire_cst_locale_overrides> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_currency_info extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> name;

  @ffi.Uint32()
  external int fraction_size;

  external ffi.Pointer<ffi.Uint32> spacing;

  external ffi.Pointer<wire_cst_symbol> symbol;

  external ffi.Pointer<wire_cst_symbol> uniq_symbol;

  external ffi.Pointer<wire_cst_list_localized_name> localized_name;

  external ffi.Pointer<wire_cst_list_locale_overrides> locale_overrides;
}

final class wire_cst_fiat_currency extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> id;

  external wire_cst_currency_info info;
}

final class wire_cst_list_fiat_currency extends ffi.Struct {
  external ffi.Pointer<wire_cst_fiat_currency> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_lsp_information extends ffi.Struct {
  external ffi.Pointer<wire_cst_lsp_information> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_payment extends ffi.Struct {
  external ffi.Pointer<wire_cst_payment> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_rate extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> coin;

  @ffi.Double()
  external double value;
}

final class wire_cst_list_rate extends ffi.Struct {
  external ffi.Pointer<wire_cst_rate> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_reverse_swap_info extends ffi.Struct {
  external ffi.Pointer<wire_cst_reverse_swap_info> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_list_swap_info extends ffi.Struct {
  external ffi.Pointer<wire_cst_swap_info> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_unspent_transaction_output extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> txid;

  @ffi.Uint32()
  external int outnum;

  @ffi.Uint64()
  external int amount_millisatoshi;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> address;

  @ffi.Bool()
  external bool reserved;
}

final class wire_cst_list_unspent_transaction_output extends ffi.Struct {
  external ffi.Pointer<wire_cst_unspent_transaction_output> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_backup_status extends ffi.Struct {
  @ffi.Bool()
  external bool backed_up;

  external ffi.Pointer<ffi.Uint64> last_backup_time;
}

final class wire_cst_buy_bitcoin_response extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> url;

  external ffi.Pointer<wire_cst_opening_fee_params> opening_fee_params;
}

final class wire_cst_check_message_response extends ffi.Struct {
  @ffi.Bool()
  external bool is_valid;
}

final class wire_cst_InputType_BitcoinAddress extends ffi.Struct {
  external ffi.Pointer<wire_cst_bitcoin_address_data> address;
}

final class wire_cst_InputType_Bolt11 extends ffi.Struct {
  external ffi.Pointer<wire_cst_ln_invoice> invoice;
}

final class wire_cst_InputType_NodeId extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> node_id;
}

final class wire_cst_InputType_Url extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> url;
}

final class wire_cst_InputType_LnUrlPay extends ffi.Struct {
  external ffi.Pointer<wire_cst_ln_url_pay_request_data> data;
}

final class wire_cst_InputType_LnUrlWithdraw extends ffi.Struct {
  external ffi.Pointer<wire_cst_ln_url_withdraw_request_data> data;
}

final class wire_cst_InputType_LnUrlAuth extends ffi.Struct {
  external ffi.Pointer<wire_cst_ln_url_auth_request_data> data;
}

final class wire_cst_InputType_LnUrlError extends ffi.Struct {
  external ffi.Pointer<wire_cst_ln_url_error_data> data;
}

final class InputTypeKind extends ffi.Union {
  external wire_cst_InputType_BitcoinAddress BitcoinAddress;

  external wire_cst_InputType_Bolt11 Bolt11;

  external wire_cst_InputType_NodeId NodeId;

  external wire_cst_InputType_Url Url;

  external wire_cst_InputType_LnUrlPay LnUrlPay;

  external wire_cst_InputType_LnUrlWithdraw LnUrlWithdraw;

  external wire_cst_InputType_LnUrlAuth LnUrlAuth;

  external wire_cst_InputType_LnUrlError LnUrlError;
}

final class wire_cst_input_type extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external InputTypeKind kind;
}

final class wire_cst_LnUrlCallbackStatus_ErrorStatus extends ffi.Struct {
  external ffi.Pointer<wire_cst_ln_url_error_data> data;
}

final class LnUrlCallbackStatusKind extends ffi.Union {
  external wire_cst_LnUrlCallbackStatus_ErrorStatus ErrorStatus;
}

final class wire_cst_ln_url_callback_status extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external LnUrlCallbackStatusKind kind;
}

final class wire_cst_LnUrlPayResult_EndpointSuccess extends ffi.Struct {
  external ffi.Pointer<wire_cst_ln_url_pay_success_data> data;
}

final class wire_cst_LnUrlPayResult_EndpointError extends ffi.Struct {
  external ffi.Pointer<wire_cst_ln_url_error_data> data;
}

final class wire_cst_LnUrlPayResult_PayError extends ffi.Struct {
  external ffi.Pointer<wire_cst_ln_url_pay_error_data> data;
}

final class LnUrlPayResultKind extends ffi.Union {
  external wire_cst_LnUrlPayResult_EndpointSuccess EndpointSuccess;

  external wire_cst_LnUrlPayResult_EndpointError EndpointError;

  external wire_cst_LnUrlPayResult_PayError PayError;
}

final class wire_cst_ln_url_pay_result extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external LnUrlPayResultKind kind;
}

final class wire_cst_LnUrlWithdrawResult_Ok extends ffi.Struct {
  external ffi.Pointer<wire_cst_ln_url_withdraw_success_data> data;
}

final class wire_cst_LnUrlWithdrawResult_ErrorStatus extends ffi.Struct {
  external ffi.Pointer<wire_cst_ln_url_error_data> data;
}

final class LnUrlWithdrawResultKind extends ffi.Union {
  external wire_cst_LnUrlWithdrawResult_Ok Ok;

  external wire_cst_LnUrlWithdrawResult_ErrorStatus ErrorStatus;
}

final class wire_cst_ln_url_withdraw_result extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external LnUrlWithdrawResultKind kind;
}

final class wire_cst_log_entry extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> line;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> level;
}

final class wire_cst_max_reverse_swap_amount_response extends ffi.Struct {
  @ffi.Uint64()
  external int total_sat;
}

final class wire_cst_node_state extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> id;

  @ffi.Uint32()
  external int block_height;

  @ffi.Uint64()
  external int channels_balance_msat;

  @ffi.Uint64()
  external int onchain_balance_msat;

  @ffi.Uint64()
  external int pending_onchain_balance_msat;

  external ffi.Pointer<wire_cst_list_unspent_transaction_output> utxos;

  @ffi.Uint64()
  external int max_payable_msat;

  @ffi.Uint64()
  external int max_receivable_msat;

  @ffi.Uint64()
  external int max_single_payment_amount_msat;

  @ffi.Uint64()
  external int max_chan_reserve_msats;

  external ffi.Pointer<wire_cst_list_String> connected_peers;

  @ffi.Uint64()
  external int inbound_liquidity_msats;
}

final class wire_cst_onchain_payment_limits_response extends ffi.Struct {
  @ffi.Uint64()
  external int min_sat;

  @ffi.Uint64()
  external int max_sat;
}

final class wire_cst_open_channel_fee_response extends ffi.Struct {
  external ffi.Pointer<ffi.Uint64> fee_msat;

  external wire_cst_opening_fee_params fee_params;
}

final class wire_cst_pay_onchain_response extends ffi.Struct {
  external wire_cst_reverse_swap_info reverse_swap_info;
}

final class wire_cst_prepare_redeem_onchain_funds_response extends ffi.Struct {
  @ffi.Uint64()
  external int tx_weight;

  @ffi.Uint64()
  external int tx_fee_sat;
}

final class wire_cst_prepare_refund_response extends ffi.Struct {
  @ffi.Uint32()
  external int refund_tx_weight;

  @ffi.Uint64()
  external int refund_tx_fee_sat;
}

final class wire_cst_receive_payment_response extends ffi.Struct {
  external wire_cst_ln_invoice ln_invoice;

  external ffi.Pointer<wire_cst_opening_fee_params> opening_fee_params;

  external ffi.Pointer<ffi.Uint64> opening_fee_msat;
}

final class wire_cst_recommended_fees extends ffi.Struct {
  @ffi.Uint64()
  external int fastest_fee;

  @ffi.Uint64()
  external int half_hour_fee;

  @ffi.Uint64()
  external int hour_fee;

  @ffi.Uint64()
  external int economy_fee;

  @ffi.Uint64()
  external int minimum_fee;
}

final class wire_cst_redeem_onchain_funds_response extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> txid;
}

final class wire_cst_refund_response extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> refund_tx_id;
}

final class wire_cst_reverse_swap_pair_info extends ffi.Struct {
  @ffi.Uint64()
  external int min;

  @ffi.Uint64()
  external int max;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> fees_hash;

  @ffi.Double()
  external double fees_percentage;

  @ffi.Uint64()
  external int fees_lockup;

  @ffi.Uint64()
  external int fees_claim;

  external ffi.Pointer<ffi.Uint64> total_fees;
}

final class wire_cst_send_onchain_response extends ffi.Struct {
  external wire_cst_reverse_swap_info reverse_swap_info;
}

final class wire_cst_send_payment_response extends ffi.Struct {
  external wire_cst_payment payment;
}

final class wire_cst_service_health_check_response extends ffi.Struct {
  @ffi.Int32()
  external int status;
}

final class wire_cst_sign_message_response extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> signature;
}

final class wire_cst_static_backup_response extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_String> backup;
}

const int SWAP_PAYMENT_FEE_EXPIRY_SECONDS = 172800;

const int INVOICE_PAYMENT_FEE_EXPIRY_SECONDS = 3600;

const int ESTIMATED_CLAIM_TX_VSIZE = 138;

const int ESTIMATED_LOCKUP_TX_VSIZE = 153;
