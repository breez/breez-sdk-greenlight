// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'dart:ffi' as ffi;

part 'bridge_generated.freezed.dart';

abstract class BreezSdkCore {
  /// Wrapper around [BreezServices::connect] which also initializes SDK logging
  Future<void> connect({required ConnectRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectConstMeta;

  /// Check whether node service is initialized or not
  Future<bool> isInitialized({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsInitializedConstMeta;

  /// See [BreezServices::sync]
  Future<void> sync({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSyncConstMeta;

  /// See [BreezServices::node_credentials]
  Future<NodeCredentials?> nodeCredentials({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNodeCredentialsConstMeta;

  /// See [BreezServices::node_info]
  Future<NodeState> nodeInfo({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNodeInfoConstMeta;

  /// See [BreezServices::configure_node]
  Future<void> configureNode({required ConfigureNodeRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConfigureNodeConstMeta;

  /// Cleanup node resources and stop the signer.
  Future<void> disconnect({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisconnectConstMeta;

  /// See [BreezServices::sign_message]
  Future<SignMessageResponse> signMessage({required SignMessageRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignMessageConstMeta;

  /// See [BreezServices::check_message]
  Future<CheckMessageResponse> checkMessage({required CheckMessageRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCheckMessageConstMeta;

  /// See [breez_services::mnemonic_to_seed]
  Future<Uint8List> mnemonicToSeed({required String phrase, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMnemonicToSeedConstMeta;

  /// See [BreezServices::default_config]
  Future<Config> defaultConfig(
      {required EnvironmentType envType,
      required String apiKey,
      required NodeConfig nodeConfig,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDefaultConfigConstMeta;

  /// See [BreezServices::static_backup]
  Future<StaticBackupResponse> staticBackup({required StaticBackupRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStaticBackupConstMeta;

  /// See [BreezServices::service_health_check]
  Future<ServiceHealthCheckResponse> serviceHealthCheck({required String apiKey, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kServiceHealthCheckConstMeta;

  /// If used, this must be called before `connect`. It can only be called once.
  Stream<BreezEvent> breezEventsStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBreezEventsStreamConstMeta;

  /// If used, this must be called before `connect`. It can only be called once.
  Stream<LogEntry> breezLogStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBreezLogStreamConstMeta;

  /// See [BreezServices::list_lsps]
  Future<List<LspInformation>> listLsps({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListLspsConstMeta;

  /// See [BreezServices::connect_lsp]
  Future<void> connectLsp({required String lspId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectLspConstMeta;

  /// See [BreezServices::lsp_id]
  Future<String?> lspId({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLspIdConstMeta;

  /// See [BreezServices::fetch_lsp_info]
  Future<LspInformation?> fetchLspInfo({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFetchLspInfoConstMeta;

  /// See [BreezServices::lsp_info]
  Future<LspInformation> lspInfo({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLspInfoConstMeta;

  /// See [BreezServices::close_lsp_channels]
  Future<void> closeLspChannels({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCloseLspChannelsConstMeta;

  Future<void> registerWebhook({required String webhookUrl, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterWebhookConstMeta;

  Future<void> unregisterWebhook({required String webhookUrl, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUnregisterWebhookConstMeta;

  /// See [BreezServices::backup]
  Future<void> backup({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBackupConstMeta;

  /// See [BreezServices::backup_status]
  Future<BackupStatus> backupStatus({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBackupStatusConstMeta;

  Future<LNInvoice> parseInvoice({required String invoice, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kParseInvoiceConstMeta;

  Future<InputType> parseInput({required String input, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kParseInputConstMeta;

  /// See [BreezServices::list_payments]
  Future<List<Payment>> listPayments({required ListPaymentsRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListPaymentsConstMeta;

  /// See [BreezServices::list_payments]
  Future<Payment?> paymentByHash({required String hash, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPaymentByHashConstMeta;

  /// See [BreezServices::set_payment_metadata]
  Future<void> setPaymentMetadata({required String hash, required String metadata, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetPaymentMetadataConstMeta;

  /// See [BreezServices::send_payment]
  Future<SendPaymentResponse> sendPayment({required SendPaymentRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendPaymentConstMeta;

  /// See [BreezServices::send_spontaneous_payment]
  Future<SendPaymentResponse> sendSpontaneousPayment(
      {required SendSpontaneousPaymentRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendSpontaneousPaymentConstMeta;

  /// See [BreezServices::receive_payment]
  Future<ReceivePaymentResponse> receivePayment({required ReceivePaymentRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReceivePaymentConstMeta;

  /// See [BreezServices::lnurl_pay]
  Future<LnUrlPayResult> lnurlPay({required LnUrlPayRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLnurlPayConstMeta;

  /// See [BreezServices::lnurl_withdraw]
  Future<LnUrlWithdrawResult> lnurlWithdraw({required LnUrlWithdrawRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLnurlWithdrawConstMeta;

  /// See [BreezServices::lnurl_auth]
  Future<LnUrlCallbackStatus> lnurlAuth({required LnUrlAuthRequestData reqData, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLnurlAuthConstMeta;

  /// See [BreezServices::report_issue]
  Future<void> reportIssue({required ReportIssueRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReportIssueConstMeta;

  /// See [BreezServices::fetch_fiat_rates]
  Future<List<Rate>> fetchFiatRates({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFetchFiatRatesConstMeta;

  /// See [BreezServices::list_fiat_currencies]
  Future<List<FiatCurrency>> listFiatCurrencies({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListFiatCurrenciesConstMeta;

  /// See [BreezServices::max_reverse_swap_amount]
  Future<MaxReverseSwapAmountResponse> maxReverseSwapAmount({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMaxReverseSwapAmountConstMeta;

  /// See [BreezServices::send_onchain]
  Future<SendOnchainResponse> sendOnchain({required SendOnchainRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendOnchainConstMeta;

  /// See [BreezServices::pay_onchain]
  Future<PayOnchainResponse> payOnchain({required PayOnchainRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPayOnchainConstMeta;

  /// See [BreezServices::receive_onchain]
  Future<SwapInfo> receiveOnchain({required ReceiveOnchainRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReceiveOnchainConstMeta;

  /// See [BreezServices::buy_bitcoin]
  Future<BuyBitcoinResponse> buyBitcoin({required BuyBitcoinRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBuyBitcoinConstMeta;

  /// See [BreezServices::redeem_onchain_funds]
  Future<RedeemOnchainFundsResponse> redeemOnchainFunds(
      {required RedeemOnchainFundsRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRedeemOnchainFundsConstMeta;

  /// See [BreezServices::prepare_redeem_onchain_funds]
  Future<PrepareRedeemOnchainFundsResponse> prepareRedeemOnchainFunds(
      {required PrepareRedeemOnchainFundsRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareRedeemOnchainFundsConstMeta;

  /// See [BreezServices::list_refundables]
  Future<List<SwapInfo>> listRefundables({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListRefundablesConstMeta;

  /// See [BreezServices::prepare_refund]
  Future<PrepareRefundResponse> prepareRefund({required PrepareRefundRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareRefundConstMeta;

  /// See [BreezServices::refund]
  Future<RefundResponse> refund({required RefundRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRefundConstMeta;

  /// See [BreezServices::rescan_swaps]
  Future<void> rescanSwaps({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRescanSwapsConstMeta;

  /// See [BreezServices::redeem_swap]
  Future<void> redeemSwap({required String swapAddress, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRedeemSwapConstMeta;

  /// See [BreezServices::in_progress_swap]
  Future<SwapInfo?> inProgressSwap({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInProgressSwapConstMeta;

  /// See [BreezServices::in_progress_reverse_swaps]
  Future<List<ReverseSwapInfo>> inProgressReverseSwaps({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInProgressReverseSwapsConstMeta;

  /// See [BreezServices::claim_reverse_swap]
  Future<void> claimReverseSwap({required String lockupAddress, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kClaimReverseSwapConstMeta;

  /// See [BreezServices::open_channel_fee]
  Future<OpenChannelFeeResponse> openChannelFee({required OpenChannelFeeRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOpenChannelFeeConstMeta;

  /// See [BreezServices::fetch_reverse_swap_fees]
  Future<ReverseSwapPairInfo> fetchReverseSwapFees({required ReverseSwapFeesRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFetchReverseSwapFeesConstMeta;

  /// See [BreezServices::onchain_payment_limits]
  Future<OnchainPaymentLimitsResponse> onchainPaymentLimits({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOnchainPaymentLimitsConstMeta;

  /// See [BreezServices::prepare_onchain_payment]
  Future<PrepareOnchainPaymentResponse> prepareOnchainPayment(
      {required PrepareOnchainPaymentRequest req, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPrepareOnchainPaymentConstMeta;

  /// See [BreezServices::in_progress_onchain_payments]
  Future<List<ReverseSwapInfo>> inProgressOnchainPayments({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInProgressOnchainPaymentsConstMeta;

  /// See [BreezServices::recommended_fees]
  Future<RecommendedFees> recommendedFees({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRecommendedFeesConstMeta;

  /// See [BreezServices::execute_dev_command]
  Future<String> executeCommand({required String command, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kExecuteCommandConstMeta;

  /// See [BreezServices::generate_diagnostic_data]
  Future<String> generateDiagnosticData({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGenerateDiagnosticDataConstMeta;
}

class AesSuccessActionDataDecrypted {
  final String description;
  final String plaintext;

  const AesSuccessActionDataDecrypted({
    required this.description,
    required this.plaintext,
  });
}

@freezed
sealed class AesSuccessActionDataResult with _$AesSuccessActionDataResult {
  const factory AesSuccessActionDataResult.decrypted({
    required AesSuccessActionDataDecrypted data,
  }) = AesSuccessActionDataResult_Decrypted;
  const factory AesSuccessActionDataResult.errorStatus({
    required String reason,
  }) = AesSuccessActionDataResult_ErrorStatus;
}

class BackupFailedData {
  final String error;

  const BackupFailedData({
    required this.error,
  });
}

class BackupStatus {
  final bool backedUp;

  /// Epoch time, in seconds
  final int? lastBackupTime;

  const BackupStatus({
    required this.backedUp,
    this.lastBackupTime,
  });
}

class BitcoinAddressData {
  final String address;
  final Network network;
  final int? amountSat;
  final String? label;
  final String? message;

  const BitcoinAddressData({
    required this.address,
    required this.network,
    this.amountSat,
    this.label,
    this.message,
  });
}

@freezed
sealed class BreezEvent with _$BreezEvent {
  /// Indicates that a new block has just been found
  const factory BreezEvent.newBlock({
    required int block,
  }) = BreezEvent_NewBlock;

  /// Indicates that a new invoice has just been paid
  const factory BreezEvent.invoicePaid({
    required InvoicePaidDetails details,
  }) = BreezEvent_InvoicePaid;

  /// Indicates that the local SDK state has just been sync-ed with the remote components
  const factory BreezEvent.synced() = BreezEvent_Synced;

  /// Indicates that an outgoing payment has been completed successfully
  const factory BreezEvent.paymentSucceed({
    required Payment details,
  }) = BreezEvent_PaymentSucceed;

  /// Indicates that an outgoing payment has been failed to complete
  const factory BreezEvent.paymentFailed({
    required PaymentFailedData details,
  }) = BreezEvent_PaymentFailed;

  /// Indicates that the backup process has just started
  const factory BreezEvent.backupStarted() = BreezEvent_BackupStarted;

  /// Indicates that the backup process has just finished successfully
  const factory BreezEvent.backupSucceeded() = BreezEvent_BackupSucceeded;

  /// Indicates that the backup process has just failed
  const factory BreezEvent.backupFailed({
    required BackupFailedData details,
  }) = BreezEvent_BackupFailed;

  /// Indicates that a reverse swap has been updated which may also
  /// include a status change
  const factory BreezEvent.reverseSwapUpdated({
    required ReverseSwapInfo details,
  }) = BreezEvent_ReverseSwapUpdated;

  /// Indicates that a swap has been updated which may also
  /// include a status change
  const factory BreezEvent.swapUpdated({
    required SwapInfo details,
  }) = BreezEvent_SwapUpdated;
}

/// Different providers will demand different behaviours when the user is trying to buy bitcoin.
enum BuyBitcoinProvider {
  Moonpay,
}

class BuyBitcoinRequest {
  final BuyBitcoinProvider provider;
  final OpeningFeeParams? openingFeeParams;

  /// The optional URL to redirect to after completing the buy.
  ///
  /// For Moonpay, see <https://dev.moonpay.com/docs/on-ramp-configure-user-journey-params>
  final String? redirectUrl;

  const BuyBitcoinRequest({
    required this.provider,
    this.openingFeeParams,
    this.redirectUrl,
  });
}

class BuyBitcoinResponse {
  final String url;
  final OpeningFeeParams? openingFeeParams;

  const BuyBitcoinResponse({
    required this.url,
    this.openingFeeParams,
  });
}

/// State of a Lightning channel
enum ChannelState {
  PendingOpen,
  Opened,
  PendingClose,
  Closed,
}

/// Request to check a message was signed by a specific node id.
class CheckMessageRequest {
  /// The message that was signed.
  final String message;

  /// The public key of the node that signed the message.
  final String pubkey;

  /// The zbase encoded signature to verify.
  final String signature;

  const CheckMessageRequest({
    required this.message,
    required this.pubkey,
    required this.signature,
  });
}

/// Response to a [CheckMessageRequest]
class CheckMessageResponse {
  /// Boolean value indicating whether the signature covers the message and
  /// was signed by the given pubkey.
  final bool isValid;

  const CheckMessageResponse({
    required this.isValid,
  });
}

/// Represents the funds that were on the user side of the channel at the time it was closed.
class ClosedChannelPaymentDetails {
  final ChannelState state;
  final String fundingTxid;
  final String? shortChannelId;

  /// Can be empty for older closed channels.
  final String? closingTxid;

  const ClosedChannelPaymentDetails({
    required this.state,
    required this.fundingTxid,
    this.shortChannelId,
    this.closingTxid,
  });
}

/// Configuration for the Breez Services
///
/// Use [Config::production] or [Config::staging] for default configs of the different supported
/// environments.
class Config {
  final String breezserver;
  final String chainnotifierUrl;

  /// If set, this is the mempool.space URL that will be used.
  ///
  /// If not set, a list of mempool.space URLs will be used to provide fault-tolerance. If calls
  /// to the first URL fail, then the call will be repeated to the next URL, and so on.
  ///
  /// Note that, if specified, the URL has to be in the format: `https://mempool.space/api`
  final String? mempoolspaceUrl;

  /// Directory in which all SDK files (DB, log) are stored. Defaults to ".", otherwise if it's customized,
  /// the folder should exist before starting the SDK.
  final String workingDir;
  final Network network;
  final int paymentTimeoutSec;
  final String? defaultLspId;
  final String? apiKey;

  /// Maps to the CLN `maxfeepercent` config when paying invoices (`lightning-pay`)
  final double maxfeePercent;

  /// Maps to the CLN `exemptfee` config when paying invoices (`lightning-pay`)
  final int exemptfeeMsat;
  final NodeConfig nodeConfig;

  const Config({
    required this.breezserver,
    required this.chainnotifierUrl,
    this.mempoolspaceUrl,
    required this.workingDir,
    required this.network,
    required this.paymentTimeoutSec,
    this.defaultLspId,
    this.apiKey,
    required this.maxfeePercent,
    required this.exemptfeeMsat,
    required this.nodeConfig,
  });
}

/// Represents a configure node request.
class ConfigureNodeRequest {
  final String? closeToAddress;

  const ConfigureNodeRequest({
    this.closeToAddress,
  });
}

/// Represents a connect request.
class ConnectRequest {
  final Config config;
  final Uint8List seed;

  /// If true, only restores an existing node and otherwise result in an error
  final bool? restoreOnly;

  const ConnectRequest({
    required this.config,
    required this.seed,
    this.restoreOnly,
  });
}

class CurrencyInfo {
  final String name;
  final int fractionSize;
  final int? spacing;
  final Symbol? symbol;
  final Symbol? uniqSymbol;
  final List<LocalizedName> localizedName;
  final List<LocaleOverrides> localeOverrides;

  const CurrencyInfo({
    required this.name,
    required this.fractionSize,
    this.spacing,
    this.symbol,
    this.uniqSymbol,
    required this.localizedName,
    required this.localeOverrides,
  });
}

/// Indicates the different kinds of supported environments for [crate::BreezServices].
enum EnvironmentType {
  Production,
  Staging,
}

class FiatCurrency {
  final String id;
  final CurrencyInfo info;

  const FiatCurrency({
    required this.id,
    required this.info,
  });
}

/// Client-specific credentials to connect to and manage a Greenlight node in the cloud
class GreenlightCredentials {
  final Uint8List developerKey;
  final Uint8List developerCert;

  const GreenlightCredentials({
    required this.developerKey,
    required this.developerCert,
  });
}

/// Device credentials used to authenticate to Greenlight with the current device.
class GreenlightDeviceCredentials {
  final Uint8List device;

  const GreenlightDeviceCredentials({
    required this.device,
  });
}

class GreenlightNodeConfig {
  final GreenlightCredentials? partnerCredentials;
  final String? inviteCode;

  const GreenlightNodeConfig({
    this.partnerCredentials,
    this.inviteCode,
  });
}

/// Indicates the different service health check statuses.
enum HealthCheckStatus {
  Operational,
  Maintenance,
  ServiceDisruption,
}

@freezed
sealed class InputType with _$InputType {
  const factory InputType.bitcoinAddress({
    required BitcoinAddressData address,
  }) = InputType_BitcoinAddress;
  const factory InputType.bolt11({
    required LNInvoice invoice,
  }) = InputType_Bolt11;
  const factory InputType.nodeId({
    required String nodeId,
  }) = InputType_NodeId;
  const factory InputType.url({
    required String url,
  }) = InputType_Url;
  const factory InputType.lnUrlPay({
    required LnUrlPayRequestData data,
  }) = InputType_LnUrlPay;
  const factory InputType.lnUrlWithdraw({
    required LnUrlWithdrawRequestData data,
  }) = InputType_LnUrlWithdraw;
  const factory InputType.lnUrlAuth({
    required LnUrlAuthRequestData data,
  }) = InputType_LnUrlAuth;
  const factory InputType.lnUrlError({
    required LnUrlErrorData data,
  }) = InputType_LnUrlError;
}

/// Details of an invoice that has been paid, included as payload in an emitted [BreezEvent]
class InvoicePaidDetails {
  final String paymentHash;
  final String bolt11;
  final Payment? payment;

  const InvoicePaidDetails({
    required this.paymentHash,
    required this.bolt11,
    this.payment,
  });
}

/// Represents a list payments request.
class ListPaymentsRequest {
  final List<PaymentTypeFilter>? filters;
  final List<MetadataFilter>? metadataFilters;

  /// Epoch time, in seconds
  final int? fromTimestamp;

  /// Epoch time, in seconds
  final int? toTimestamp;
  final bool? includeFailures;
  final int? offset;
  final int? limit;

  const ListPaymentsRequest({
    this.filters,
    this.metadataFilters,
    this.fromTimestamp,
    this.toTimestamp,
    this.includeFailures,
    this.offset,
    this.limit,
  });
}

class LNInvoice {
  final String bolt11;
  final Network network;
  final String payeePubkey;
  final String paymentHash;
  final String? description;
  final String? descriptionHash;
  final int? amountMsat;
  final int timestamp;
  final int expiry;
  final List<RouteHint> routingHints;
  final Uint8List paymentSecret;
  final int minFinalCltvExpiryDelta;

  const LNInvoice({
    required this.bolt11,
    required this.network,
    required this.payeePubkey,
    required this.paymentHash,
    this.description,
    this.descriptionHash,
    this.amountMsat,
    required this.timestamp,
    required this.expiry,
    required this.routingHints,
    required this.paymentSecret,
    required this.minFinalCltvExpiryDelta,
  });
}

/// Details of a LN payment, as included in a [Payment]
class LnPaymentDetails {
  final String paymentHash;
  final String label;
  final String destinationPubkey;
  final String paymentPreimage;
  final bool keysend;
  final String bolt11;

  /// Only set for [PaymentType::Received], payments which require to open a channel.
  /// Represents the actual invoice paid by the sender
  final String? openChannelBolt11;

  /// Only set for [PaymentType::Sent] payments that are part of a LNURL-pay workflow where
  /// the endpoint returns a success action
  final SuccessActionProcessed? lnurlSuccessAction;

  /// Only set for [PaymentType::Sent] payments if it is not a payment to a Lightning Address
  final String? lnurlPayDomain;

  /// Only set for [PaymentType::Sent] payments if the user sent the comment using LNURL-pay
  final String? lnurlPayComment;

  /// Only set for [PaymentType::Sent] payments that are sent to a Lightning Address
  final String? lnAddress;

  /// Only set for [PaymentType::Sent] payments where the receiver endpoint returned LNURL metadata
  final String? lnurlMetadata;

  /// Only set for [PaymentType::Received] payments that were received as part of LNURL-withdraw
  final String? lnurlWithdrawEndpoint;

  /// Only set for [PaymentType::Received] payments that were received in the context of a swap
  final SwapInfo? swapInfo;

  /// Only set for [PaymentType::Sent] payments that were sent in the context of a reverse swap
  final ReverseSwapInfo? reverseSwapInfo;

  /// Only set for [PaymentStatus::Pending] payments that are inflight.
  final int? pendingExpirationBlock;

  const LnPaymentDetails({
    required this.paymentHash,
    required this.label,
    required this.destinationPubkey,
    required this.paymentPreimage,
    required this.keysend,
    required this.bolt11,
    this.openChannelBolt11,
    this.lnurlSuccessAction,
    this.lnurlPayDomain,
    this.lnurlPayComment,
    this.lnAddress,
    this.lnurlMetadata,
    this.lnurlWithdrawEndpoint,
    this.swapInfo,
    this.reverseSwapInfo,
    this.pendingExpirationBlock,
  });
}

class LnUrlAuthRequestData {
  final String k1;
  final String? action;
  final String domain;
  final String url;

  const LnUrlAuthRequestData({
    required this.k1,
    this.action,
    required this.domain,
    required this.url,
  });
}

@freezed
sealed class LnUrlCallbackStatus with _$LnUrlCallbackStatus {
  const factory LnUrlCallbackStatus.ok() = LnUrlCallbackStatus_Ok;
  const factory LnUrlCallbackStatus.errorStatus({
    required LnUrlErrorData data,
  }) = LnUrlCallbackStatus_ErrorStatus;
}

class LnUrlErrorData {
  final String reason;

  const LnUrlErrorData({
    required this.reason,
  });
}

class LnUrlPayErrorData {
  final String paymentHash;
  final String reason;

  const LnUrlPayErrorData({
    required this.paymentHash,
    required this.reason,
  });
}

class LnUrlPayRequest {
  final LnUrlPayRequestData data;
  final int amountMsat;
  final bool useTrampoline;
  final String? comment;
  final String? paymentLabel;
  final bool? validateSuccessActionUrl;

  const LnUrlPayRequest({
    required this.data,
    required this.amountMsat,
    required this.useTrampoline,
    this.comment,
    this.paymentLabel,
    this.validateSuccessActionUrl,
  });
}

class LnUrlPayRequestData {
  final String callback;
  final int minSendable;
  final int maxSendable;
  final String metadataStr;
  final int commentAllowed;
  final String domain;
  final bool allowsNostr;
  final String? nostrPubkey;
  final String? lnAddress;

  const LnUrlPayRequestData({
    required this.callback,
    required this.minSendable,
    required this.maxSendable,
    required this.metadataStr,
    required this.commentAllowed,
    required this.domain,
    required this.allowsNostr,
    this.nostrPubkey,
    this.lnAddress,
  });
}

@freezed
sealed class LnUrlPayResult with _$LnUrlPayResult {
  const factory LnUrlPayResult.endpointSuccess({
    required LnUrlPaySuccessData data,
  }) = LnUrlPayResult_EndpointSuccess;
  const factory LnUrlPayResult.endpointError({
    required LnUrlErrorData data,
  }) = LnUrlPayResult_EndpointError;
  const factory LnUrlPayResult.payError({
    required LnUrlPayErrorData data,
  }) = LnUrlPayResult_PayError;
}

class LnUrlPaySuccessData {
  final Payment payment;
  final SuccessActionProcessed? successAction;

  const LnUrlPaySuccessData({
    required this.payment,
    this.successAction,
  });
}

class LnUrlWithdrawRequest {
  final LnUrlWithdrawRequestData data;
  final int amountMsat;
  final String? description;

  const LnUrlWithdrawRequest({
    required this.data,
    required this.amountMsat,
    this.description,
  });
}

class LnUrlWithdrawRequestData {
  final String callback;
  final String k1;
  final String defaultDescription;
  final int minWithdrawable;
  final int maxWithdrawable;

  const LnUrlWithdrawRequestData({
    required this.callback,
    required this.k1,
    required this.defaultDescription,
    required this.minWithdrawable,
    required this.maxWithdrawable,
  });
}

@freezed
sealed class LnUrlWithdrawResult with _$LnUrlWithdrawResult {
  const factory LnUrlWithdrawResult.ok({
    required LnUrlWithdrawSuccessData data,
  }) = LnUrlWithdrawResult_Ok;
  const factory LnUrlWithdrawResult.timeout({
    required LnUrlWithdrawSuccessData data,
  }) = LnUrlWithdrawResult_Timeout;
  const factory LnUrlWithdrawResult.errorStatus({
    required LnUrlErrorData data,
  }) = LnUrlWithdrawResult_ErrorStatus;
}

class LnUrlWithdrawSuccessData {
  final LNInvoice invoice;

  const LnUrlWithdrawSuccessData({
    required this.invoice,
  });
}

class LocaleOverrides {
  final String locale;
  final int? spacing;
  final Symbol symbol;

  const LocaleOverrides({
    required this.locale,
    this.spacing,
    required this.symbol,
  });
}

class LocalizedName {
  final String locale;
  final String name;

  const LocalizedName({
    required this.locale,
    required this.name,
  });
}

/// Internal SDK log entry
class LogEntry {
  final String line;
  final String level;

  const LogEntry({
    required this.line,
    required this.level,
  });
}

/// Details of supported LSP
class LspInformation {
  final String id;

  /// The name of of LSP
  final String name;

  /// The URL of the LSP
  final String widgetUrl;

  /// The identity pubkey of the Lightning node
  final String pubkey;

  /// The network location of the lightning node, e.g. `12.34.56.78:9012` or `localhost:10011`
  final String host;

  /// The base fee charged regardless of the number of milli-satoshis sent
  final int baseFeeMsat;

  /// The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
  final double feeRate;

  /// The required timelock delta for HTLCs forwarded over the channel
  final int timeLockDelta;

  /// The minimum value in millisatoshi we will require for incoming HTLCs on the channel
  final int minHtlcMsat;
  final Uint8List lspPubkey;
  final OpeningFeeParamsMenu openingFeeParamsList;

  const LspInformation({
    required this.id,
    required this.name,
    required this.widgetUrl,
    required this.pubkey,
    required this.host,
    required this.baseFeeMsat,
    required this.feeRate,
    required this.timeLockDelta,
    required this.minHtlcMsat,
    required this.lspPubkey,
    required this.openingFeeParamsList,
  });
}

class MaxReverseSwapAmountResponse {
  /// The total sats that can be sent onchain.
  final int totalSat;

  const MaxReverseSwapAmountResponse({
    required this.totalSat,
  });
}

class MessageSuccessActionData {
  final String message;

  const MessageSuccessActionData({
    required this.message,
  });
}

/// A metadata filter which can be applied when retrieving the transaction list
class MetadataFilter {
  /// Specifies which field to apply the filter on, using the JSON path format
  final String jsonPath;

  /// Specifies which JSON value to filter for.
  /// As such, strings must be wrapped with quotes ("") in order to be properly filtered
  final String jsonValue;

  const MetadataFilter({
    required this.jsonPath,
    required this.jsonValue,
  });
}

enum Network {
  Bitcoin,
  Testnet,
  Signet,
  Regtest,
}

@freezed
sealed class NodeConfig with _$NodeConfig {
  const factory NodeConfig.greenlight({
    required GreenlightNodeConfig config,
  }) = NodeConfig_Greenlight;
}

@freezed
sealed class NodeCredentials with _$NodeCredentials {
  const factory NodeCredentials.greenlight({
    required GreenlightDeviceCredentials credentials,
  }) = NodeCredentials_Greenlight;
}

/// The node state of a Greenlight LN node running in the cloud.
///
/// Note: The implementation attempts to provide the most up-to-date values,
/// which may result in some short-lived inconsistencies
/// (e.g., `channels_balance_msat` may be updated before `inbound_liquidity_msats`).
class NodeState {
  final String id;
  final int blockHeight;
  final int channelsBalanceMsat;
  final int onchainBalanceMsat;
  final int pendingOnchainBalanceMsat;
  final List<UnspentTransactionOutput> utxos;
  final int maxPayableMsat;
  final int maxReceivableMsat;
  final int maxSinglePaymentAmountMsat;
  final int maxChanReserveMsats;
  final List<String> connectedPeers;

  /// Maximum receivable in a single payment without requiring a new channel open.
  final int maxReceivableSinglePaymentAmountMsat;

  /// Total receivable on all available channels
  final int totalInboundLiquidityMsats;

  const NodeState({
    required this.id,
    required this.blockHeight,
    required this.channelsBalanceMsat,
    required this.onchainBalanceMsat,
    required this.pendingOnchainBalanceMsat,
    required this.utxos,
    required this.maxPayableMsat,
    required this.maxReceivableMsat,
    required this.maxSinglePaymentAmountMsat,
    required this.maxChanReserveMsats,
    required this.connectedPeers,
    required this.maxReceivableSinglePaymentAmountMsat,
    required this.totalInboundLiquidityMsats,
  });
}

class OnchainPaymentLimitsResponse {
  /// Minimum amount the reverse swap service accepts as a send amount
  final int minSat;

  /// Maximum amount the reverse swap service accepts as a send amount
  final int maxSat;

  /// Maximum amount this node can send with the current channels and the current local balance
  final int maxPayableSat;

  const OnchainPaymentLimitsResponse({
    required this.minSat,
    required this.maxSat,
    required this.maxPayableSat,
  });
}

class OpenChannelFeeRequest {
  final int? amountMsat;
  final int? expiry;

  const OpenChannelFeeRequest({
    this.amountMsat,
    this.expiry,
  });
}

class OpenChannelFeeResponse {
  /// Opening fee for receiving the amount set in the [OpenChannelFeeRequest], in case it was set.
  /// It may be zero if no new channel needs to be opened.
  final int? feeMsat;

  /// The fee params for receiving more than the current inbound liquidity.
  final OpeningFeeParams feeParams;

  const OpenChannelFeeResponse({
    this.feeMsat,
    required this.feeParams,
  });
}

/// Dynamic fee parameters offered by the LSP for opening a new channel.
///
/// After they are received, the client shouldn't change them when calling LSP methods,
/// otherwise the LSP may reject the call.
class OpeningFeeParams {
  /// The minimum value in millisatoshi we will require for incoming HTLCs on the channel
  final int minMsat;

  /// The fee in ppm charged over liquidity when buying a channel
  final int proportional;

  /// The date and time this opening fee params promise expires, in RFC 3339 / ISO 8601 format
  final String validUntil;

  /// The channel can be closed if not used within this duration in blocks
  final int maxIdleTime;
  final int maxClientToSelfDelay;
  final String promise;

  const OpeningFeeParams({
    required this.minMsat,
    required this.proportional,
    required this.validUntil,
    required this.maxIdleTime,
    required this.maxClientToSelfDelay,
    required this.promise,
  });
}

/// See [OpeningFeeParamsMenu::try_from]
class OpeningFeeParamsMenu {
  final List<OpeningFeeParams> values;

  const OpeningFeeParamsMenu({
    required this.values,
  });
}

class PayOnchainRequest {
  final String recipientAddress;
  final PrepareOnchainPaymentResponse prepareRes;

  const PayOnchainRequest({
    required this.recipientAddress,
    required this.prepareRes,
  });
}

class PayOnchainResponse {
  final ReverseSwapInfo reverseSwapInfo;

  const PayOnchainResponse({
    required this.reverseSwapInfo,
  });
}

/// Represents a payment, including its [PaymentType] and [PaymentDetails]
class Payment {
  final String id;
  final PaymentType paymentType;

  /// Epoch time, in seconds
  final int paymentTime;
  final int amountMsat;
  final int feeMsat;
  final PaymentStatus status;
  final String? error;
  final String? description;
  final PaymentDetails details;
  final String? metadata;

  const Payment({
    required this.id,
    required this.paymentType,
    required this.paymentTime,
    required this.amountMsat,
    required this.feeMsat,
    required this.status,
    this.error,
    this.description,
    required this.details,
    this.metadata,
  });
}

@freezed
sealed class PaymentDetails with _$PaymentDetails {
  const factory PaymentDetails.ln({
    required LnPaymentDetails data,
  }) = PaymentDetails_Ln;
  const factory PaymentDetails.closedChannel({
    required ClosedChannelPaymentDetails data,
  }) = PaymentDetails_ClosedChannel;
}

class PaymentFailedData {
  final String error;
  final String nodeId;
  final LNInvoice? invoice;
  final String? label;

  const PaymentFailedData({
    required this.error,
    required this.nodeId,
    this.invoice,
    this.label,
  });
}

/// The status of a payment
enum PaymentStatus {
  Pending,
  Complete,
  Failed,
}

/// Different types of supported payments
enum PaymentType {
  Sent,
  Received,
  ClosedChannel,
}

/// Different types of supported filters which can be applied when retrieving the transaction list
enum PaymentTypeFilter {
  Sent,
  Received,
  ClosedChannel,
}

/// See [ReverseSwapFeesRequest]
class PrepareOnchainPaymentRequest {
  /// Depending on `amount_type`, this may be the desired send amount or the desired receive amount.
  final int amountSat;
  final SwapAmountType amountType;

  /// Feerate (sat / vByte) for the claim transaction
  final int claimTxFeerate;

  const PrepareOnchainPaymentRequest({
    required this.amountSat,
    required this.amountType,
    required this.claimTxFeerate,
  });
}

/// Contains fields describing the reverse swap parameters (see [ReverseSwapPairInfo]), as well as
/// the resulting send and receive amounts.
class PrepareOnchainPaymentResponse {
  final String feesHash;
  final double feesPercentage;
  final int feesLockup;
  final int feesClaim;
  final int senderAmountSat;
  final int recipientAmountSat;
  final int totalFees;

  const PrepareOnchainPaymentResponse({
    required this.feesHash,
    required this.feesPercentage,
    required this.feesLockup,
    required this.feesClaim,
    required this.senderAmountSat,
    required this.recipientAmountSat,
    required this.totalFees,
  });
}

/// We need to prepare a redeem_onchain_funds transaction to know what fee will be charged in satoshis.
/// This model holds the request data which consists of the address to redeem on-chain funds to and the fee rate in.
/// satoshis per vbyte which will be converted to absolute satoshis.
class PrepareRedeemOnchainFundsRequest {
  final String toAddress;
  final int satPerVbyte;

  const PrepareRedeemOnchainFundsRequest({
    required this.toAddress,
    required this.satPerVbyte,
  });
}

/// We need to prepare a redeem_onchain_funds transaction to know what a fee it will be charged in satoshis
/// this model holds the response data, which consists of the weight and the absolute fee in sats
class PrepareRedeemOnchainFundsResponse {
  final int txWeight;
  final int txFeeSat;

  const PrepareRedeemOnchainFundsResponse({
    required this.txWeight,
    required this.txFeeSat,
  });
}

class PrepareRefundRequest {
  final String swapAddress;
  final String toAddress;
  final int satPerVbyte;

  const PrepareRefundRequest({
    required this.swapAddress,
    required this.toAddress,
    required this.satPerVbyte,
  });
}

class PrepareRefundResponse {
  final int refundTxWeight;
  final int refundTxFeeSat;

  const PrepareRefundResponse({
    required this.refundTxWeight,
    required this.refundTxFeeSat,
  });
}

class Rate {
  final String coin;
  final double value;

  const Rate({
    required this.coin,
    required this.value,
  });
}

class ReceiveOnchainRequest {
  final OpeningFeeParams? openingFeeParams;

  const ReceiveOnchainRequest({
    this.openingFeeParams,
  });
}

/// Represents a receive payment request.
class ReceivePaymentRequest {
  /// The amount in satoshis for this payment request
  final int amountMsat;

  /// The description for this payment request.
  final String description;

  /// Optional preimage for this payment request.
  /// If specified, it will be used instead of generating a new one.
  final Uint8List? preimage;

  /// If set and valid, these fess options are used when a new channels is needed.
  /// Otherwise the default fee options will be used.
  final OpeningFeeParams? openingFeeParams;

  /// If set to true, then the bolt11 invoice returned includes the description hash.
  final bool? useDescriptionHash;

  /// if specified, set the time the invoice is valid for, in seconds.
  final int? expiry;

  /// if specified, sets the min_final_cltv_expiry for the invoice
  final int? cltv;

  const ReceivePaymentRequest({
    required this.amountMsat,
    required this.description,
    this.preimage,
    this.openingFeeParams,
    this.useDescriptionHash,
    this.expiry,
    this.cltv,
  });
}

/// Represents a receive payment response.
///
/// Breez SDK may have to open a new channel to receive this payment. In that case, the channel will
/// be opened automatically when the invoice is paid, and the fees will be described in the
/// `opening_fee_params` and `opening_fee_msat` fields.
class ReceivePaymentResponse {
  /// The generated invoice, including any necessary routing hints
  final LNInvoice lnInvoice;

  /// If set, these are the [OpeningFeeParams] used to calculate the channel opening fees.
  final OpeningFeeParams? openingFeeParams;

  /// If set, this is the channel opening fee that will be deduced from the invoice amount.
  final int? openingFeeMsat;

  const ReceivePaymentResponse({
    required this.lnInvoice,
    this.openingFeeParams,
    this.openingFeeMsat,
  });
}

/// Wrapper containing the result of the recommended fees query, in sat/vByte, based on mempool.space data
class RecommendedFees {
  final int fastestFee;
  final int halfHourFee;
  final int hourFee;
  final int economyFee;
  final int minimumFee;

  const RecommendedFees({
    required this.fastestFee,
    required this.halfHourFee,
    required this.hourFee,
    required this.economyFee,
    required this.minimumFee,
  });
}

class RedeemOnchainFundsRequest {
  final String toAddress;
  final int satPerVbyte;

  const RedeemOnchainFundsRequest({
    required this.toAddress,
    required this.satPerVbyte,
  });
}

class RedeemOnchainFundsResponse {
  final Uint8List txid;

  const RedeemOnchainFundsResponse({
    required this.txid,
  });
}

class RefundRequest {
  final String swapAddress;
  final String toAddress;
  final int satPerVbyte;

  const RefundRequest({
    required this.swapAddress,
    required this.toAddress,
    required this.satPerVbyte,
  });
}

class RefundResponse {
  final String refundTxId;

  const RefundResponse({
    required this.refundTxId,
  });
}

@freezed
sealed class ReportIssueRequest with _$ReportIssueRequest {
  const factory ReportIssueRequest.paymentFailure({
    required ReportPaymentFailureDetails data,
  }) = ReportIssueRequest_PaymentFailure;
}

class ReportPaymentFailureDetails {
  /// The payment hash of the payment failure
  final String paymentHash;

  /// The comment or error text
  final String? comment;

  const ReportPaymentFailureDetails({
    required this.paymentHash,
    this.comment,
  });
}

class ReverseSwapFeesRequest {
  /// Amount to be sent
  final int? sendAmountSat;

  /// Feerate (sat / vByte) for the claim transaction
  final int? claimTxFeerate;

  const ReverseSwapFeesRequest({
    this.sendAmountSat,
    this.claimTxFeerate,
  });
}

/// Simplified version of [FullReverseSwapInfo], containing only the user-relevant fields
class ReverseSwapInfo {
  final String id;
  final String claimPubkey;

  /// The lockup tx id, available from the moment the lockup tx is seen in the mempool by the SDK
  final String? lockupTxid;

  /// The claim tx id, available from the moment the claim tx is broadcast by the SDK
  final String? claimTxid;
  final int onchainAmountSat;
  final ReverseSwapStatus status;

  const ReverseSwapInfo({
    required this.id,
    required this.claimPubkey,
    this.lockupTxid,
    this.claimTxid,
    required this.onchainAmountSat,
    required this.status,
  });
}

/// Details about the reverse swap fees and parameters, at this point in time
class ReverseSwapPairInfo {
  /// Minimum amount of sats a reverse swap is allowed to have given the current feerate conditions
  final int min;

  /// Maximum amount of sats a reverse swap is allowed to have given the current feerate conditions
  final int max;

  /// Hash of the pair info JSON
  final String feesHash;

  /// Percentage fee for the reverse swap service
  final double feesPercentage;

  /// Miner fees in sats for locking up funds
  final int feesLockup;

  /// Miner fees in sats for claiming funds. Estimate or exact value, depending on the request args.
  final int feesClaim;

  /// Total fees for the reverse swap, in sats, based on the given send amount.
  ///
  /// The field is set only when the [ReverseSwapFeesRequest] `send_amount_sat` is known.
  ///
  /// If the [ReverseSwapFeesRequest] has the `claim_tx_feerate` empty, this is an estimate. If
  /// the `claim_tx_feerate` is set, this is the exact value of the total reverse swap fees.
  final int? totalFees;

  const ReverseSwapPairInfo({
    required this.min,
    required this.max,
    required this.feesHash,
    required this.feesPercentage,
    required this.feesLockup,
    required this.feesClaim,
    this.totalFees,
  });
}

/// The possible statuses of a reverse swap, from the Breez SDK perspective.
///
/// See [BoltzApiReverseSwapStatus] for the reverse swap status from the Breez endpoint point of view.
enum ReverseSwapStatus {
  /// HODL invoice payment is not completed yet
  ///
  /// This is also the temporary status of a reverse swap when restoring a node, until `sync` finishes.
  Initial,

  /// HODL invoice payment was successfully triggered and confirmed by Boltz, but the reverse swap
  /// is not yet complete
  InProgress,

  /// An explicit error occurs (validation error, failure reported by Boltz, expiration, etc) and
  /// the initial invoice funds are returned to the sender (invoice is cancelled or payment failed)
  Cancelled,

  /// Successfully completed (claim tx has been seen in the mempool)
  CompletedSeen,

  /// Successfully completed (claim tx has at least one confirmation)
  CompletedConfirmed,
}

class RouteHint {
  final List<RouteHintHop> hops;

  const RouteHint({
    required this.hops,
  });
}

class RouteHintHop {
  final String srcNodeId;
  final String shortChannelId;
  final int feesBaseMsat;
  final int feesProportionalMillionths;
  final int cltvExpiryDelta;
  final int? htlcMinimumMsat;
  final int? htlcMaximumMsat;

  const RouteHintHop({
    required this.srcNodeId,
    required this.shortChannelId,
    required this.feesBaseMsat,
    required this.feesProportionalMillionths,
    required this.cltvExpiryDelta,
    this.htlcMinimumMsat,
    this.htlcMaximumMsat,
  });
}

class SendOnchainRequest {
  final int amountSat;
  final String onchainRecipientAddress;
  final String pairHash;
  final int satPerVbyte;

  const SendOnchainRequest({
    required this.amountSat,
    required this.onchainRecipientAddress,
    required this.pairHash,
    required this.satPerVbyte,
  });
}

class SendOnchainResponse {
  final ReverseSwapInfo reverseSwapInfo;

  const SendOnchainResponse({
    required this.reverseSwapInfo,
  });
}

/// Represents a send payment request.
class SendPaymentRequest {
  /// The bolt11 invoice
  final String bolt11;

  /// Trampoline payments outsource pathfinding to the LSP. Trampoline payments can improve
  /// payment performance, but are generally more expensive in terms of fees and they
  /// compromise on privacy.
  final bool useTrampoline;

  /// The amount to pay in millisatoshis. Should only be set when `bolt11` is a zero-amount invoice.
  final int? amountMsat;

  /// The external label or identifier of the [Payment]
  final String? label;

  const SendPaymentRequest({
    required this.bolt11,
    required this.useTrampoline,
    this.amountMsat,
    this.label,
  });
}

/// Represents a send payment response.
class SendPaymentResponse {
  final Payment payment;

  const SendPaymentResponse({
    required this.payment,
  });
}

/// Represents a send spontaneous payment request.
class SendSpontaneousPaymentRequest {
  /// The node id to send this payment is
  final String nodeId;

  /// The amount in millisatoshis for this payment
  final int amountMsat;
  final List<TlvEntry>? extraTlvs;

  /// The external label or identifier of the [Payment]
  final String? label;

  const SendSpontaneousPaymentRequest({
    required this.nodeId,
    required this.amountMsat,
    this.extraTlvs,
    this.label,
  });
}

/// Represents a service health check response.
class ServiceHealthCheckResponse {
  final HealthCheckStatus status;

  const ServiceHealthCheckResponse({
    required this.status,
  });
}

/// Request to sign a message with the node's private key.
class SignMessageRequest {
  /// The message to be signed by the node's private key.
  final String message;

  const SignMessageRequest({
    required this.message,
  });
}

/// Response to a [SignMessageRequest].
class SignMessageResponse {
  /// The signature that covers the message of SignMessageRequest. Zbase
  /// encoded.
  final String signature;

  const SignMessageResponse({
    required this.signature,
  });
}

class StaticBackupRequest {
  final String workingDir;

  const StaticBackupRequest({
    required this.workingDir,
  });
}

class StaticBackupResponse {
  final List<String>? backup;

  const StaticBackupResponse({
    this.backup,
  });
}

@freezed
sealed class SuccessActionProcessed with _$SuccessActionProcessed {
  const factory SuccessActionProcessed.aes({
    required AesSuccessActionDataResult result,
  }) = SuccessActionProcessed_Aes;
  const factory SuccessActionProcessed.message({
    required MessageSuccessActionData data,
  }) = SuccessActionProcessed_Message;
  const factory SuccessActionProcessed.url({
    required UrlSuccessActionData data,
  }) = SuccessActionProcessed_Url;
}

enum SwapAmountType {
  Send,
  Receive,
}

/// Represents the details of an on-going swap.
///
/// Once this SwapInfo is created it will be monitored on-chain and its state is
/// saved to the persistent storage.
///
/// The SwapInfo has a status which changes accordingly, documented in [SwapStatus].
///
class SwapInfo {
  /// Bitcoin address for this swap. Sats sent to this address will be swapped.
  final String bitcoinAddress;

  /// Relative time lock start, received from [SwapperAPI::create_swap].
  final int createdAt;

  /// Relative time lock for the timeout for the script to be redeemed before swap fails.
  final int lockHeight;

  /// sha256 hash of preimage to used in the claim sript.
  final Uint8List paymentHash;

  /// Secret to claim the swap.
  final Uint8List preimage;

  /// Secret claim key for the bitcoin address.
  final Uint8List privateKey;

  /// Public key in binary format of the private claim private key.
  final Uint8List publicKey;

  /// The public key in binary format from the swapping service. Received from [SwapperAPI::create_swap].
  final Uint8List swapperPublicKey;

  /// The locking script for the generated bitcoin address. Received from [SwapperAPI::create_swap].
  final Uint8List script;

  /// bolt11 invoice to claim the sent funds.
  final String? bolt11;

  /// Amount of millisatoshis claimed from sent funds and paid for via bolt11 invoice.
  final int paidMsat;

  /// Total count of transactions sent to the swap address.
  final int totalIncomingTxs;

  /// Confirmed onchain sats to be claim with an bolt11 invoice or refunded if swap fails.
  final int confirmedSats;

  /// Unconfirmed sats waiting to be confirmed onchain.
  final int unconfirmedSats;

  /// Shows the current status of the swap, either `Initial` or `Expired`.
  final SwapStatus status;

  /// Transaction IDs for failed swap attempts.
  final List<String> refundTxIds;

  /// Refund transaction IDs for ongoing swap awaiting confirmation.
  final List<String> unconfirmedTxIds;

  /// Transaction IDs that have been confirmed on-chain.
  final List<String> confirmedTxIds;

  /// The minimum amount of sats one can send in order for the swap to succeed. Received from [SwapperAPI::create_swap].
  final int minAllowedDeposit;

  /// The maximum amount of sats one can send in order for the swap to succeed. This is determined based on `max_swapper_payable` and the node's local balance.
  final int maxAllowedDeposit;

  /// The absolute maximum value payable by the swapper. Received from [SwapperAPI::create_swap].
  final int maxSwapperPayable;

  /// Error reason for when swap fails.
  final String? lastRedeemError;

  /// The dynamic fees which is set if a channel opening is needed.
  ///
  /// This is an optional field for backward compatibility with swaps created before dynamic fees.
  ///
  /// Swaps created after dynamic fees were introduced always have this field set.
  final OpeningFeeParams? channelOpeningFees;

  /// The block height when the swap was confirmed.
  final int? confirmedAt;

  const SwapInfo({
    required this.bitcoinAddress,
    required this.createdAt,
    required this.lockHeight,
    required this.paymentHash,
    required this.preimage,
    required this.privateKey,
    required this.publicKey,
    required this.swapperPublicKey,
    required this.script,
    this.bolt11,
    required this.paidMsat,
    required this.totalIncomingTxs,
    required this.confirmedSats,
    required this.unconfirmedSats,
    required this.status,
    required this.refundTxIds,
    required this.unconfirmedTxIds,
    required this.confirmedTxIds,
    required this.minAllowedDeposit,
    required this.maxAllowedDeposit,
    required this.maxSwapperPayable,
    this.lastRedeemError,
    this.channelOpeningFees,
    this.confirmedAt,
  });
}

/// The status of a swap
enum SwapStatus {
  /// The swap address has been created and either there aren't any confirmed transactions associated with it
  /// or there are confirmed transactions that are bellow the lock timeout which means the funds are still
  /// eligible to be redeemed normally.
  Initial,
  WaitingConfirmation,
  Redeemable,
  Redeemed,

  /// The swap address has confirmed transactions associated with it and the lock timeout has passed since
  /// the earliest confirmed transaction. This means the only way to spend the funds from this address is by
  /// broadcasting a refund transaction.
  Refundable,
  Completed,
}

class Symbol {
  final String? grapheme;
  final String? template;
  final bool? rtl;
  final int? position;

  const Symbol({
    this.grapheme,
    this.template,
    this.rtl,
    this.position,
  });
}

/// Represents a TLV entry for a keysend payment.
class TlvEntry {
  /// The type field for the TLV
  final int fieldNumber;

  /// The value bytes for the TLV
  final Uint8List value;

  const TlvEntry({
    required this.fieldNumber,
    required this.value,
  });
}

/// UTXO known to the LN node
class UnspentTransactionOutput {
  final Uint8List txid;
  final int outnum;
  final int amountMillisatoshi;
  final String address;
  final bool reserved;

  const UnspentTransactionOutput({
    required this.txid,
    required this.outnum,
    required this.amountMillisatoshi,
    required this.address,
    required this.reserved,
  });
}

class UrlSuccessActionData {
  final String description;
  final String url;

  const UrlSuccessActionData({
    required this.description,
    required this.url,
  });
}

class BreezSdkCoreImpl implements BreezSdkCore {
  final BreezSdkCorePlatform _platform;
  factory BreezSdkCoreImpl(ExternalLibrary dylib) => BreezSdkCoreImpl.raw(BreezSdkCorePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory BreezSdkCoreImpl.wasm(FutureOr<WasmModule> module) => BreezSdkCoreImpl(module as ExternalLibrary);
  BreezSdkCoreImpl.raw(this._platform);
  Future<void> connect({required ConnectRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_connect_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_connect(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kConnectConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "connect",
        argNames: ["req"],
      );

  Future<bool> isInitialized({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_is_initialized(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kIsInitializedConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsInitializedConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "is_initialized",
        argNames: [],
      );

  Future<void> sync({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sync(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSyncConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync",
        argNames: [],
      );

  Future<NodeCredentials?> nodeCredentials({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_node_credentials(port_),
      parseSuccessData: _wire2api_opt_box_autoadd_node_credentials,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kNodeCredentialsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNodeCredentialsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "node_credentials",
        argNames: [],
      );

  Future<NodeState> nodeInfo({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_node_info(port_),
      parseSuccessData: _wire2api_node_state,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kNodeInfoConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNodeInfoConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "node_info",
        argNames: [],
      );

  Future<void> configureNode({required ConfigureNodeRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_configure_node_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_configure_node(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kConfigureNodeConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConfigureNodeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "configure_node",
        argNames: ["req"],
      );

  Future<void> disconnect({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_disconnect(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDisconnectConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisconnectConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "disconnect",
        argNames: [],
      );

  Future<SignMessageResponse> signMessage({required SignMessageRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_sign_message_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sign_message(port_, arg0),
      parseSuccessData: _wire2api_sign_message_response,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSignMessageConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSignMessageConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sign_message",
        argNames: ["req"],
      );

  Future<CheckMessageResponse> checkMessage({required CheckMessageRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_check_message_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_check_message(port_, arg0),
      parseSuccessData: _wire2api_check_message_response,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kCheckMessageConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCheckMessageConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "check_message",
        argNames: ["req"],
      );

  Future<Uint8List> mnemonicToSeed({required String phrase, dynamic hint}) {
    var arg0 = _platform.api2wire_String(phrase);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_mnemonic_to_seed(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kMnemonicToSeedConstMeta,
      argValues: [phrase],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMnemonicToSeedConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "mnemonic_to_seed",
        argNames: ["phrase"],
      );

  Future<Config> defaultConfig(
      {required EnvironmentType envType,
      required String apiKey,
      required NodeConfig nodeConfig,
      dynamic hint}) {
    var arg0 = api2wire_environment_type(envType);
    var arg1 = _platform.api2wire_String(apiKey);
    var arg2 = _platform.api2wire_box_autoadd_node_config(nodeConfig);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_default_config(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_config,
      parseErrorData: null,
      constMeta: kDefaultConfigConstMeta,
      argValues: [envType, apiKey, nodeConfig],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDefaultConfigConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "default_config",
        argNames: ["envType", "apiKey", "nodeConfig"],
      );

  Future<StaticBackupResponse> staticBackup({required StaticBackupRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_static_backup_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_static_backup(port_, arg0),
      parseSuccessData: _wire2api_static_backup_response,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kStaticBackupConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStaticBackupConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "static_backup",
        argNames: ["req"],
      );

  Future<ServiceHealthCheckResponse> serviceHealthCheck({required String apiKey, dynamic hint}) {
    var arg0 = _platform.api2wire_String(apiKey);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_service_health_check(port_, arg0),
      parseSuccessData: _wire2api_service_health_check_response,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kServiceHealthCheckConstMeta,
      argValues: [apiKey],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kServiceHealthCheckConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "service_health_check",
        argNames: ["apiKey"],
      );

  Stream<BreezEvent> breezEventsStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_breez_events_stream(port_),
      parseSuccessData: _wire2api_breez_event,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kBreezEventsStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBreezEventsStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "breez_events_stream",
        argNames: [],
      );

  Stream<LogEntry> breezLogStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_breez_log_stream(port_),
      parseSuccessData: _wire2api_log_entry,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kBreezLogStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBreezLogStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "breez_log_stream",
        argNames: [],
      );

  Future<List<LspInformation>> listLsps({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_lsps(port_),
      parseSuccessData: _wire2api_list_lsp_information,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kListLspsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListLspsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "list_lsps",
        argNames: [],
      );

  Future<void> connectLsp({required String lspId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(lspId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_connect_lsp(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kConnectLspConstMeta,
      argValues: [lspId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectLspConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "connect_lsp",
        argNames: ["lspId"],
      );

  Future<String?> lspId({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_lsp_id(port_),
      parseSuccessData: _wire2api_opt_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kLspIdConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLspIdConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "lsp_id",
        argNames: [],
      );

  Future<LspInformation?> fetchLspInfo({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_fetch_lsp_info(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_lsp_information,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kFetchLspInfoConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFetchLspInfoConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "fetch_lsp_info",
        argNames: ["id"],
      );

  Future<LspInformation> lspInfo({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_lsp_info(port_),
      parseSuccessData: _wire2api_lsp_information,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kLspInfoConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLspInfoConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "lsp_info",
        argNames: [],
      );

  Future<void> closeLspChannels({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_close_lsp_channels(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kCloseLspChannelsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCloseLspChannelsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "close_lsp_channels",
        argNames: [],
      );

  Future<void> registerWebhook({required String webhookUrl, dynamic hint}) {
    var arg0 = _platform.api2wire_String(webhookUrl);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_register_webhook(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kRegisterWebhookConstMeta,
      argValues: [webhookUrl],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRegisterWebhookConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "register_webhook",
        argNames: ["webhookUrl"],
      );

  Future<void> unregisterWebhook({required String webhookUrl, dynamic hint}) {
    var arg0 = _platform.api2wire_String(webhookUrl);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_unregister_webhook(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kUnregisterWebhookConstMeta,
      argValues: [webhookUrl],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUnregisterWebhookConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "unregister_webhook",
        argNames: ["webhookUrl"],
      );

  Future<void> backup({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_backup(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kBackupConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBackupConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "backup",
        argNames: [],
      );

  Future<BackupStatus> backupStatus({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_backup_status(port_),
      parseSuccessData: _wire2api_backup_status,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kBackupStatusConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBackupStatusConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "backup_status",
        argNames: [],
      );

  Future<LNInvoice> parseInvoice({required String invoice, dynamic hint}) {
    var arg0 = _platform.api2wire_String(invoice);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_parse_invoice(port_, arg0),
      parseSuccessData: _wire2api_ln_invoice,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kParseInvoiceConstMeta,
      argValues: [invoice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kParseInvoiceConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "parse_invoice",
        argNames: ["invoice"],
      );

  Future<InputType> parseInput({required String input, dynamic hint}) {
    var arg0 = _platform.api2wire_String(input);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_parse_input(port_, arg0),
      parseSuccessData: _wire2api_input_type,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kParseInputConstMeta,
      argValues: [input],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kParseInputConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "parse_input",
        argNames: ["input"],
      );

  Future<List<Payment>> listPayments({required ListPaymentsRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_list_payments_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_payments(port_, arg0),
      parseSuccessData: _wire2api_list_payment,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kListPaymentsConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListPaymentsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "list_payments",
        argNames: ["req"],
      );

  Future<Payment?> paymentByHash({required String hash, dynamic hint}) {
    var arg0 = _platform.api2wire_String(hash);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_payment_by_hash(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_payment,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kPaymentByHashConstMeta,
      argValues: [hash],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPaymentByHashConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "payment_by_hash",
        argNames: ["hash"],
      );

  Future<void> setPaymentMetadata({required String hash, required String metadata, dynamic hint}) {
    var arg0 = _platform.api2wire_String(hash);
    var arg1 = _platform.api2wire_String(metadata);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_payment_metadata(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSetPaymentMetadataConstMeta,
      argValues: [hash, metadata],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetPaymentMetadataConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "set_payment_metadata",
        argNames: ["hash", "metadata"],
      );

  Future<SendPaymentResponse> sendPayment({required SendPaymentRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_send_payment_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_send_payment(port_, arg0),
      parseSuccessData: _wire2api_send_payment_response,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSendPaymentConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendPaymentConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "send_payment",
        argNames: ["req"],
      );

  Future<SendPaymentResponse> sendSpontaneousPayment(
      {required SendSpontaneousPaymentRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_send_spontaneous_payment_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_send_spontaneous_payment(port_, arg0),
      parseSuccessData: _wire2api_send_payment_response,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSendSpontaneousPaymentConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendSpontaneousPaymentConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "send_spontaneous_payment",
        argNames: ["req"],
      );

  Future<ReceivePaymentResponse> receivePayment({required ReceivePaymentRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_receive_payment_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_receive_payment(port_, arg0),
      parseSuccessData: _wire2api_receive_payment_response,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kReceivePaymentConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReceivePaymentConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "receive_payment",
        argNames: ["req"],
      );

  Future<LnUrlPayResult> lnurlPay({required LnUrlPayRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ln_url_pay_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_lnurl_pay(port_, arg0),
      parseSuccessData: _wire2api_ln_url_pay_result,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kLnurlPayConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLnurlPayConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "lnurl_pay",
        argNames: ["req"],
      );

  Future<LnUrlWithdrawResult> lnurlWithdraw({required LnUrlWithdrawRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ln_url_withdraw_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_lnurl_withdraw(port_, arg0),
      parseSuccessData: _wire2api_ln_url_withdraw_result,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kLnurlWithdrawConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLnurlWithdrawConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "lnurl_withdraw",
        argNames: ["req"],
      );

  Future<LnUrlCallbackStatus> lnurlAuth({required LnUrlAuthRequestData reqData, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ln_url_auth_request_data(reqData);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_lnurl_auth(port_, arg0),
      parseSuccessData: _wire2api_ln_url_callback_status,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kLnurlAuthConstMeta,
      argValues: [reqData],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLnurlAuthConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "lnurl_auth",
        argNames: ["reqData"],
      );

  Future<void> reportIssue({required ReportIssueRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_report_issue_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_report_issue(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kReportIssueConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReportIssueConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "report_issue",
        argNames: ["req"],
      );

  Future<List<Rate>> fetchFiatRates({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_fetch_fiat_rates(port_),
      parseSuccessData: _wire2api_list_rate,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kFetchFiatRatesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFetchFiatRatesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "fetch_fiat_rates",
        argNames: [],
      );

  Future<List<FiatCurrency>> listFiatCurrencies({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_fiat_currencies(port_),
      parseSuccessData: _wire2api_list_fiat_currency,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kListFiatCurrenciesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListFiatCurrenciesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "list_fiat_currencies",
        argNames: [],
      );

  Future<MaxReverseSwapAmountResponse> maxReverseSwapAmount({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_max_reverse_swap_amount(port_),
      parseSuccessData: _wire2api_max_reverse_swap_amount_response,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kMaxReverseSwapAmountConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMaxReverseSwapAmountConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "max_reverse_swap_amount",
        argNames: [],
      );

  Future<SendOnchainResponse> sendOnchain({required SendOnchainRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_send_onchain_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_send_onchain(port_, arg0),
      parseSuccessData: _wire2api_send_onchain_response,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kSendOnchainConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendOnchainConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "send_onchain",
        argNames: ["req"],
      );

  Future<PayOnchainResponse> payOnchain({required PayOnchainRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_pay_onchain_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_pay_onchain(port_, arg0),
      parseSuccessData: _wire2api_pay_onchain_response,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kPayOnchainConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPayOnchainConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "pay_onchain",
        argNames: ["req"],
      );

  Future<SwapInfo> receiveOnchain({required ReceiveOnchainRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_receive_onchain_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_receive_onchain(port_, arg0),
      parseSuccessData: _wire2api_swap_info,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kReceiveOnchainConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReceiveOnchainConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "receive_onchain",
        argNames: ["req"],
      );

  Future<BuyBitcoinResponse> buyBitcoin({required BuyBitcoinRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_buy_bitcoin_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_buy_bitcoin(port_, arg0),
      parseSuccessData: _wire2api_buy_bitcoin_response,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kBuyBitcoinConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBuyBitcoinConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "buy_bitcoin",
        argNames: ["req"],
      );

  Future<RedeemOnchainFundsResponse> redeemOnchainFunds(
      {required RedeemOnchainFundsRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_redeem_onchain_funds_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_redeem_onchain_funds(port_, arg0),
      parseSuccessData: _wire2api_redeem_onchain_funds_response,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kRedeemOnchainFundsConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRedeemOnchainFundsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "redeem_onchain_funds",
        argNames: ["req"],
      );

  Future<PrepareRedeemOnchainFundsResponse> prepareRedeemOnchainFunds(
      {required PrepareRedeemOnchainFundsRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_prepare_redeem_onchain_funds_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_prepare_redeem_onchain_funds(port_, arg0),
      parseSuccessData: _wire2api_prepare_redeem_onchain_funds_response,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kPrepareRedeemOnchainFundsConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrepareRedeemOnchainFundsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_redeem_onchain_funds",
        argNames: ["req"],
      );

  Future<List<SwapInfo>> listRefundables({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_refundables(port_),
      parseSuccessData: _wire2api_list_swap_info,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kListRefundablesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListRefundablesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "list_refundables",
        argNames: [],
      );

  Future<PrepareRefundResponse> prepareRefund({required PrepareRefundRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_prepare_refund_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_prepare_refund(port_, arg0),
      parseSuccessData: _wire2api_prepare_refund_response,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kPrepareRefundConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrepareRefundConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_refund",
        argNames: ["req"],
      );

  Future<RefundResponse> refund({required RefundRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_refund_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_refund(port_, arg0),
      parseSuccessData: _wire2api_refund_response,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kRefundConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRefundConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "refund",
        argNames: ["req"],
      );

  Future<void> rescanSwaps({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_rescan_swaps(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kRescanSwapsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRescanSwapsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "rescan_swaps",
        argNames: [],
      );

  Future<void> redeemSwap({required String swapAddress, dynamic hint}) {
    var arg0 = _platform.api2wire_String(swapAddress);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_redeem_swap(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kRedeemSwapConstMeta,
      argValues: [swapAddress],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRedeemSwapConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "redeem_swap",
        argNames: ["swapAddress"],
      );

  Future<SwapInfo?> inProgressSwap({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_in_progress_swap(port_),
      parseSuccessData: _wire2api_opt_box_autoadd_swap_info,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kInProgressSwapConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInProgressSwapConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "in_progress_swap",
        argNames: [],
      );

  Future<List<ReverseSwapInfo>> inProgressReverseSwaps({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_in_progress_reverse_swaps(port_),
      parseSuccessData: _wire2api_list_reverse_swap_info,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kInProgressReverseSwapsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInProgressReverseSwapsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "in_progress_reverse_swaps",
        argNames: [],
      );

  Future<void> claimReverseSwap({required String lockupAddress, dynamic hint}) {
    var arg0 = _platform.api2wire_String(lockupAddress);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_claim_reverse_swap(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kClaimReverseSwapConstMeta,
      argValues: [lockupAddress],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kClaimReverseSwapConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "claim_reverse_swap",
        argNames: ["lockupAddress"],
      );

  Future<OpenChannelFeeResponse> openChannelFee({required OpenChannelFeeRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_open_channel_fee_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_open_channel_fee(port_, arg0),
      parseSuccessData: _wire2api_open_channel_fee_response,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kOpenChannelFeeConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOpenChannelFeeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "open_channel_fee",
        argNames: ["req"],
      );

  Future<ReverseSwapPairInfo> fetchReverseSwapFees({required ReverseSwapFeesRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_reverse_swap_fees_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_fetch_reverse_swap_fees(port_, arg0),
      parseSuccessData: _wire2api_reverse_swap_pair_info,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kFetchReverseSwapFeesConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFetchReverseSwapFeesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "fetch_reverse_swap_fees",
        argNames: ["req"],
      );

  Future<OnchainPaymentLimitsResponse> onchainPaymentLimits({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_onchain_payment_limits(port_),
      parseSuccessData: _wire2api_onchain_payment_limits_response,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kOnchainPaymentLimitsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOnchainPaymentLimitsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "onchain_payment_limits",
        argNames: [],
      );

  Future<PrepareOnchainPaymentResponse> prepareOnchainPayment(
      {required PrepareOnchainPaymentRequest req, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_prepare_onchain_payment_request(req);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_prepare_onchain_payment(port_, arg0),
      parseSuccessData: _wire2api_prepare_onchain_payment_response,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kPrepareOnchainPaymentConstMeta,
      argValues: [req],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPrepareOnchainPaymentConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "prepare_onchain_payment",
        argNames: ["req"],
      );

  Future<List<ReverseSwapInfo>> inProgressOnchainPayments({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_in_progress_onchain_payments(port_),
      parseSuccessData: _wire2api_list_reverse_swap_info,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kInProgressOnchainPaymentsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInProgressOnchainPaymentsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "in_progress_onchain_payments",
        argNames: [],
      );

  Future<RecommendedFees> recommendedFees({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_recommended_fees(port_),
      parseSuccessData: _wire2api_recommended_fees,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kRecommendedFeesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRecommendedFeesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "recommended_fees",
        argNames: [],
      );

  Future<String> executeCommand({required String command, dynamic hint}) {
    var arg0 = _platform.api2wire_String(command);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_execute_command(port_, arg0),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kExecuteCommandConstMeta,
      argValues: [command],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kExecuteCommandConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "execute_command",
        argNames: ["command"],
      );

  Future<String> generateDiagnosticData({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_generate_diagnostic_data(port_),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kGenerateDiagnosticDataConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGenerateDiagnosticDataConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_diagnostic_data",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  FrbAnyhowException _wire2api_FrbAnyhowException(dynamic raw) {
    return FrbAnyhowException(raw as String);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  AesSuccessActionDataDecrypted _wire2api_aes_success_action_data_decrypted(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AesSuccessActionDataDecrypted(
      description: _wire2api_String(arr[0]),
      plaintext: _wire2api_String(arr[1]),
    );
  }

  AesSuccessActionDataResult _wire2api_aes_success_action_data_result(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return AesSuccessActionDataResult_Decrypted(
          data: _wire2api_box_autoadd_aes_success_action_data_decrypted(raw[1]),
        );
      case 1:
        return AesSuccessActionDataResult_ErrorStatus(
          reason: _wire2api_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  BackupFailedData _wire2api_backup_failed_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BackupFailedData(
      error: _wire2api_String(arr[0]),
    );
  }

  BackupStatus _wire2api_backup_status(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BackupStatus(
      backedUp: _wire2api_bool(arr[0]),
      lastBackupTime: _wire2api_opt_box_autoadd_u64(arr[1]),
    );
  }

  BitcoinAddressData _wire2api_bitcoin_address_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return BitcoinAddressData(
      address: _wire2api_String(arr[0]),
      network: _wire2api_network(arr[1]),
      amountSat: _wire2api_opt_box_autoadd_u64(arr[2]),
      label: _wire2api_opt_String(arr[3]),
      message: _wire2api_opt_String(arr[4]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  AesSuccessActionDataDecrypted _wire2api_box_autoadd_aes_success_action_data_decrypted(dynamic raw) {
    return _wire2api_aes_success_action_data_decrypted(raw);
  }

  AesSuccessActionDataResult _wire2api_box_autoadd_aes_success_action_data_result(dynamic raw) {
    return _wire2api_aes_success_action_data_result(raw);
  }

  BackupFailedData _wire2api_box_autoadd_backup_failed_data(dynamic raw) {
    return _wire2api_backup_failed_data(raw);
  }

  BitcoinAddressData _wire2api_box_autoadd_bitcoin_address_data(dynamic raw) {
    return _wire2api_bitcoin_address_data(raw);
  }

  bool _wire2api_box_autoadd_bool(dynamic raw) {
    return raw as bool;
  }

  ClosedChannelPaymentDetails _wire2api_box_autoadd_closed_channel_payment_details(dynamic raw) {
    return _wire2api_closed_channel_payment_details(raw);
  }

  GreenlightCredentials _wire2api_box_autoadd_greenlight_credentials(dynamic raw) {
    return _wire2api_greenlight_credentials(raw);
  }

  GreenlightDeviceCredentials _wire2api_box_autoadd_greenlight_device_credentials(dynamic raw) {
    return _wire2api_greenlight_device_credentials(raw);
  }

  GreenlightNodeConfig _wire2api_box_autoadd_greenlight_node_config(dynamic raw) {
    return _wire2api_greenlight_node_config(raw);
  }

  InvoicePaidDetails _wire2api_box_autoadd_invoice_paid_details(dynamic raw) {
    return _wire2api_invoice_paid_details(raw);
  }

  LNInvoice _wire2api_box_autoadd_ln_invoice(dynamic raw) {
    return _wire2api_ln_invoice(raw);
  }

  LnPaymentDetails _wire2api_box_autoadd_ln_payment_details(dynamic raw) {
    return _wire2api_ln_payment_details(raw);
  }

  LnUrlAuthRequestData _wire2api_box_autoadd_ln_url_auth_request_data(dynamic raw) {
    return _wire2api_ln_url_auth_request_data(raw);
  }

  LnUrlErrorData _wire2api_box_autoadd_ln_url_error_data(dynamic raw) {
    return _wire2api_ln_url_error_data(raw);
  }

  LnUrlPayErrorData _wire2api_box_autoadd_ln_url_pay_error_data(dynamic raw) {
    return _wire2api_ln_url_pay_error_data(raw);
  }

  LnUrlPayRequestData _wire2api_box_autoadd_ln_url_pay_request_data(dynamic raw) {
    return _wire2api_ln_url_pay_request_data(raw);
  }

  LnUrlPaySuccessData _wire2api_box_autoadd_ln_url_pay_success_data(dynamic raw) {
    return _wire2api_ln_url_pay_success_data(raw);
  }

  LnUrlWithdrawRequestData _wire2api_box_autoadd_ln_url_withdraw_request_data(dynamic raw) {
    return _wire2api_ln_url_withdraw_request_data(raw);
  }

  LnUrlWithdrawSuccessData _wire2api_box_autoadd_ln_url_withdraw_success_data(dynamic raw) {
    return _wire2api_ln_url_withdraw_success_data(raw);
  }

  LspInformation _wire2api_box_autoadd_lsp_information(dynamic raw) {
    return _wire2api_lsp_information(raw);
  }

  MessageSuccessActionData _wire2api_box_autoadd_message_success_action_data(dynamic raw) {
    return _wire2api_message_success_action_data(raw);
  }

  NodeCredentials _wire2api_box_autoadd_node_credentials(dynamic raw) {
    return _wire2api_node_credentials(raw);
  }

  OpeningFeeParams _wire2api_box_autoadd_opening_fee_params(dynamic raw) {
    return _wire2api_opening_fee_params(raw);
  }

  Payment _wire2api_box_autoadd_payment(dynamic raw) {
    return _wire2api_payment(raw);
  }

  PaymentFailedData _wire2api_box_autoadd_payment_failed_data(dynamic raw) {
    return _wire2api_payment_failed_data(raw);
  }

  ReverseSwapInfo _wire2api_box_autoadd_reverse_swap_info(dynamic raw) {
    return _wire2api_reverse_swap_info(raw);
  }

  SuccessActionProcessed _wire2api_box_autoadd_success_action_processed(dynamic raw) {
    return _wire2api_success_action_processed(raw);
  }

  SwapInfo _wire2api_box_autoadd_swap_info(dynamic raw) {
    return _wire2api_swap_info(raw);
  }

  Symbol _wire2api_box_autoadd_symbol(dynamic raw) {
    return _wire2api_symbol(raw);
  }

  int _wire2api_box_autoadd_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_box_autoadd_u64(dynamic raw) {
    return _wire2api_u64(raw);
  }

  UrlSuccessActionData _wire2api_box_autoadd_url_success_action_data(dynamic raw) {
    return _wire2api_url_success_action_data(raw);
  }

  BreezEvent _wire2api_breez_event(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return BreezEvent_NewBlock(
          block: _wire2api_u32(raw[1]),
        );
      case 1:
        return BreezEvent_InvoicePaid(
          details: _wire2api_box_autoadd_invoice_paid_details(raw[1]),
        );
      case 2:
        return BreezEvent_Synced();
      case 3:
        return BreezEvent_PaymentSucceed(
          details: _wire2api_box_autoadd_payment(raw[1]),
        );
      case 4:
        return BreezEvent_PaymentFailed(
          details: _wire2api_box_autoadd_payment_failed_data(raw[1]),
        );
      case 5:
        return BreezEvent_BackupStarted();
      case 6:
        return BreezEvent_BackupSucceeded();
      case 7:
        return BreezEvent_BackupFailed(
          details: _wire2api_box_autoadd_backup_failed_data(raw[1]),
        );
      case 8:
        return BreezEvent_ReverseSwapUpdated(
          details: _wire2api_box_autoadd_reverse_swap_info(raw[1]),
        );
      case 9:
        return BreezEvent_SwapUpdated(
          details: _wire2api_box_autoadd_swap_info(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  BuyBitcoinResponse _wire2api_buy_bitcoin_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BuyBitcoinResponse(
      url: _wire2api_String(arr[0]),
      openingFeeParams: _wire2api_opt_box_autoadd_opening_fee_params(arr[1]),
    );
  }

  ChannelState _wire2api_channel_state(dynamic raw) {
    return ChannelState.values[raw as int];
  }

  CheckMessageResponse _wire2api_check_message_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CheckMessageResponse(
      isValid: _wire2api_bool(arr[0]),
    );
  }

  ClosedChannelPaymentDetails _wire2api_closed_channel_payment_details(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ClosedChannelPaymentDetails(
      state: _wire2api_channel_state(arr[0]),
      fundingTxid: _wire2api_String(arr[1]),
      shortChannelId: _wire2api_opt_String(arr[2]),
      closingTxid: _wire2api_opt_String(arr[3]),
    );
  }

  Config _wire2api_config(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 11) throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return Config(
      breezserver: _wire2api_String(arr[0]),
      chainnotifierUrl: _wire2api_String(arr[1]),
      mempoolspaceUrl: _wire2api_opt_String(arr[2]),
      workingDir: _wire2api_String(arr[3]),
      network: _wire2api_network(arr[4]),
      paymentTimeoutSec: _wire2api_u32(arr[5]),
      defaultLspId: _wire2api_opt_String(arr[6]),
      apiKey: _wire2api_opt_String(arr[7]),
      maxfeePercent: _wire2api_f64(arr[8]),
      exemptfeeMsat: _wire2api_u64(arr[9]),
      nodeConfig: _wire2api_node_config(arr[10]),
    );
  }

  CurrencyInfo _wire2api_currency_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7) throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return CurrencyInfo(
      name: _wire2api_String(arr[0]),
      fractionSize: _wire2api_u32(arr[1]),
      spacing: _wire2api_opt_box_autoadd_u32(arr[2]),
      symbol: _wire2api_opt_box_autoadd_symbol(arr[3]),
      uniqSymbol: _wire2api_opt_box_autoadd_symbol(arr[4]),
      localizedName: _wire2api_list_localized_name(arr[5]),
      localeOverrides: _wire2api_list_locale_overrides(arr[6]),
    );
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  FiatCurrency _wire2api_fiat_currency(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FiatCurrency(
      id: _wire2api_String(arr[0]),
      info: _wire2api_currency_info(arr[1]),
    );
  }

  GreenlightCredentials _wire2api_greenlight_credentials(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GreenlightCredentials(
      developerKey: _wire2api_uint_8_list(arr[0]),
      developerCert: _wire2api_uint_8_list(arr[1]),
    );
  }

  GreenlightDeviceCredentials _wire2api_greenlight_device_credentials(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return GreenlightDeviceCredentials(
      device: _wire2api_uint_8_list(arr[0]),
    );
  }

  GreenlightNodeConfig _wire2api_greenlight_node_config(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GreenlightNodeConfig(
      partnerCredentials: _wire2api_opt_box_autoadd_greenlight_credentials(arr[0]),
      inviteCode: _wire2api_opt_String(arr[1]),
    );
  }

  HealthCheckStatus _wire2api_health_check_status(dynamic raw) {
    return HealthCheckStatus.values[raw as int];
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  InputType _wire2api_input_type(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return InputType_BitcoinAddress(
          address: _wire2api_box_autoadd_bitcoin_address_data(raw[1]),
        );
      case 1:
        return InputType_Bolt11(
          invoice: _wire2api_box_autoadd_ln_invoice(raw[1]),
        );
      case 2:
        return InputType_NodeId(
          nodeId: _wire2api_String(raw[1]),
        );
      case 3:
        return InputType_Url(
          url: _wire2api_String(raw[1]),
        );
      case 4:
        return InputType_LnUrlPay(
          data: _wire2api_box_autoadd_ln_url_pay_request_data(raw[1]),
        );
      case 5:
        return InputType_LnUrlWithdraw(
          data: _wire2api_box_autoadd_ln_url_withdraw_request_data(raw[1]),
        );
      case 6:
        return InputType_LnUrlAuth(
          data: _wire2api_box_autoadd_ln_url_auth_request_data(raw[1]),
        );
      case 7:
        return InputType_LnUrlError(
          data: _wire2api_box_autoadd_ln_url_error_data(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  InvoicePaidDetails _wire2api_invoice_paid_details(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return InvoicePaidDetails(
      paymentHash: _wire2api_String(arr[0]),
      bolt11: _wire2api_String(arr[1]),
      payment: _wire2api_opt_box_autoadd_payment(arr[2]),
    );
  }

  List<FiatCurrency> _wire2api_list_fiat_currency(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_fiat_currency).toList();
  }

  List<LocaleOverrides> _wire2api_list_locale_overrides(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_locale_overrides).toList();
  }

  List<LocalizedName> _wire2api_list_localized_name(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_localized_name).toList();
  }

  List<LspInformation> _wire2api_list_lsp_information(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_lsp_information).toList();
  }

  List<OpeningFeeParams> _wire2api_list_opening_fee_params(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_opening_fee_params).toList();
  }

  List<Payment> _wire2api_list_payment(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_payment).toList();
  }

  List<Rate> _wire2api_list_rate(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_rate).toList();
  }

  List<ReverseSwapInfo> _wire2api_list_reverse_swap_info(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_reverse_swap_info).toList();
  }

  List<RouteHint> _wire2api_list_route_hint(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_route_hint).toList();
  }

  List<RouteHintHop> _wire2api_list_route_hint_hop(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_route_hint_hop).toList();
  }

  List<SwapInfo> _wire2api_list_swap_info(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_swap_info).toList();
  }

  List<UnspentTransactionOutput> _wire2api_list_unspent_transaction_output(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_unspent_transaction_output).toList();
  }

  LNInvoice _wire2api_ln_invoice(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 12) throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return LNInvoice(
      bolt11: _wire2api_String(arr[0]),
      network: _wire2api_network(arr[1]),
      payeePubkey: _wire2api_String(arr[2]),
      paymentHash: _wire2api_String(arr[3]),
      description: _wire2api_opt_String(arr[4]),
      descriptionHash: _wire2api_opt_String(arr[5]),
      amountMsat: _wire2api_opt_box_autoadd_u64(arr[6]),
      timestamp: _wire2api_u64(arr[7]),
      expiry: _wire2api_u64(arr[8]),
      routingHints: _wire2api_list_route_hint(arr[9]),
      paymentSecret: _wire2api_uint_8_list(arr[10]),
      minFinalCltvExpiryDelta: _wire2api_u64(arr[11]),
    );
  }

  LnPaymentDetails _wire2api_ln_payment_details(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 16) throw Exception('unexpected arr length: expect 16 but see ${arr.length}');
    return LnPaymentDetails(
      paymentHash: _wire2api_String(arr[0]),
      label: _wire2api_String(arr[1]),
      destinationPubkey: _wire2api_String(arr[2]),
      paymentPreimage: _wire2api_String(arr[3]),
      keysend: _wire2api_bool(arr[4]),
      bolt11: _wire2api_String(arr[5]),
      openChannelBolt11: _wire2api_opt_String(arr[6]),
      lnurlSuccessAction: _wire2api_opt_box_autoadd_success_action_processed(arr[7]),
      lnurlPayDomain: _wire2api_opt_String(arr[8]),
      lnurlPayComment: _wire2api_opt_String(arr[9]),
      lnAddress: _wire2api_opt_String(arr[10]),
      lnurlMetadata: _wire2api_opt_String(arr[11]),
      lnurlWithdrawEndpoint: _wire2api_opt_String(arr[12]),
      swapInfo: _wire2api_opt_box_autoadd_swap_info(arr[13]),
      reverseSwapInfo: _wire2api_opt_box_autoadd_reverse_swap_info(arr[14]),
      pendingExpirationBlock: _wire2api_opt_box_autoadd_u32(arr[15]),
    );
  }

  LnUrlAuthRequestData _wire2api_ln_url_auth_request_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LnUrlAuthRequestData(
      k1: _wire2api_String(arr[0]),
      action: _wire2api_opt_String(arr[1]),
      domain: _wire2api_String(arr[2]),
      url: _wire2api_String(arr[3]),
    );
  }

  LnUrlCallbackStatus _wire2api_ln_url_callback_status(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return LnUrlCallbackStatus_Ok();
      case 1:
        return LnUrlCallbackStatus_ErrorStatus(
          data: _wire2api_box_autoadd_ln_url_error_data(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  LnUrlErrorData _wire2api_ln_url_error_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LnUrlErrorData(
      reason: _wire2api_String(arr[0]),
    );
  }

  LnUrlPayErrorData _wire2api_ln_url_pay_error_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LnUrlPayErrorData(
      paymentHash: _wire2api_String(arr[0]),
      reason: _wire2api_String(arr[1]),
    );
  }

  LnUrlPayRequestData _wire2api_ln_url_pay_request_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 9) throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return LnUrlPayRequestData(
      callback: _wire2api_String(arr[0]),
      minSendable: _wire2api_u64(arr[1]),
      maxSendable: _wire2api_u64(arr[2]),
      metadataStr: _wire2api_String(arr[3]),
      commentAllowed: _wire2api_u16(arr[4]),
      domain: _wire2api_String(arr[5]),
      allowsNostr: _wire2api_bool(arr[6]),
      nostrPubkey: _wire2api_opt_String(arr[7]),
      lnAddress: _wire2api_opt_String(arr[8]),
    );
  }

  LnUrlPayResult _wire2api_ln_url_pay_result(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return LnUrlPayResult_EndpointSuccess(
          data: _wire2api_box_autoadd_ln_url_pay_success_data(raw[1]),
        );
      case 1:
        return LnUrlPayResult_EndpointError(
          data: _wire2api_box_autoadd_ln_url_error_data(raw[1]),
        );
      case 2:
        return LnUrlPayResult_PayError(
          data: _wire2api_box_autoadd_ln_url_pay_error_data(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  LnUrlPaySuccessData _wire2api_ln_url_pay_success_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LnUrlPaySuccessData(
      payment: _wire2api_payment(arr[0]),
      successAction: _wire2api_opt_box_autoadd_success_action_processed(arr[1]),
    );
  }

  LnUrlWithdrawRequestData _wire2api_ln_url_withdraw_request_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return LnUrlWithdrawRequestData(
      callback: _wire2api_String(arr[0]),
      k1: _wire2api_String(arr[1]),
      defaultDescription: _wire2api_String(arr[2]),
      minWithdrawable: _wire2api_u64(arr[3]),
      maxWithdrawable: _wire2api_u64(arr[4]),
    );
  }

  LnUrlWithdrawResult _wire2api_ln_url_withdraw_result(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return LnUrlWithdrawResult_Ok(
          data: _wire2api_box_autoadd_ln_url_withdraw_success_data(raw[1]),
        );
      case 1:
        return LnUrlWithdrawResult_Timeout(
          data: _wire2api_box_autoadd_ln_url_withdraw_success_data(raw[1]),
        );
      case 2:
        return LnUrlWithdrawResult_ErrorStatus(
          data: _wire2api_box_autoadd_ln_url_error_data(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  LnUrlWithdrawSuccessData _wire2api_ln_url_withdraw_success_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LnUrlWithdrawSuccessData(
      invoice: _wire2api_ln_invoice(arr[0]),
    );
  }

  LocaleOverrides _wire2api_locale_overrides(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return LocaleOverrides(
      locale: _wire2api_String(arr[0]),
      spacing: _wire2api_opt_box_autoadd_u32(arr[1]),
      symbol: _wire2api_symbol(arr[2]),
    );
  }

  LocalizedName _wire2api_localized_name(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LocalizedName(
      locale: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
    );
  }

  LogEntry _wire2api_log_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LogEntry(
      line: _wire2api_String(arr[0]),
      level: _wire2api_String(arr[1]),
    );
  }

  LspInformation _wire2api_lsp_information(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 11) throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return LspInformation(
      id: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
      widgetUrl: _wire2api_String(arr[2]),
      pubkey: _wire2api_String(arr[3]),
      host: _wire2api_String(arr[4]),
      baseFeeMsat: _wire2api_i64(arr[5]),
      feeRate: _wire2api_f64(arr[6]),
      timeLockDelta: _wire2api_u32(arr[7]),
      minHtlcMsat: _wire2api_i64(arr[8]),
      lspPubkey: _wire2api_uint_8_list(arr[9]),
      openingFeeParamsList: _wire2api_opening_fee_params_menu(arr[10]),
    );
  }

  MaxReverseSwapAmountResponse _wire2api_max_reverse_swap_amount_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MaxReverseSwapAmountResponse(
      totalSat: _wire2api_u64(arr[0]),
    );
  }

  MessageSuccessActionData _wire2api_message_success_action_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageSuccessActionData(
      message: _wire2api_String(arr[0]),
    );
  }

  Network _wire2api_network(dynamic raw) {
    return Network.values[raw as int];
  }

  NodeConfig _wire2api_node_config(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return NodeConfig_Greenlight(
          config: _wire2api_box_autoadd_greenlight_node_config(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  NodeCredentials _wire2api_node_credentials(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return NodeCredentials_Greenlight(
          credentials: _wire2api_box_autoadd_greenlight_device_credentials(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  NodeState _wire2api_node_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 13) throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return NodeState(
      id: _wire2api_String(arr[0]),
      blockHeight: _wire2api_u32(arr[1]),
      channelsBalanceMsat: _wire2api_u64(arr[2]),
      onchainBalanceMsat: _wire2api_u64(arr[3]),
      pendingOnchainBalanceMsat: _wire2api_u64(arr[4]),
      utxos: _wire2api_list_unspent_transaction_output(arr[5]),
      maxPayableMsat: _wire2api_u64(arr[6]),
      maxReceivableMsat: _wire2api_u64(arr[7]),
      maxSinglePaymentAmountMsat: _wire2api_u64(arr[8]),
      maxChanReserveMsats: _wire2api_u64(arr[9]),
      connectedPeers: _wire2api_StringList(arr[10]),
      maxReceivableSinglePaymentAmountMsat: _wire2api_u64(arr[11]),
      totalInboundLiquidityMsats: _wire2api_u64(arr[12]),
    );
  }

  OnchainPaymentLimitsResponse _wire2api_onchain_payment_limits_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return OnchainPaymentLimitsResponse(
      minSat: _wire2api_u64(arr[0]),
      maxSat: _wire2api_u64(arr[1]),
      maxPayableSat: _wire2api_u64(arr[2]),
    );
  }

  OpenChannelFeeResponse _wire2api_open_channel_fee_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OpenChannelFeeResponse(
      feeMsat: _wire2api_opt_box_autoadd_u64(arr[0]),
      feeParams: _wire2api_opening_fee_params(arr[1]),
    );
  }

  OpeningFeeParams _wire2api_opening_fee_params(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6) throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return OpeningFeeParams(
      minMsat: _wire2api_u64(arr[0]),
      proportional: _wire2api_u32(arr[1]),
      validUntil: _wire2api_String(arr[2]),
      maxIdleTime: _wire2api_u32(arr[3]),
      maxClientToSelfDelay: _wire2api_u32(arr[4]),
      promise: _wire2api_String(arr[5]),
    );
  }

  OpeningFeeParamsMenu _wire2api_opening_fee_params_menu(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return OpeningFeeParamsMenu(
      values: _wire2api_list_opening_fee_params(arr[0]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  List<String>? _wire2api_opt_StringList(dynamic raw) {
    return raw == null ? null : _wire2api_StringList(raw);
  }

  bool? _wire2api_opt_box_autoadd_bool(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_bool(raw);
  }

  GreenlightCredentials? _wire2api_opt_box_autoadd_greenlight_credentials(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_greenlight_credentials(raw);
  }

  LNInvoice? _wire2api_opt_box_autoadd_ln_invoice(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_ln_invoice(raw);
  }

  LspInformation? _wire2api_opt_box_autoadd_lsp_information(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_lsp_information(raw);
  }

  NodeCredentials? _wire2api_opt_box_autoadd_node_credentials(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_node_credentials(raw);
  }

  OpeningFeeParams? _wire2api_opt_box_autoadd_opening_fee_params(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_opening_fee_params(raw);
  }

  Payment? _wire2api_opt_box_autoadd_payment(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_payment(raw);
  }

  ReverseSwapInfo? _wire2api_opt_box_autoadd_reverse_swap_info(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_reverse_swap_info(raw);
  }

  SuccessActionProcessed? _wire2api_opt_box_autoadd_success_action_processed(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_success_action_processed(raw);
  }

  SwapInfo? _wire2api_opt_box_autoadd_swap_info(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_swap_info(raw);
  }

  Symbol? _wire2api_opt_box_autoadd_symbol(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_symbol(raw);
  }

  int? _wire2api_opt_box_autoadd_u32(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u32(raw);
  }

  int? _wire2api_opt_box_autoadd_u64(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u64(raw);
  }

  PayOnchainResponse _wire2api_pay_onchain_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PayOnchainResponse(
      reverseSwapInfo: _wire2api_reverse_swap_info(arr[0]),
    );
  }

  Payment _wire2api_payment(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 10) throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return Payment(
      id: _wire2api_String(arr[0]),
      paymentType: _wire2api_payment_type(arr[1]),
      paymentTime: _wire2api_i64(arr[2]),
      amountMsat: _wire2api_u64(arr[3]),
      feeMsat: _wire2api_u64(arr[4]),
      status: _wire2api_payment_status(arr[5]),
      error: _wire2api_opt_String(arr[6]),
      description: _wire2api_opt_String(arr[7]),
      details: _wire2api_payment_details(arr[8]),
      metadata: _wire2api_opt_String(arr[9]),
    );
  }

  PaymentDetails _wire2api_payment_details(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return PaymentDetails_Ln(
          data: _wire2api_box_autoadd_ln_payment_details(raw[1]),
        );
      case 1:
        return PaymentDetails_ClosedChannel(
          data: _wire2api_box_autoadd_closed_channel_payment_details(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  PaymentFailedData _wire2api_payment_failed_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return PaymentFailedData(
      error: _wire2api_String(arr[0]),
      nodeId: _wire2api_String(arr[1]),
      invoice: _wire2api_opt_box_autoadd_ln_invoice(arr[2]),
      label: _wire2api_opt_String(arr[3]),
    );
  }

  PaymentStatus _wire2api_payment_status(dynamic raw) {
    return PaymentStatus.values[raw as int];
  }

  PaymentType _wire2api_payment_type(dynamic raw) {
    return PaymentType.values[raw as int];
  }

  PrepareOnchainPaymentResponse _wire2api_prepare_onchain_payment_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7) throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return PrepareOnchainPaymentResponse(
      feesHash: _wire2api_String(arr[0]),
      feesPercentage: _wire2api_f64(arr[1]),
      feesLockup: _wire2api_u64(arr[2]),
      feesClaim: _wire2api_u64(arr[3]),
      senderAmountSat: _wire2api_u64(arr[4]),
      recipientAmountSat: _wire2api_u64(arr[5]),
      totalFees: _wire2api_u64(arr[6]),
    );
  }

  PrepareRedeemOnchainFundsResponse _wire2api_prepare_redeem_onchain_funds_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PrepareRedeemOnchainFundsResponse(
      txWeight: _wire2api_u64(arr[0]),
      txFeeSat: _wire2api_u64(arr[1]),
    );
  }

  PrepareRefundResponse _wire2api_prepare_refund_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PrepareRefundResponse(
      refundTxWeight: _wire2api_u32(arr[0]),
      refundTxFeeSat: _wire2api_u64(arr[1]),
    );
  }

  Rate _wire2api_rate(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Rate(
      coin: _wire2api_String(arr[0]),
      value: _wire2api_f64(arr[1]),
    );
  }

  ReceivePaymentResponse _wire2api_receive_payment_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ReceivePaymentResponse(
      lnInvoice: _wire2api_ln_invoice(arr[0]),
      openingFeeParams: _wire2api_opt_box_autoadd_opening_fee_params(arr[1]),
      openingFeeMsat: _wire2api_opt_box_autoadd_u64(arr[2]),
    );
  }

  RecommendedFees _wire2api_recommended_fees(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return RecommendedFees(
      fastestFee: _wire2api_u64(arr[0]),
      halfHourFee: _wire2api_u64(arr[1]),
      hourFee: _wire2api_u64(arr[2]),
      economyFee: _wire2api_u64(arr[3]),
      minimumFee: _wire2api_u64(arr[4]),
    );
  }

  RedeemOnchainFundsResponse _wire2api_redeem_onchain_funds_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RedeemOnchainFundsResponse(
      txid: _wire2api_uint_8_list(arr[0]),
    );
  }

  RefundResponse _wire2api_refund_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RefundResponse(
      refundTxId: _wire2api_String(arr[0]),
    );
  }

  ReverseSwapInfo _wire2api_reverse_swap_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6) throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return ReverseSwapInfo(
      id: _wire2api_String(arr[0]),
      claimPubkey: _wire2api_String(arr[1]),
      lockupTxid: _wire2api_opt_String(arr[2]),
      claimTxid: _wire2api_opt_String(arr[3]),
      onchainAmountSat: _wire2api_u64(arr[4]),
      status: _wire2api_reverse_swap_status(arr[5]),
    );
  }

  ReverseSwapPairInfo _wire2api_reverse_swap_pair_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7) throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return ReverseSwapPairInfo(
      min: _wire2api_u64(arr[0]),
      max: _wire2api_u64(arr[1]),
      feesHash: _wire2api_String(arr[2]),
      feesPercentage: _wire2api_f64(arr[3]),
      feesLockup: _wire2api_u64(arr[4]),
      feesClaim: _wire2api_u64(arr[5]),
      totalFees: _wire2api_opt_box_autoadd_u64(arr[6]),
    );
  }

  ReverseSwapStatus _wire2api_reverse_swap_status(dynamic raw) {
    return ReverseSwapStatus.values[raw as int];
  }

  RouteHint _wire2api_route_hint(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RouteHint(
      hops: _wire2api_list_route_hint_hop(arr[0]),
    );
  }

  RouteHintHop _wire2api_route_hint_hop(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7) throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return RouteHintHop(
      srcNodeId: _wire2api_String(arr[0]),
      shortChannelId: _wire2api_String(arr[1]),
      feesBaseMsat: _wire2api_u32(arr[2]),
      feesProportionalMillionths: _wire2api_u32(arr[3]),
      cltvExpiryDelta: _wire2api_u64(arr[4]),
      htlcMinimumMsat: _wire2api_opt_box_autoadd_u64(arr[5]),
      htlcMaximumMsat: _wire2api_opt_box_autoadd_u64(arr[6]),
    );
  }

  SendOnchainResponse _wire2api_send_onchain_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SendOnchainResponse(
      reverseSwapInfo: _wire2api_reverse_swap_info(arr[0]),
    );
  }

  SendPaymentResponse _wire2api_send_payment_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SendPaymentResponse(
      payment: _wire2api_payment(arr[0]),
    );
  }

  ServiceHealthCheckResponse _wire2api_service_health_check_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ServiceHealthCheckResponse(
      status: _wire2api_health_check_status(arr[0]),
    );
  }

  SignMessageResponse _wire2api_sign_message_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SignMessageResponse(
      signature: _wire2api_String(arr[0]),
    );
  }

  StaticBackupResponse _wire2api_static_backup_response(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return StaticBackupResponse(
      backup: _wire2api_opt_StringList(arr[0]),
    );
  }

  SuccessActionProcessed _wire2api_success_action_processed(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return SuccessActionProcessed_Aes(
          result: _wire2api_box_autoadd_aes_success_action_data_result(raw[1]),
        );
      case 1:
        return SuccessActionProcessed_Message(
          data: _wire2api_box_autoadd_message_success_action_data(raw[1]),
        );
      case 2:
        return SuccessActionProcessed_Url(
          data: _wire2api_box_autoadd_url_success_action_data(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  SwapInfo _wire2api_swap_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 24) throw Exception('unexpected arr length: expect 24 but see ${arr.length}');
    return SwapInfo(
      bitcoinAddress: _wire2api_String(arr[0]),
      createdAt: _wire2api_i64(arr[1]),
      lockHeight: _wire2api_i64(arr[2]),
      paymentHash: _wire2api_uint_8_list(arr[3]),
      preimage: _wire2api_uint_8_list(arr[4]),
      privateKey: _wire2api_uint_8_list(arr[5]),
      publicKey: _wire2api_uint_8_list(arr[6]),
      swapperPublicKey: _wire2api_uint_8_list(arr[7]),
      script: _wire2api_uint_8_list(arr[8]),
      bolt11: _wire2api_opt_String(arr[9]),
      paidMsat: _wire2api_u64(arr[10]),
      totalIncomingTxs: _wire2api_u64(arr[11]),
      confirmedSats: _wire2api_u64(arr[12]),
      unconfirmedSats: _wire2api_u64(arr[13]),
      status: _wire2api_swap_status(arr[14]),
      refundTxIds: _wire2api_StringList(arr[15]),
      unconfirmedTxIds: _wire2api_StringList(arr[16]),
      confirmedTxIds: _wire2api_StringList(arr[17]),
      minAllowedDeposit: _wire2api_i64(arr[18]),
      maxAllowedDeposit: _wire2api_i64(arr[19]),
      maxSwapperPayable: _wire2api_i64(arr[20]),
      lastRedeemError: _wire2api_opt_String(arr[21]),
      channelOpeningFees: _wire2api_opt_box_autoadd_opening_fee_params(arr[22]),
      confirmedAt: _wire2api_opt_box_autoadd_u32(arr[23]),
    );
  }

  SwapStatus _wire2api_swap_status(dynamic raw) {
    return SwapStatus.values[raw as int];
  }

  Symbol _wire2api_symbol(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Symbol(
      grapheme: _wire2api_opt_String(arr[0]),
      template: _wire2api_opt_String(arr[1]),
      rtl: _wire2api_opt_box_autoadd_bool(arr[2]),
      position: _wire2api_opt_box_autoadd_u32(arr[3]),
    );
  }

  int _wire2api_u16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  UnspentTransactionOutput _wire2api_unspent_transaction_output(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return UnspentTransactionOutput(
      txid: _wire2api_uint_8_list(arr[0]),
      outnum: _wire2api_u32(arr[1]),
      amountMillisatoshi: _wire2api_u64(arr[2]),
      address: _wire2api_String(arr[3]),
      reserved: _wire2api_bool(arr[4]),
    );
  }

  UrlSuccessActionData _wire2api_url_success_action_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return UrlSuccessActionData(
      description: _wire2api_String(arr[0]),
      url: _wire2api_String(arr[1]),
    );
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_buy_bitcoin_provider(BuyBitcoinProvider raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_environment_type(EnvironmentType raw) {
  return api2wire_i32(raw.index);
}

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_network(Network raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_payment_type_filter(PaymentTypeFilter raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_swap_amount_type(SwapAmountType raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u16(int raw) {
  return raw;
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class BreezSdkCorePlatform extends FlutterRustBridgeBase<BreezSdkCoreWire> {
  BreezSdkCorePlatform(ffi.DynamicLibrary dylib) : super(BreezSdkCoreWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_box_autoadd_bool(bool raw) {
    return inner.new_box_autoadd_bool_0(api2wire_bool(raw));
  }

  @protected
  ffi.Pointer<wire_BuyBitcoinRequest> api2wire_box_autoadd_buy_bitcoin_request(BuyBitcoinRequest raw) {
    final ptr = inner.new_box_autoadd_buy_bitcoin_request_0();
    _api_fill_to_wire_buy_bitcoin_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_CheckMessageRequest> api2wire_box_autoadd_check_message_request(CheckMessageRequest raw) {
    final ptr = inner.new_box_autoadd_check_message_request_0();
    _api_fill_to_wire_check_message_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ConfigureNodeRequest> api2wire_box_autoadd_configure_node_request(
      ConfigureNodeRequest raw) {
    final ptr = inner.new_box_autoadd_configure_node_request_0();
    _api_fill_to_wire_configure_node_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ConnectRequest> api2wire_box_autoadd_connect_request(ConnectRequest raw) {
    final ptr = inner.new_box_autoadd_connect_request_0();
    _api_fill_to_wire_connect_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_GreenlightCredentials> api2wire_box_autoadd_greenlight_credentials(
      GreenlightCredentials raw) {
    final ptr = inner.new_box_autoadd_greenlight_credentials_0();
    _api_fill_to_wire_greenlight_credentials(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_GreenlightNodeConfig> api2wire_box_autoadd_greenlight_node_config(
      GreenlightNodeConfig raw) {
    final ptr = inner.new_box_autoadd_greenlight_node_config_0();
    _api_fill_to_wire_greenlight_node_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_box_autoadd_i64(int raw) {
    return inner.new_box_autoadd_i64_0(api2wire_i64(raw));
  }

  @protected
  ffi.Pointer<wire_ListPaymentsRequest> api2wire_box_autoadd_list_payments_request(ListPaymentsRequest raw) {
    final ptr = inner.new_box_autoadd_list_payments_request_0();
    _api_fill_to_wire_list_payments_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_LnUrlAuthRequestData> api2wire_box_autoadd_ln_url_auth_request_data(
      LnUrlAuthRequestData raw) {
    final ptr = inner.new_box_autoadd_ln_url_auth_request_data_0();
    _api_fill_to_wire_ln_url_auth_request_data(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_LnUrlPayRequest> api2wire_box_autoadd_ln_url_pay_request(LnUrlPayRequest raw) {
    final ptr = inner.new_box_autoadd_ln_url_pay_request_0();
    _api_fill_to_wire_ln_url_pay_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_LnUrlWithdrawRequest> api2wire_box_autoadd_ln_url_withdraw_request(
      LnUrlWithdrawRequest raw) {
    final ptr = inner.new_box_autoadd_ln_url_withdraw_request_0();
    _api_fill_to_wire_ln_url_withdraw_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_NodeConfig> api2wire_box_autoadd_node_config(NodeConfig raw) {
    final ptr = inner.new_box_autoadd_node_config_0();
    _api_fill_to_wire_node_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_OpenChannelFeeRequest> api2wire_box_autoadd_open_channel_fee_request(
      OpenChannelFeeRequest raw) {
    final ptr = inner.new_box_autoadd_open_channel_fee_request_0();
    _api_fill_to_wire_open_channel_fee_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_OpeningFeeParams> api2wire_box_autoadd_opening_fee_params(OpeningFeeParams raw) {
    final ptr = inner.new_box_autoadd_opening_fee_params_0();
    _api_fill_to_wire_opening_fee_params(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_PayOnchainRequest> api2wire_box_autoadd_pay_onchain_request(PayOnchainRequest raw) {
    final ptr = inner.new_box_autoadd_pay_onchain_request_0();
    _api_fill_to_wire_pay_onchain_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_PrepareOnchainPaymentRequest> api2wire_box_autoadd_prepare_onchain_payment_request(
      PrepareOnchainPaymentRequest raw) {
    final ptr = inner.new_box_autoadd_prepare_onchain_payment_request_0();
    _api_fill_to_wire_prepare_onchain_payment_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_PrepareRedeemOnchainFundsRequest>
      api2wire_box_autoadd_prepare_redeem_onchain_funds_request(PrepareRedeemOnchainFundsRequest raw) {
    final ptr = inner.new_box_autoadd_prepare_redeem_onchain_funds_request_0();
    _api_fill_to_wire_prepare_redeem_onchain_funds_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_PrepareRefundRequest> api2wire_box_autoadd_prepare_refund_request(
      PrepareRefundRequest raw) {
    final ptr = inner.new_box_autoadd_prepare_refund_request_0();
    _api_fill_to_wire_prepare_refund_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ReceiveOnchainRequest> api2wire_box_autoadd_receive_onchain_request(
      ReceiveOnchainRequest raw) {
    final ptr = inner.new_box_autoadd_receive_onchain_request_0();
    _api_fill_to_wire_receive_onchain_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ReceivePaymentRequest> api2wire_box_autoadd_receive_payment_request(
      ReceivePaymentRequest raw) {
    final ptr = inner.new_box_autoadd_receive_payment_request_0();
    _api_fill_to_wire_receive_payment_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RedeemOnchainFundsRequest> api2wire_box_autoadd_redeem_onchain_funds_request(
      RedeemOnchainFundsRequest raw) {
    final ptr = inner.new_box_autoadd_redeem_onchain_funds_request_0();
    _api_fill_to_wire_redeem_onchain_funds_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_RefundRequest> api2wire_box_autoadd_refund_request(RefundRequest raw) {
    final ptr = inner.new_box_autoadd_refund_request_0();
    _api_fill_to_wire_refund_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ReportIssueRequest> api2wire_box_autoadd_report_issue_request(ReportIssueRequest raw) {
    final ptr = inner.new_box_autoadd_report_issue_request_0();
    _api_fill_to_wire_report_issue_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ReportPaymentFailureDetails> api2wire_box_autoadd_report_payment_failure_details(
      ReportPaymentFailureDetails raw) {
    final ptr = inner.new_box_autoadd_report_payment_failure_details_0();
    _api_fill_to_wire_report_payment_failure_details(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_ReverseSwapFeesRequest> api2wire_box_autoadd_reverse_swap_fees_request(
      ReverseSwapFeesRequest raw) {
    final ptr = inner.new_box_autoadd_reverse_swap_fees_request_0();
    _api_fill_to_wire_reverse_swap_fees_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SendOnchainRequest> api2wire_box_autoadd_send_onchain_request(SendOnchainRequest raw) {
    final ptr = inner.new_box_autoadd_send_onchain_request_0();
    _api_fill_to_wire_send_onchain_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SendPaymentRequest> api2wire_box_autoadd_send_payment_request(SendPaymentRequest raw) {
    final ptr = inner.new_box_autoadd_send_payment_request_0();
    _api_fill_to_wire_send_payment_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SendSpontaneousPaymentRequest> api2wire_box_autoadd_send_spontaneous_payment_request(
      SendSpontaneousPaymentRequest raw) {
    final ptr = inner.new_box_autoadd_send_spontaneous_payment_request_0();
    _api_fill_to_wire_send_spontaneous_payment_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_SignMessageRequest> api2wire_box_autoadd_sign_message_request(SignMessageRequest raw) {
    final ptr = inner.new_box_autoadd_sign_message_request_0();
    _api_fill_to_wire_sign_message_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_StaticBackupRequest> api2wire_box_autoadd_static_backup_request(StaticBackupRequest raw) {
    final ptr = inner.new_box_autoadd_static_backup_request_0();
    _api_fill_to_wire_static_backup_request(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_box_autoadd_u32(int raw) {
    return inner.new_box_autoadd_u32_0(api2wire_u32(raw));
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_box_autoadd_u64(int raw) {
    return inner.new_box_autoadd_u64_0(api2wire_u64(raw));
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_list_metadata_filter> api2wire_list_metadata_filter(List<MetadataFilter> raw) {
    final ans = inner.new_list_metadata_filter_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_metadata_filter(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_payment_type_filter> api2wire_list_payment_type_filter(List<PaymentTypeFilter> raw) {
    final ans = inner.new_list_payment_type_filter_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = api2wire_payment_type_filter(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_tlv_entry> api2wire_list_tlv_entry(List<TlvEntry> raw) {
    final ans = inner.new_list_tlv_entry_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_tlv_entry(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_opt_box_autoadd_bool(bool? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_bool(raw);
  }

  @protected
  ffi.Pointer<wire_GreenlightCredentials> api2wire_opt_box_autoadd_greenlight_credentials(
      GreenlightCredentials? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_greenlight_credentials(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_opt_box_autoadd_i64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_i64(raw);
  }

  @protected
  ffi.Pointer<wire_OpeningFeeParams> api2wire_opt_box_autoadd_opening_fee_params(OpeningFeeParams? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_opening_fee_params(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint32> api2wire_opt_box_autoadd_u32(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u32(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_opt_box_autoadd_u64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u64(raw);
  }

  @protected
  ffi.Pointer<wire_list_metadata_filter> api2wire_opt_list_metadata_filter(List<MetadataFilter>? raw) {
    return raw == null ? ffi.nullptr : api2wire_list_metadata_filter(raw);
  }

  @protected
  ffi.Pointer<wire_list_payment_type_filter> api2wire_opt_list_payment_type_filter(
      List<PaymentTypeFilter>? raw) {
    return raw == null ? ffi.nullptr : api2wire_list_payment_type_filter(raw);
  }

  @protected
  ffi.Pointer<wire_list_tlv_entry> api2wire_opt_list_tlv_entry(List<TlvEntry>? raw) {
    return raw == null ? ffi.nullptr : api2wire_list_tlv_entry(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_uint_8_list(Uint8List? raw) {
    return raw == null ? ffi.nullptr : api2wire_uint_8_list(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_buy_bitcoin_request(
      BuyBitcoinRequest apiObj, ffi.Pointer<wire_BuyBitcoinRequest> wireObj) {
    _api_fill_to_wire_buy_bitcoin_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_check_message_request(
      CheckMessageRequest apiObj, ffi.Pointer<wire_CheckMessageRequest> wireObj) {
    _api_fill_to_wire_check_message_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_configure_node_request(
      ConfigureNodeRequest apiObj, ffi.Pointer<wire_ConfigureNodeRequest> wireObj) {
    _api_fill_to_wire_configure_node_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_connect_request(
      ConnectRequest apiObj, ffi.Pointer<wire_ConnectRequest> wireObj) {
    _api_fill_to_wire_connect_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_greenlight_credentials(
      GreenlightCredentials apiObj, ffi.Pointer<wire_GreenlightCredentials> wireObj) {
    _api_fill_to_wire_greenlight_credentials(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_greenlight_node_config(
      GreenlightNodeConfig apiObj, ffi.Pointer<wire_GreenlightNodeConfig> wireObj) {
    _api_fill_to_wire_greenlight_node_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_list_payments_request(
      ListPaymentsRequest apiObj, ffi.Pointer<wire_ListPaymentsRequest> wireObj) {
    _api_fill_to_wire_list_payments_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_ln_url_auth_request_data(
      LnUrlAuthRequestData apiObj, ffi.Pointer<wire_LnUrlAuthRequestData> wireObj) {
    _api_fill_to_wire_ln_url_auth_request_data(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_ln_url_pay_request(
      LnUrlPayRequest apiObj, ffi.Pointer<wire_LnUrlPayRequest> wireObj) {
    _api_fill_to_wire_ln_url_pay_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_ln_url_withdraw_request(
      LnUrlWithdrawRequest apiObj, ffi.Pointer<wire_LnUrlWithdrawRequest> wireObj) {
    _api_fill_to_wire_ln_url_withdraw_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_node_config(NodeConfig apiObj, ffi.Pointer<wire_NodeConfig> wireObj) {
    _api_fill_to_wire_node_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_open_channel_fee_request(
      OpenChannelFeeRequest apiObj, ffi.Pointer<wire_OpenChannelFeeRequest> wireObj) {
    _api_fill_to_wire_open_channel_fee_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_opening_fee_params(
      OpeningFeeParams apiObj, ffi.Pointer<wire_OpeningFeeParams> wireObj) {
    _api_fill_to_wire_opening_fee_params(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_pay_onchain_request(
      PayOnchainRequest apiObj, ffi.Pointer<wire_PayOnchainRequest> wireObj) {
    _api_fill_to_wire_pay_onchain_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_prepare_onchain_payment_request(
      PrepareOnchainPaymentRequest apiObj, ffi.Pointer<wire_PrepareOnchainPaymentRequest> wireObj) {
    _api_fill_to_wire_prepare_onchain_payment_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_prepare_redeem_onchain_funds_request(
      PrepareRedeemOnchainFundsRequest apiObj, ffi.Pointer<wire_PrepareRedeemOnchainFundsRequest> wireObj) {
    _api_fill_to_wire_prepare_redeem_onchain_funds_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_prepare_refund_request(
      PrepareRefundRequest apiObj, ffi.Pointer<wire_PrepareRefundRequest> wireObj) {
    _api_fill_to_wire_prepare_refund_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_receive_onchain_request(
      ReceiveOnchainRequest apiObj, ffi.Pointer<wire_ReceiveOnchainRequest> wireObj) {
    _api_fill_to_wire_receive_onchain_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_receive_payment_request(
      ReceivePaymentRequest apiObj, ffi.Pointer<wire_ReceivePaymentRequest> wireObj) {
    _api_fill_to_wire_receive_payment_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_redeem_onchain_funds_request(
      RedeemOnchainFundsRequest apiObj, ffi.Pointer<wire_RedeemOnchainFundsRequest> wireObj) {
    _api_fill_to_wire_redeem_onchain_funds_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_refund_request(
      RefundRequest apiObj, ffi.Pointer<wire_RefundRequest> wireObj) {
    _api_fill_to_wire_refund_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_report_issue_request(
      ReportIssueRequest apiObj, ffi.Pointer<wire_ReportIssueRequest> wireObj) {
    _api_fill_to_wire_report_issue_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_report_payment_failure_details(
      ReportPaymentFailureDetails apiObj, ffi.Pointer<wire_ReportPaymentFailureDetails> wireObj) {
    _api_fill_to_wire_report_payment_failure_details(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_reverse_swap_fees_request(
      ReverseSwapFeesRequest apiObj, ffi.Pointer<wire_ReverseSwapFeesRequest> wireObj) {
    _api_fill_to_wire_reverse_swap_fees_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_send_onchain_request(
      SendOnchainRequest apiObj, ffi.Pointer<wire_SendOnchainRequest> wireObj) {
    _api_fill_to_wire_send_onchain_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_send_payment_request(
      SendPaymentRequest apiObj, ffi.Pointer<wire_SendPaymentRequest> wireObj) {
    _api_fill_to_wire_send_payment_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_send_spontaneous_payment_request(
      SendSpontaneousPaymentRequest apiObj, ffi.Pointer<wire_SendSpontaneousPaymentRequest> wireObj) {
    _api_fill_to_wire_send_spontaneous_payment_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_sign_message_request(
      SignMessageRequest apiObj, ffi.Pointer<wire_SignMessageRequest> wireObj) {
    _api_fill_to_wire_sign_message_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_static_backup_request(
      StaticBackupRequest apiObj, ffi.Pointer<wire_StaticBackupRequest> wireObj) {
    _api_fill_to_wire_static_backup_request(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_buy_bitcoin_request(BuyBitcoinRequest apiObj, wire_BuyBitcoinRequest wireObj) {
    wireObj.provider = api2wire_buy_bitcoin_provider(apiObj.provider);
    wireObj.opening_fee_params = api2wire_opt_box_autoadd_opening_fee_params(apiObj.openingFeeParams);
    wireObj.redirect_url = api2wire_opt_String(apiObj.redirectUrl);
  }

  void _api_fill_to_wire_check_message_request(CheckMessageRequest apiObj, wire_CheckMessageRequest wireObj) {
    wireObj.message = api2wire_String(apiObj.message);
    wireObj.pubkey = api2wire_String(apiObj.pubkey);
    wireObj.signature = api2wire_String(apiObj.signature);
  }

  void _api_fill_to_wire_config(Config apiObj, wire_Config wireObj) {
    wireObj.breezserver = api2wire_String(apiObj.breezserver);
    wireObj.chainnotifier_url = api2wire_String(apiObj.chainnotifierUrl);
    wireObj.mempoolspace_url = api2wire_opt_String(apiObj.mempoolspaceUrl);
    wireObj.working_dir = api2wire_String(apiObj.workingDir);
    wireObj.network = api2wire_network(apiObj.network);
    wireObj.payment_timeout_sec = api2wire_u32(apiObj.paymentTimeoutSec);
    wireObj.default_lsp_id = api2wire_opt_String(apiObj.defaultLspId);
    wireObj.api_key = api2wire_opt_String(apiObj.apiKey);
    wireObj.maxfee_percent = api2wire_f64(apiObj.maxfeePercent);
    wireObj.exemptfee_msat = api2wire_u64(apiObj.exemptfeeMsat);
    _api_fill_to_wire_node_config(apiObj.nodeConfig, wireObj.node_config);
  }

  void _api_fill_to_wire_configure_node_request(
      ConfigureNodeRequest apiObj, wire_ConfigureNodeRequest wireObj) {
    wireObj.close_to_address = api2wire_opt_String(apiObj.closeToAddress);
  }

  void _api_fill_to_wire_connect_request(ConnectRequest apiObj, wire_ConnectRequest wireObj) {
    _api_fill_to_wire_config(apiObj.config, wireObj.config);
    wireObj.seed = api2wire_uint_8_list(apiObj.seed);
    wireObj.restore_only = api2wire_opt_box_autoadd_bool(apiObj.restoreOnly);
  }

  void _api_fill_to_wire_greenlight_credentials(
      GreenlightCredentials apiObj, wire_GreenlightCredentials wireObj) {
    wireObj.developer_key = api2wire_uint_8_list(apiObj.developerKey);
    wireObj.developer_cert = api2wire_uint_8_list(apiObj.developerCert);
  }

  void _api_fill_to_wire_greenlight_node_config(
      GreenlightNodeConfig apiObj, wire_GreenlightNodeConfig wireObj) {
    wireObj.partner_credentials = api2wire_opt_box_autoadd_greenlight_credentials(apiObj.partnerCredentials);
    wireObj.invite_code = api2wire_opt_String(apiObj.inviteCode);
  }

  void _api_fill_to_wire_list_payments_request(ListPaymentsRequest apiObj, wire_ListPaymentsRequest wireObj) {
    wireObj.filters = api2wire_opt_list_payment_type_filter(apiObj.filters);
    wireObj.metadata_filters = api2wire_opt_list_metadata_filter(apiObj.metadataFilters);
    wireObj.from_timestamp = api2wire_opt_box_autoadd_i64(apiObj.fromTimestamp);
    wireObj.to_timestamp = api2wire_opt_box_autoadd_i64(apiObj.toTimestamp);
    wireObj.include_failures = api2wire_opt_box_autoadd_bool(apiObj.includeFailures);
    wireObj.offset = api2wire_opt_box_autoadd_u32(apiObj.offset);
    wireObj.limit = api2wire_opt_box_autoadd_u32(apiObj.limit);
  }

  void _api_fill_to_wire_ln_url_auth_request_data(
      LnUrlAuthRequestData apiObj, wire_LnUrlAuthRequestData wireObj) {
    wireObj.k1 = api2wire_String(apiObj.k1);
    wireObj.action = api2wire_opt_String(apiObj.action);
    wireObj.domain = api2wire_String(apiObj.domain);
    wireObj.url = api2wire_String(apiObj.url);
  }

  void _api_fill_to_wire_ln_url_pay_request(LnUrlPayRequest apiObj, wire_LnUrlPayRequest wireObj) {
    _api_fill_to_wire_ln_url_pay_request_data(apiObj.data, wireObj.data);
    wireObj.amount_msat = api2wire_u64(apiObj.amountMsat);
    wireObj.use_trampoline = api2wire_bool(apiObj.useTrampoline);
    wireObj.comment = api2wire_opt_String(apiObj.comment);
    wireObj.payment_label = api2wire_opt_String(apiObj.paymentLabel);
    wireObj.validate_success_action_url = api2wire_opt_box_autoadd_bool(apiObj.validateSuccessActionUrl);
  }

  void _api_fill_to_wire_ln_url_pay_request_data(
      LnUrlPayRequestData apiObj, wire_LnUrlPayRequestData wireObj) {
    wireObj.callback = api2wire_String(apiObj.callback);
    wireObj.min_sendable = api2wire_u64(apiObj.minSendable);
    wireObj.max_sendable = api2wire_u64(apiObj.maxSendable);
    wireObj.metadata_str = api2wire_String(apiObj.metadataStr);
    wireObj.comment_allowed = api2wire_u16(apiObj.commentAllowed);
    wireObj.domain = api2wire_String(apiObj.domain);
    wireObj.allows_nostr = api2wire_bool(apiObj.allowsNostr);
    wireObj.nostr_pubkey = api2wire_opt_String(apiObj.nostrPubkey);
    wireObj.ln_address = api2wire_opt_String(apiObj.lnAddress);
  }

  void _api_fill_to_wire_ln_url_withdraw_request(
      LnUrlWithdrawRequest apiObj, wire_LnUrlWithdrawRequest wireObj) {
    _api_fill_to_wire_ln_url_withdraw_request_data(apiObj.data, wireObj.data);
    wireObj.amount_msat = api2wire_u64(apiObj.amountMsat);
    wireObj.description = api2wire_opt_String(apiObj.description);
  }

  void _api_fill_to_wire_ln_url_withdraw_request_data(
      LnUrlWithdrawRequestData apiObj, wire_LnUrlWithdrawRequestData wireObj) {
    wireObj.callback = api2wire_String(apiObj.callback);
    wireObj.k1 = api2wire_String(apiObj.k1);
    wireObj.default_description = api2wire_String(apiObj.defaultDescription);
    wireObj.min_withdrawable = api2wire_u64(apiObj.minWithdrawable);
    wireObj.max_withdrawable = api2wire_u64(apiObj.maxWithdrawable);
  }

  void _api_fill_to_wire_metadata_filter(MetadataFilter apiObj, wire_MetadataFilter wireObj) {
    wireObj.json_path = api2wire_String(apiObj.jsonPath);
    wireObj.json_value = api2wire_String(apiObj.jsonValue);
  }

  void _api_fill_to_wire_node_config(NodeConfig apiObj, wire_NodeConfig wireObj) {
    if (apiObj is NodeConfig_Greenlight) {
      var pre_config = api2wire_box_autoadd_greenlight_node_config(apiObj.config);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_NodeConfig_Greenlight();
      wireObj.kind.ref.Greenlight.ref.config = pre_config;
      return;
    }
  }

  void _api_fill_to_wire_open_channel_fee_request(
      OpenChannelFeeRequest apiObj, wire_OpenChannelFeeRequest wireObj) {
    wireObj.amount_msat = api2wire_opt_box_autoadd_u64(apiObj.amountMsat);
    wireObj.expiry = api2wire_opt_box_autoadd_u32(apiObj.expiry);
  }

  void _api_fill_to_wire_opening_fee_params(OpeningFeeParams apiObj, wire_OpeningFeeParams wireObj) {
    wireObj.min_msat = api2wire_u64(apiObj.minMsat);
    wireObj.proportional = api2wire_u32(apiObj.proportional);
    wireObj.valid_until = api2wire_String(apiObj.validUntil);
    wireObj.max_idle_time = api2wire_u32(apiObj.maxIdleTime);
    wireObj.max_client_to_self_delay = api2wire_u32(apiObj.maxClientToSelfDelay);
    wireObj.promise = api2wire_String(apiObj.promise);
  }

  void _api_fill_to_wire_pay_onchain_request(PayOnchainRequest apiObj, wire_PayOnchainRequest wireObj) {
    wireObj.recipient_address = api2wire_String(apiObj.recipientAddress);
    _api_fill_to_wire_prepare_onchain_payment_response(apiObj.prepareRes, wireObj.prepare_res);
  }

  void _api_fill_to_wire_prepare_onchain_payment_request(
      PrepareOnchainPaymentRequest apiObj, wire_PrepareOnchainPaymentRequest wireObj) {
    wireObj.amount_sat = api2wire_u64(apiObj.amountSat);
    wireObj.amount_type = api2wire_swap_amount_type(apiObj.amountType);
    wireObj.claim_tx_feerate = api2wire_u32(apiObj.claimTxFeerate);
  }

  void _api_fill_to_wire_prepare_onchain_payment_response(
      PrepareOnchainPaymentResponse apiObj, wire_PrepareOnchainPaymentResponse wireObj) {
    wireObj.fees_hash = api2wire_String(apiObj.feesHash);
    wireObj.fees_percentage = api2wire_f64(apiObj.feesPercentage);
    wireObj.fees_lockup = api2wire_u64(apiObj.feesLockup);
    wireObj.fees_claim = api2wire_u64(apiObj.feesClaim);
    wireObj.sender_amount_sat = api2wire_u64(apiObj.senderAmountSat);
    wireObj.recipient_amount_sat = api2wire_u64(apiObj.recipientAmountSat);
    wireObj.total_fees = api2wire_u64(apiObj.totalFees);
  }

  void _api_fill_to_wire_prepare_redeem_onchain_funds_request(
      PrepareRedeemOnchainFundsRequest apiObj, wire_PrepareRedeemOnchainFundsRequest wireObj) {
    wireObj.to_address = api2wire_String(apiObj.toAddress);
    wireObj.sat_per_vbyte = api2wire_u32(apiObj.satPerVbyte);
  }

  void _api_fill_to_wire_prepare_refund_request(
      PrepareRefundRequest apiObj, wire_PrepareRefundRequest wireObj) {
    wireObj.swap_address = api2wire_String(apiObj.swapAddress);
    wireObj.to_address = api2wire_String(apiObj.toAddress);
    wireObj.sat_per_vbyte = api2wire_u32(apiObj.satPerVbyte);
  }

  void _api_fill_to_wire_receive_onchain_request(
      ReceiveOnchainRequest apiObj, wire_ReceiveOnchainRequest wireObj) {
    wireObj.opening_fee_params = api2wire_opt_box_autoadd_opening_fee_params(apiObj.openingFeeParams);
  }

  void _api_fill_to_wire_receive_payment_request(
      ReceivePaymentRequest apiObj, wire_ReceivePaymentRequest wireObj) {
    wireObj.amount_msat = api2wire_u64(apiObj.amountMsat);
    wireObj.description = api2wire_String(apiObj.description);
    wireObj.preimage = api2wire_opt_uint_8_list(apiObj.preimage);
    wireObj.opening_fee_params = api2wire_opt_box_autoadd_opening_fee_params(apiObj.openingFeeParams);
    wireObj.use_description_hash = api2wire_opt_box_autoadd_bool(apiObj.useDescriptionHash);
    wireObj.expiry = api2wire_opt_box_autoadd_u32(apiObj.expiry);
    wireObj.cltv = api2wire_opt_box_autoadd_u32(apiObj.cltv);
  }

  void _api_fill_to_wire_redeem_onchain_funds_request(
      RedeemOnchainFundsRequest apiObj, wire_RedeemOnchainFundsRequest wireObj) {
    wireObj.to_address = api2wire_String(apiObj.toAddress);
    wireObj.sat_per_vbyte = api2wire_u32(apiObj.satPerVbyte);
  }

  void _api_fill_to_wire_refund_request(RefundRequest apiObj, wire_RefundRequest wireObj) {
    wireObj.swap_address = api2wire_String(apiObj.swapAddress);
    wireObj.to_address = api2wire_String(apiObj.toAddress);
    wireObj.sat_per_vbyte = api2wire_u32(apiObj.satPerVbyte);
  }

  void _api_fill_to_wire_report_issue_request(ReportIssueRequest apiObj, wire_ReportIssueRequest wireObj) {
    if (apiObj is ReportIssueRequest_PaymentFailure) {
      var pre_data = api2wire_box_autoadd_report_payment_failure_details(apiObj.data);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_ReportIssueRequest_PaymentFailure();
      wireObj.kind.ref.PaymentFailure.ref.data = pre_data;
      return;
    }
  }

  void _api_fill_to_wire_report_payment_failure_details(
      ReportPaymentFailureDetails apiObj, wire_ReportPaymentFailureDetails wireObj) {
    wireObj.payment_hash = api2wire_String(apiObj.paymentHash);
    wireObj.comment = api2wire_opt_String(apiObj.comment);
  }

  void _api_fill_to_wire_reverse_swap_fees_request(
      ReverseSwapFeesRequest apiObj, wire_ReverseSwapFeesRequest wireObj) {
    wireObj.send_amount_sat = api2wire_opt_box_autoadd_u64(apiObj.sendAmountSat);
    wireObj.claim_tx_feerate = api2wire_opt_box_autoadd_u32(apiObj.claimTxFeerate);
  }

  void _api_fill_to_wire_send_onchain_request(SendOnchainRequest apiObj, wire_SendOnchainRequest wireObj) {
    wireObj.amount_sat = api2wire_u64(apiObj.amountSat);
    wireObj.onchain_recipient_address = api2wire_String(apiObj.onchainRecipientAddress);
    wireObj.pair_hash = api2wire_String(apiObj.pairHash);
    wireObj.sat_per_vbyte = api2wire_u32(apiObj.satPerVbyte);
  }

  void _api_fill_to_wire_send_payment_request(SendPaymentRequest apiObj, wire_SendPaymentRequest wireObj) {
    wireObj.bolt11 = api2wire_String(apiObj.bolt11);
    wireObj.use_trampoline = api2wire_bool(apiObj.useTrampoline);
    wireObj.amount_msat = api2wire_opt_box_autoadd_u64(apiObj.amountMsat);
    wireObj.label = api2wire_opt_String(apiObj.label);
  }

  void _api_fill_to_wire_send_spontaneous_payment_request(
      SendSpontaneousPaymentRequest apiObj, wire_SendSpontaneousPaymentRequest wireObj) {
    wireObj.node_id = api2wire_String(apiObj.nodeId);
    wireObj.amount_msat = api2wire_u64(apiObj.amountMsat);
    wireObj.extra_tlvs = api2wire_opt_list_tlv_entry(apiObj.extraTlvs);
    wireObj.label = api2wire_opt_String(apiObj.label);
  }

  void _api_fill_to_wire_sign_message_request(SignMessageRequest apiObj, wire_SignMessageRequest wireObj) {
    wireObj.message = api2wire_String(apiObj.message);
  }

  void _api_fill_to_wire_static_backup_request(StaticBackupRequest apiObj, wire_StaticBackupRequest wireObj) {
    wireObj.working_dir = api2wire_String(apiObj.workingDir);
  }

  void _api_fill_to_wire_tlv_entry(TlvEntry apiObj, wire_TlvEntry wireObj) {
    wireObj.field_number = api2wire_u64(apiObj.fieldNumber);
    wireObj.value = api2wire_uint_8_list(apiObj.value);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class BreezSdkCoreWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BreezSdkCoreWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BreezSdkCoreWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject =
      _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl =
      _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_connect(
    int port_,
    ffi.Pointer<wire_ConnectRequest> req,
  ) {
    return _wire_connect(
      port_,
      req,
    );
  }

  late final _wire_connectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ConnectRequest>)>>(
          'wire_connect');
  late final _wire_connect =
      _wire_connectPtr.asFunction<void Function(int, ffi.Pointer<wire_ConnectRequest>)>();

  void wire_is_initialized(
    int port_,
  ) {
    return _wire_is_initialized(
      port_,
    );
  }

  late final _wire_is_initializedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_is_initialized');
  late final _wire_is_initialized = _wire_is_initializedPtr.asFunction<void Function(int)>();

  void wire_sync(
    int port_,
  ) {
    return _wire_sync(
      port_,
    );
  }

  late final _wire_syncPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_sync');
  late final _wire_sync = _wire_syncPtr.asFunction<void Function(int)>();

  void wire_node_credentials(
    int port_,
  ) {
    return _wire_node_credentials(
      port_,
    );
  }

  late final _wire_node_credentialsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_node_credentials');
  late final _wire_node_credentials = _wire_node_credentialsPtr.asFunction<void Function(int)>();

  void wire_node_info(
    int port_,
  ) {
    return _wire_node_info(
      port_,
    );
  }

  late final _wire_node_infoPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_node_info');
  late final _wire_node_info = _wire_node_infoPtr.asFunction<void Function(int)>();

  void wire_configure_node(
    int port_,
    ffi.Pointer<wire_ConfigureNodeRequest> req,
  ) {
    return _wire_configure_node(
      port_,
      req,
    );
  }

  late final _wire_configure_nodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ConfigureNodeRequest>)>>(
          'wire_configure_node');
  late final _wire_configure_node =
      _wire_configure_nodePtr.asFunction<void Function(int, ffi.Pointer<wire_ConfigureNodeRequest>)>();

  void wire_disconnect(
    int port_,
  ) {
    return _wire_disconnect(
      port_,
    );
  }

  late final _wire_disconnectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_disconnect');
  late final _wire_disconnect = _wire_disconnectPtr.asFunction<void Function(int)>();

  void wire_sign_message(
    int port_,
    ffi.Pointer<wire_SignMessageRequest> req,
  ) {
    return _wire_sign_message(
      port_,
      req,
    );
  }

  late final _wire_sign_messagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_SignMessageRequest>)>>(
          'wire_sign_message');
  late final _wire_sign_message =
      _wire_sign_messagePtr.asFunction<void Function(int, ffi.Pointer<wire_SignMessageRequest>)>();

  void wire_check_message(
    int port_,
    ffi.Pointer<wire_CheckMessageRequest> req,
  ) {
    return _wire_check_message(
      port_,
      req,
    );
  }

  late final _wire_check_messagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_CheckMessageRequest>)>>(
          'wire_check_message');
  late final _wire_check_message =
      _wire_check_messagePtr.asFunction<void Function(int, ffi.Pointer<wire_CheckMessageRequest>)>();

  void wire_mnemonic_to_seed(
    int port_,
    ffi.Pointer<wire_uint_8_list> phrase,
  ) {
    return _wire_mnemonic_to_seed(
      port_,
      phrase,
    );
  }

  late final _wire_mnemonic_to_seedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_mnemonic_to_seed');
  late final _wire_mnemonic_to_seed =
      _wire_mnemonic_to_seedPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_default_config(
    int port_,
    int env_type,
    ffi.Pointer<wire_uint_8_list> api_key,
    ffi.Pointer<wire_NodeConfig> node_config,
  ) {
    return _wire_default_config(
      port_,
      env_type,
      api_key,
      node_config,
    );
  }

  late final _wire_default_configPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_NodeConfig>)>>('wire_default_config');
  late final _wire_default_config = _wire_default_configPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_NodeConfig>)>();

  void wire_static_backup(
    int port_,
    ffi.Pointer<wire_StaticBackupRequest> req,
  ) {
    return _wire_static_backup(
      port_,
      req,
    );
  }

  late final _wire_static_backupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_StaticBackupRequest>)>>(
          'wire_static_backup');
  late final _wire_static_backup =
      _wire_static_backupPtr.asFunction<void Function(int, ffi.Pointer<wire_StaticBackupRequest>)>();

  void wire_service_health_check(
    int port_,
    ffi.Pointer<wire_uint_8_list> api_key,
  ) {
    return _wire_service_health_check(
      port_,
      api_key,
    );
  }

  late final _wire_service_health_checkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_service_health_check');
  late final _wire_service_health_check =
      _wire_service_health_checkPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_breez_events_stream(
    int port_,
  ) {
    return _wire_breez_events_stream(
      port_,
    );
  }

  late final _wire_breez_events_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_breez_events_stream');
  late final _wire_breez_events_stream = _wire_breez_events_streamPtr.asFunction<void Function(int)>();

  void wire_breez_log_stream(
    int port_,
  ) {
    return _wire_breez_log_stream(
      port_,
    );
  }

  late final _wire_breez_log_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_breez_log_stream');
  late final _wire_breez_log_stream = _wire_breez_log_streamPtr.asFunction<void Function(int)>();

  void wire_list_lsps(
    int port_,
  ) {
    return _wire_list_lsps(
      port_,
    );
  }

  late final _wire_list_lspsPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_list_lsps');
  late final _wire_list_lsps = _wire_list_lspsPtr.asFunction<void Function(int)>();

  void wire_connect_lsp(
    int port_,
    ffi.Pointer<wire_uint_8_list> lsp_id,
  ) {
    return _wire_connect_lsp(
      port_,
      lsp_id,
    );
  }

  late final _wire_connect_lspPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_connect_lsp');
  late final _wire_connect_lsp =
      _wire_connect_lspPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_lsp_id(
    int port_,
  ) {
    return _wire_lsp_id(
      port_,
    );
  }

  late final _wire_lsp_idPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_lsp_id');
  late final _wire_lsp_id = _wire_lsp_idPtr.asFunction<void Function(int)>();

  void wire_fetch_lsp_info(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_fetch_lsp_info(
      port_,
      id,
    );
  }

  late final _wire_fetch_lsp_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_fetch_lsp_info');
  late final _wire_fetch_lsp_info =
      _wire_fetch_lsp_infoPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_lsp_info(
    int port_,
  ) {
    return _wire_lsp_info(
      port_,
    );
  }

  late final _wire_lsp_infoPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_lsp_info');
  late final _wire_lsp_info = _wire_lsp_infoPtr.asFunction<void Function(int)>();

  void wire_close_lsp_channels(
    int port_,
  ) {
    return _wire_close_lsp_channels(
      port_,
    );
  }

  late final _wire_close_lsp_channelsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_close_lsp_channels');
  late final _wire_close_lsp_channels = _wire_close_lsp_channelsPtr.asFunction<void Function(int)>();

  void wire_register_webhook(
    int port_,
    ffi.Pointer<wire_uint_8_list> webhook_url,
  ) {
    return _wire_register_webhook(
      port_,
      webhook_url,
    );
  }

  late final _wire_register_webhookPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_register_webhook');
  late final _wire_register_webhook =
      _wire_register_webhookPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_unregister_webhook(
    int port_,
    ffi.Pointer<wire_uint_8_list> webhook_url,
  ) {
    return _wire_unregister_webhook(
      port_,
      webhook_url,
    );
  }

  late final _wire_unregister_webhookPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_unregister_webhook');
  late final _wire_unregister_webhook =
      _wire_unregister_webhookPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_backup(
    int port_,
  ) {
    return _wire_backup(
      port_,
    );
  }

  late final _wire_backupPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_backup');
  late final _wire_backup = _wire_backupPtr.asFunction<void Function(int)>();

  void wire_backup_status(
    int port_,
  ) {
    return _wire_backup_status(
      port_,
    );
  }

  late final _wire_backup_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_backup_status');
  late final _wire_backup_status = _wire_backup_statusPtr.asFunction<void Function(int)>();

  void wire_parse_invoice(
    int port_,
    ffi.Pointer<wire_uint_8_list> invoice,
  ) {
    return _wire_parse_invoice(
      port_,
      invoice,
    );
  }

  late final _wire_parse_invoicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_parse_invoice');
  late final _wire_parse_invoice =
      _wire_parse_invoicePtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_parse_input(
    int port_,
    ffi.Pointer<wire_uint_8_list> input,
  ) {
    return _wire_parse_input(
      port_,
      input,
    );
  }

  late final _wire_parse_inputPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_parse_input');
  late final _wire_parse_input =
      _wire_parse_inputPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_list_payments(
    int port_,
    ffi.Pointer<wire_ListPaymentsRequest> req,
  ) {
    return _wire_list_payments(
      port_,
      req,
    );
  }

  late final _wire_list_paymentsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ListPaymentsRequest>)>>(
          'wire_list_payments');
  late final _wire_list_payments =
      _wire_list_paymentsPtr.asFunction<void Function(int, ffi.Pointer<wire_ListPaymentsRequest>)>();

  void wire_payment_by_hash(
    int port_,
    ffi.Pointer<wire_uint_8_list> hash,
  ) {
    return _wire_payment_by_hash(
      port_,
      hash,
    );
  }

  late final _wire_payment_by_hashPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_payment_by_hash');
  late final _wire_payment_by_hash =
      _wire_payment_by_hashPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_set_payment_metadata(
    int port_,
    ffi.Pointer<wire_uint_8_list> hash,
    ffi.Pointer<wire_uint_8_list> metadata,
  ) {
    return _wire_set_payment_metadata(
      port_,
      hash,
      metadata,
    );
  }

  late final _wire_set_payment_metadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_set_payment_metadata');
  late final _wire_set_payment_metadata = _wire_set_payment_metadataPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_send_payment(
    int port_,
    ffi.Pointer<wire_SendPaymentRequest> req,
  ) {
    return _wire_send_payment(
      port_,
      req,
    );
  }

  late final _wire_send_paymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_SendPaymentRequest>)>>(
          'wire_send_payment');
  late final _wire_send_payment =
      _wire_send_paymentPtr.asFunction<void Function(int, ffi.Pointer<wire_SendPaymentRequest>)>();

  void wire_send_spontaneous_payment(
    int port_,
    ffi.Pointer<wire_SendSpontaneousPaymentRequest> req,
  ) {
    return _wire_send_spontaneous_payment(
      port_,
      req,
    );
  }

  late final _wire_send_spontaneous_paymentPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_SendSpontaneousPaymentRequest>)>>(
      'wire_send_spontaneous_payment');
  late final _wire_send_spontaneous_payment = _wire_send_spontaneous_paymentPtr
      .asFunction<void Function(int, ffi.Pointer<wire_SendSpontaneousPaymentRequest>)>();

  void wire_receive_payment(
    int port_,
    ffi.Pointer<wire_ReceivePaymentRequest> req,
  ) {
    return _wire_receive_payment(
      port_,
      req,
    );
  }

  late final _wire_receive_paymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ReceivePaymentRequest>)>>(
          'wire_receive_payment');
  late final _wire_receive_payment =
      _wire_receive_paymentPtr.asFunction<void Function(int, ffi.Pointer<wire_ReceivePaymentRequest>)>();

  void wire_lnurl_pay(
    int port_,
    ffi.Pointer<wire_LnUrlPayRequest> req,
  ) {
    return _wire_lnurl_pay(
      port_,
      req,
    );
  }

  late final _wire_lnurl_payPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_LnUrlPayRequest>)>>(
          'wire_lnurl_pay');
  late final _wire_lnurl_pay =
      _wire_lnurl_payPtr.asFunction<void Function(int, ffi.Pointer<wire_LnUrlPayRequest>)>();

  void wire_lnurl_withdraw(
    int port_,
    ffi.Pointer<wire_LnUrlWithdrawRequest> req,
  ) {
    return _wire_lnurl_withdraw(
      port_,
      req,
    );
  }

  late final _wire_lnurl_withdrawPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_LnUrlWithdrawRequest>)>>(
          'wire_lnurl_withdraw');
  late final _wire_lnurl_withdraw =
      _wire_lnurl_withdrawPtr.asFunction<void Function(int, ffi.Pointer<wire_LnUrlWithdrawRequest>)>();

  void wire_lnurl_auth(
    int port_,
    ffi.Pointer<wire_LnUrlAuthRequestData> req_data,
  ) {
    return _wire_lnurl_auth(
      port_,
      req_data,
    );
  }

  late final _wire_lnurl_authPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_LnUrlAuthRequestData>)>>(
          'wire_lnurl_auth');
  late final _wire_lnurl_auth =
      _wire_lnurl_authPtr.asFunction<void Function(int, ffi.Pointer<wire_LnUrlAuthRequestData>)>();

  void wire_report_issue(
    int port_,
    ffi.Pointer<wire_ReportIssueRequest> req,
  ) {
    return _wire_report_issue(
      port_,
      req,
    );
  }

  late final _wire_report_issuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ReportIssueRequest>)>>(
          'wire_report_issue');
  late final _wire_report_issue =
      _wire_report_issuePtr.asFunction<void Function(int, ffi.Pointer<wire_ReportIssueRequest>)>();

  void wire_fetch_fiat_rates(
    int port_,
  ) {
    return _wire_fetch_fiat_rates(
      port_,
    );
  }

  late final _wire_fetch_fiat_ratesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_fetch_fiat_rates');
  late final _wire_fetch_fiat_rates = _wire_fetch_fiat_ratesPtr.asFunction<void Function(int)>();

  void wire_list_fiat_currencies(
    int port_,
  ) {
    return _wire_list_fiat_currencies(
      port_,
    );
  }

  late final _wire_list_fiat_currenciesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_list_fiat_currencies');
  late final _wire_list_fiat_currencies = _wire_list_fiat_currenciesPtr.asFunction<void Function(int)>();

  void wire_max_reverse_swap_amount(
    int port_,
  ) {
    return _wire_max_reverse_swap_amount(
      port_,
    );
  }

  late final _wire_max_reverse_swap_amountPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_max_reverse_swap_amount');
  late final _wire_max_reverse_swap_amount =
      _wire_max_reverse_swap_amountPtr.asFunction<void Function(int)>();

  void wire_send_onchain(
    int port_,
    ffi.Pointer<wire_SendOnchainRequest> req,
  ) {
    return _wire_send_onchain(
      port_,
      req,
    );
  }

  late final _wire_send_onchainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_SendOnchainRequest>)>>(
          'wire_send_onchain');
  late final _wire_send_onchain =
      _wire_send_onchainPtr.asFunction<void Function(int, ffi.Pointer<wire_SendOnchainRequest>)>();

  void wire_pay_onchain(
    int port_,
    ffi.Pointer<wire_PayOnchainRequest> req,
  ) {
    return _wire_pay_onchain(
      port_,
      req,
    );
  }

  late final _wire_pay_onchainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_PayOnchainRequest>)>>(
          'wire_pay_onchain');
  late final _wire_pay_onchain =
      _wire_pay_onchainPtr.asFunction<void Function(int, ffi.Pointer<wire_PayOnchainRequest>)>();

  void wire_receive_onchain(
    int port_,
    ffi.Pointer<wire_ReceiveOnchainRequest> req,
  ) {
    return _wire_receive_onchain(
      port_,
      req,
    );
  }

  late final _wire_receive_onchainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ReceiveOnchainRequest>)>>(
          'wire_receive_onchain');
  late final _wire_receive_onchain =
      _wire_receive_onchainPtr.asFunction<void Function(int, ffi.Pointer<wire_ReceiveOnchainRequest>)>();

  void wire_buy_bitcoin(
    int port_,
    ffi.Pointer<wire_BuyBitcoinRequest> req,
  ) {
    return _wire_buy_bitcoin(
      port_,
      req,
    );
  }

  late final _wire_buy_bitcoinPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_BuyBitcoinRequest>)>>(
          'wire_buy_bitcoin');
  late final _wire_buy_bitcoin =
      _wire_buy_bitcoinPtr.asFunction<void Function(int, ffi.Pointer<wire_BuyBitcoinRequest>)>();

  void wire_redeem_onchain_funds(
    int port_,
    ffi.Pointer<wire_RedeemOnchainFundsRequest> req,
  ) {
    return _wire_redeem_onchain_funds(
      port_,
      req,
    );
  }

  late final _wire_redeem_onchain_fundsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_RedeemOnchainFundsRequest>)>>(
          'wire_redeem_onchain_funds');
  late final _wire_redeem_onchain_funds = _wire_redeem_onchain_fundsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_RedeemOnchainFundsRequest>)>();

  void wire_prepare_redeem_onchain_funds(
    int port_,
    ffi.Pointer<wire_PrepareRedeemOnchainFundsRequest> req,
  ) {
    return _wire_prepare_redeem_onchain_funds(
      port_,
      req,
    );
  }

  late final _wire_prepare_redeem_onchain_fundsPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_PrepareRedeemOnchainFundsRequest>)>>(
      'wire_prepare_redeem_onchain_funds');
  late final _wire_prepare_redeem_onchain_funds = _wire_prepare_redeem_onchain_fundsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_PrepareRedeemOnchainFundsRequest>)>();

  void wire_list_refundables(
    int port_,
  ) {
    return _wire_list_refundables(
      port_,
    );
  }

  late final _wire_list_refundablesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_list_refundables');
  late final _wire_list_refundables = _wire_list_refundablesPtr.asFunction<void Function(int)>();

  void wire_prepare_refund(
    int port_,
    ffi.Pointer<wire_PrepareRefundRequest> req,
  ) {
    return _wire_prepare_refund(
      port_,
      req,
    );
  }

  late final _wire_prepare_refundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_PrepareRefundRequest>)>>(
          'wire_prepare_refund');
  late final _wire_prepare_refund =
      _wire_prepare_refundPtr.asFunction<void Function(int, ffi.Pointer<wire_PrepareRefundRequest>)>();

  void wire_refund(
    int port_,
    ffi.Pointer<wire_RefundRequest> req,
  ) {
    return _wire_refund(
      port_,
      req,
    );
  }

  late final _wire_refundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_RefundRequest>)>>(
          'wire_refund');
  late final _wire_refund = _wire_refundPtr.asFunction<void Function(int, ffi.Pointer<wire_RefundRequest>)>();

  void wire_rescan_swaps(
    int port_,
  ) {
    return _wire_rescan_swaps(
      port_,
    );
  }

  late final _wire_rescan_swapsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_rescan_swaps');
  late final _wire_rescan_swaps = _wire_rescan_swapsPtr.asFunction<void Function(int)>();

  void wire_redeem_swap(
    int port_,
    ffi.Pointer<wire_uint_8_list> swap_address,
  ) {
    return _wire_redeem_swap(
      port_,
      swap_address,
    );
  }

  late final _wire_redeem_swapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_redeem_swap');
  late final _wire_redeem_swap =
      _wire_redeem_swapPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_in_progress_swap(
    int port_,
  ) {
    return _wire_in_progress_swap(
      port_,
    );
  }

  late final _wire_in_progress_swapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_in_progress_swap');
  late final _wire_in_progress_swap = _wire_in_progress_swapPtr.asFunction<void Function(int)>();

  void wire_in_progress_reverse_swaps(
    int port_,
  ) {
    return _wire_in_progress_reverse_swaps(
      port_,
    );
  }

  late final _wire_in_progress_reverse_swapsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_in_progress_reverse_swaps');
  late final _wire_in_progress_reverse_swaps =
      _wire_in_progress_reverse_swapsPtr.asFunction<void Function(int)>();

  void wire_claim_reverse_swap(
    int port_,
    ffi.Pointer<wire_uint_8_list> lockup_address,
  ) {
    return _wire_claim_reverse_swap(
      port_,
      lockup_address,
    );
  }

  late final _wire_claim_reverse_swapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_claim_reverse_swap');
  late final _wire_claim_reverse_swap =
      _wire_claim_reverse_swapPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_open_channel_fee(
    int port_,
    ffi.Pointer<wire_OpenChannelFeeRequest> req,
  ) {
    return _wire_open_channel_fee(
      port_,
      req,
    );
  }

  late final _wire_open_channel_feePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_OpenChannelFeeRequest>)>>(
          'wire_open_channel_fee');
  late final _wire_open_channel_fee =
      _wire_open_channel_feePtr.asFunction<void Function(int, ffi.Pointer<wire_OpenChannelFeeRequest>)>();

  void wire_fetch_reverse_swap_fees(
    int port_,
    ffi.Pointer<wire_ReverseSwapFeesRequest> req,
  ) {
    return _wire_fetch_reverse_swap_fees(
      port_,
      req,
    );
  }

  late final _wire_fetch_reverse_swap_feesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_ReverseSwapFeesRequest>)>>(
          'wire_fetch_reverse_swap_fees');
  late final _wire_fetch_reverse_swap_fees = _wire_fetch_reverse_swap_feesPtr
      .asFunction<void Function(int, ffi.Pointer<wire_ReverseSwapFeesRequest>)>();

  void wire_onchain_payment_limits(
    int port_,
  ) {
    return _wire_onchain_payment_limits(
      port_,
    );
  }

  late final _wire_onchain_payment_limitsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_onchain_payment_limits');
  late final _wire_onchain_payment_limits = _wire_onchain_payment_limitsPtr.asFunction<void Function(int)>();

  void wire_prepare_onchain_payment(
    int port_,
    ffi.Pointer<wire_PrepareOnchainPaymentRequest> req,
  ) {
    return _wire_prepare_onchain_payment(
      port_,
      req,
    );
  }

  late final _wire_prepare_onchain_paymentPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_PrepareOnchainPaymentRequest>)>>(
      'wire_prepare_onchain_payment');
  late final _wire_prepare_onchain_payment = _wire_prepare_onchain_paymentPtr
      .asFunction<void Function(int, ffi.Pointer<wire_PrepareOnchainPaymentRequest>)>();

  void wire_in_progress_onchain_payments(
    int port_,
  ) {
    return _wire_in_progress_onchain_payments(
      port_,
    );
  }

  late final _wire_in_progress_onchain_paymentsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_in_progress_onchain_payments');
  late final _wire_in_progress_onchain_payments =
      _wire_in_progress_onchain_paymentsPtr.asFunction<void Function(int)>();

  void wire_recommended_fees(
    int port_,
  ) {
    return _wire_recommended_fees(
      port_,
    );
  }

  late final _wire_recommended_feesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_recommended_fees');
  late final _wire_recommended_fees = _wire_recommended_feesPtr.asFunction<void Function(int)>();

  void wire_execute_command(
    int port_,
    ffi.Pointer<wire_uint_8_list> command,
  ) {
    return _wire_execute_command(
      port_,
      command,
    );
  }

  late final _wire_execute_commandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_execute_command');
  late final _wire_execute_command =
      _wire_execute_commandPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_generate_diagnostic_data(
    int port_,
  ) {
    return _wire_generate_diagnostic_data(
      port_,
    );
  }

  late final _wire_generate_diagnostic_dataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_generate_diagnostic_data');
  late final _wire_generate_diagnostic_data =
      _wire_generate_diagnostic_dataPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Bool> new_box_autoadd_bool_0(
    bool value,
  ) {
    return _new_box_autoadd_bool_0(
      value,
    );
  }

  late final _new_box_autoadd_bool_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function(ffi.Bool)>>('new_box_autoadd_bool_0');
  late final _new_box_autoadd_bool_0 =
      _new_box_autoadd_bool_0Ptr.asFunction<ffi.Pointer<ffi.Bool> Function(bool)>();

  ffi.Pointer<wire_BuyBitcoinRequest> new_box_autoadd_buy_bitcoin_request_0() {
    return _new_box_autoadd_buy_bitcoin_request_0();
  }

  late final _new_box_autoadd_buy_bitcoin_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_BuyBitcoinRequest> Function()>>(
          'new_box_autoadd_buy_bitcoin_request_0');
  late final _new_box_autoadd_buy_bitcoin_request_0 =
      _new_box_autoadd_buy_bitcoin_request_0Ptr.asFunction<ffi.Pointer<wire_BuyBitcoinRequest> Function()>();

  ffi.Pointer<wire_CheckMessageRequest> new_box_autoadd_check_message_request_0() {
    return _new_box_autoadd_check_message_request_0();
  }

  late final _new_box_autoadd_check_message_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_CheckMessageRequest> Function()>>(
          'new_box_autoadd_check_message_request_0');
  late final _new_box_autoadd_check_message_request_0 = _new_box_autoadd_check_message_request_0Ptr
      .asFunction<ffi.Pointer<wire_CheckMessageRequest> Function()>();

  ffi.Pointer<wire_ConfigureNodeRequest> new_box_autoadd_configure_node_request_0() {
    return _new_box_autoadd_configure_node_request_0();
  }

  late final _new_box_autoadd_configure_node_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ConfigureNodeRequest> Function()>>(
          'new_box_autoadd_configure_node_request_0');
  late final _new_box_autoadd_configure_node_request_0 = _new_box_autoadd_configure_node_request_0Ptr
      .asFunction<ffi.Pointer<wire_ConfigureNodeRequest> Function()>();

  ffi.Pointer<wire_ConnectRequest> new_box_autoadd_connect_request_0() {
    return _new_box_autoadd_connect_request_0();
  }

  late final _new_box_autoadd_connect_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ConnectRequest> Function()>>(
          'new_box_autoadd_connect_request_0');
  late final _new_box_autoadd_connect_request_0 =
      _new_box_autoadd_connect_request_0Ptr.asFunction<ffi.Pointer<wire_ConnectRequest> Function()>();

  ffi.Pointer<wire_GreenlightCredentials> new_box_autoadd_greenlight_credentials_0() {
    return _new_box_autoadd_greenlight_credentials_0();
  }

  late final _new_box_autoadd_greenlight_credentials_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_GreenlightCredentials> Function()>>(
          'new_box_autoadd_greenlight_credentials_0');
  late final _new_box_autoadd_greenlight_credentials_0 = _new_box_autoadd_greenlight_credentials_0Ptr
      .asFunction<ffi.Pointer<wire_GreenlightCredentials> Function()>();

  ffi.Pointer<wire_GreenlightNodeConfig> new_box_autoadd_greenlight_node_config_0() {
    return _new_box_autoadd_greenlight_node_config_0();
  }

  late final _new_box_autoadd_greenlight_node_config_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_GreenlightNodeConfig> Function()>>(
          'new_box_autoadd_greenlight_node_config_0');
  late final _new_box_autoadd_greenlight_node_config_0 = _new_box_autoadd_greenlight_node_config_0Ptr
      .asFunction<ffi.Pointer<wire_GreenlightNodeConfig> Function()>();

  ffi.Pointer<ffi.Int64> new_box_autoadd_i64_0(
    int value,
  ) {
    return _new_box_autoadd_i64_0(
      value,
    );
  }

  late final _new_box_autoadd_i64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>('new_box_autoadd_i64_0');
  late final _new_box_autoadd_i64_0 =
      _new_box_autoadd_i64_0Ptr.asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<wire_ListPaymentsRequest> new_box_autoadd_list_payments_request_0() {
    return _new_box_autoadd_list_payments_request_0();
  }

  late final _new_box_autoadd_list_payments_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ListPaymentsRequest> Function()>>(
          'new_box_autoadd_list_payments_request_0');
  late final _new_box_autoadd_list_payments_request_0 = _new_box_autoadd_list_payments_request_0Ptr
      .asFunction<ffi.Pointer<wire_ListPaymentsRequest> Function()>();

  ffi.Pointer<wire_LnUrlAuthRequestData> new_box_autoadd_ln_url_auth_request_data_0() {
    return _new_box_autoadd_ln_url_auth_request_data_0();
  }

  late final _new_box_autoadd_ln_url_auth_request_data_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LnUrlAuthRequestData> Function()>>(
          'new_box_autoadd_ln_url_auth_request_data_0');
  late final _new_box_autoadd_ln_url_auth_request_data_0 = _new_box_autoadd_ln_url_auth_request_data_0Ptr
      .asFunction<ffi.Pointer<wire_LnUrlAuthRequestData> Function()>();

  ffi.Pointer<wire_LnUrlPayRequest> new_box_autoadd_ln_url_pay_request_0() {
    return _new_box_autoadd_ln_url_pay_request_0();
  }

  late final _new_box_autoadd_ln_url_pay_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LnUrlPayRequest> Function()>>(
          'new_box_autoadd_ln_url_pay_request_0');
  late final _new_box_autoadd_ln_url_pay_request_0 =
      _new_box_autoadd_ln_url_pay_request_0Ptr.asFunction<ffi.Pointer<wire_LnUrlPayRequest> Function()>();

  ffi.Pointer<wire_LnUrlWithdrawRequest> new_box_autoadd_ln_url_withdraw_request_0() {
    return _new_box_autoadd_ln_url_withdraw_request_0();
  }

  late final _new_box_autoadd_ln_url_withdraw_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LnUrlWithdrawRequest> Function()>>(
          'new_box_autoadd_ln_url_withdraw_request_0');
  late final _new_box_autoadd_ln_url_withdraw_request_0 = _new_box_autoadd_ln_url_withdraw_request_0Ptr
      .asFunction<ffi.Pointer<wire_LnUrlWithdrawRequest> Function()>();

  ffi.Pointer<wire_NodeConfig> new_box_autoadd_node_config_0() {
    return _new_box_autoadd_node_config_0();
  }

  late final _new_box_autoadd_node_config_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_NodeConfig> Function()>>('new_box_autoadd_node_config_0');
  late final _new_box_autoadd_node_config_0 =
      _new_box_autoadd_node_config_0Ptr.asFunction<ffi.Pointer<wire_NodeConfig> Function()>();

  ffi.Pointer<wire_OpenChannelFeeRequest> new_box_autoadd_open_channel_fee_request_0() {
    return _new_box_autoadd_open_channel_fee_request_0();
  }

  late final _new_box_autoadd_open_channel_fee_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_OpenChannelFeeRequest> Function()>>(
          'new_box_autoadd_open_channel_fee_request_0');
  late final _new_box_autoadd_open_channel_fee_request_0 = _new_box_autoadd_open_channel_fee_request_0Ptr
      .asFunction<ffi.Pointer<wire_OpenChannelFeeRequest> Function()>();

  ffi.Pointer<wire_OpeningFeeParams> new_box_autoadd_opening_fee_params_0() {
    return _new_box_autoadd_opening_fee_params_0();
  }

  late final _new_box_autoadd_opening_fee_params_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_OpeningFeeParams> Function()>>(
          'new_box_autoadd_opening_fee_params_0');
  late final _new_box_autoadd_opening_fee_params_0 =
      _new_box_autoadd_opening_fee_params_0Ptr.asFunction<ffi.Pointer<wire_OpeningFeeParams> Function()>();

  ffi.Pointer<wire_PayOnchainRequest> new_box_autoadd_pay_onchain_request_0() {
    return _new_box_autoadd_pay_onchain_request_0();
  }

  late final _new_box_autoadd_pay_onchain_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_PayOnchainRequest> Function()>>(
          'new_box_autoadd_pay_onchain_request_0');
  late final _new_box_autoadd_pay_onchain_request_0 =
      _new_box_autoadd_pay_onchain_request_0Ptr.asFunction<ffi.Pointer<wire_PayOnchainRequest> Function()>();

  ffi.Pointer<wire_PrepareOnchainPaymentRequest> new_box_autoadd_prepare_onchain_payment_request_0() {
    return _new_box_autoadd_prepare_onchain_payment_request_0();
  }

  late final _new_box_autoadd_prepare_onchain_payment_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_PrepareOnchainPaymentRequest> Function()>>(
          'new_box_autoadd_prepare_onchain_payment_request_0');
  late final _new_box_autoadd_prepare_onchain_payment_request_0 =
      _new_box_autoadd_prepare_onchain_payment_request_0Ptr
          .asFunction<ffi.Pointer<wire_PrepareOnchainPaymentRequest> Function()>();

  ffi.Pointer<wire_PrepareRedeemOnchainFundsRequest>
      new_box_autoadd_prepare_redeem_onchain_funds_request_0() {
    return _new_box_autoadd_prepare_redeem_onchain_funds_request_0();
  }

  late final _new_box_autoadd_prepare_redeem_onchain_funds_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_PrepareRedeemOnchainFundsRequest> Function()>>(
          'new_box_autoadd_prepare_redeem_onchain_funds_request_0');
  late final _new_box_autoadd_prepare_redeem_onchain_funds_request_0 =
      _new_box_autoadd_prepare_redeem_onchain_funds_request_0Ptr
          .asFunction<ffi.Pointer<wire_PrepareRedeemOnchainFundsRequest> Function()>();

  ffi.Pointer<wire_PrepareRefundRequest> new_box_autoadd_prepare_refund_request_0() {
    return _new_box_autoadd_prepare_refund_request_0();
  }

  late final _new_box_autoadd_prepare_refund_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_PrepareRefundRequest> Function()>>(
          'new_box_autoadd_prepare_refund_request_0');
  late final _new_box_autoadd_prepare_refund_request_0 = _new_box_autoadd_prepare_refund_request_0Ptr
      .asFunction<ffi.Pointer<wire_PrepareRefundRequest> Function()>();

  ffi.Pointer<wire_ReceiveOnchainRequest> new_box_autoadd_receive_onchain_request_0() {
    return _new_box_autoadd_receive_onchain_request_0();
  }

  late final _new_box_autoadd_receive_onchain_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ReceiveOnchainRequest> Function()>>(
          'new_box_autoadd_receive_onchain_request_0');
  late final _new_box_autoadd_receive_onchain_request_0 = _new_box_autoadd_receive_onchain_request_0Ptr
      .asFunction<ffi.Pointer<wire_ReceiveOnchainRequest> Function()>();

  ffi.Pointer<wire_ReceivePaymentRequest> new_box_autoadd_receive_payment_request_0() {
    return _new_box_autoadd_receive_payment_request_0();
  }

  late final _new_box_autoadd_receive_payment_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ReceivePaymentRequest> Function()>>(
          'new_box_autoadd_receive_payment_request_0');
  late final _new_box_autoadd_receive_payment_request_0 = _new_box_autoadd_receive_payment_request_0Ptr
      .asFunction<ffi.Pointer<wire_ReceivePaymentRequest> Function()>();

  ffi.Pointer<wire_RedeemOnchainFundsRequest> new_box_autoadd_redeem_onchain_funds_request_0() {
    return _new_box_autoadd_redeem_onchain_funds_request_0();
  }

  late final _new_box_autoadd_redeem_onchain_funds_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RedeemOnchainFundsRequest> Function()>>(
          'new_box_autoadd_redeem_onchain_funds_request_0');
  late final _new_box_autoadd_redeem_onchain_funds_request_0 =
      _new_box_autoadd_redeem_onchain_funds_request_0Ptr
          .asFunction<ffi.Pointer<wire_RedeemOnchainFundsRequest> Function()>();

  ffi.Pointer<wire_RefundRequest> new_box_autoadd_refund_request_0() {
    return _new_box_autoadd_refund_request_0();
  }

  late final _new_box_autoadd_refund_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RefundRequest> Function()>>(
          'new_box_autoadd_refund_request_0');
  late final _new_box_autoadd_refund_request_0 =
      _new_box_autoadd_refund_request_0Ptr.asFunction<ffi.Pointer<wire_RefundRequest> Function()>();

  ffi.Pointer<wire_ReportIssueRequest> new_box_autoadd_report_issue_request_0() {
    return _new_box_autoadd_report_issue_request_0();
  }

  late final _new_box_autoadd_report_issue_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ReportIssueRequest> Function()>>(
          'new_box_autoadd_report_issue_request_0');
  late final _new_box_autoadd_report_issue_request_0 = _new_box_autoadd_report_issue_request_0Ptr
      .asFunction<ffi.Pointer<wire_ReportIssueRequest> Function()>();

  ffi.Pointer<wire_ReportPaymentFailureDetails> new_box_autoadd_report_payment_failure_details_0() {
    return _new_box_autoadd_report_payment_failure_details_0();
  }

  late final _new_box_autoadd_report_payment_failure_details_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ReportPaymentFailureDetails> Function()>>(
          'new_box_autoadd_report_payment_failure_details_0');
  late final _new_box_autoadd_report_payment_failure_details_0 =
      _new_box_autoadd_report_payment_failure_details_0Ptr
          .asFunction<ffi.Pointer<wire_ReportPaymentFailureDetails> Function()>();

  ffi.Pointer<wire_ReverseSwapFeesRequest> new_box_autoadd_reverse_swap_fees_request_0() {
    return _new_box_autoadd_reverse_swap_fees_request_0();
  }

  late final _new_box_autoadd_reverse_swap_fees_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ReverseSwapFeesRequest> Function()>>(
          'new_box_autoadd_reverse_swap_fees_request_0');
  late final _new_box_autoadd_reverse_swap_fees_request_0 = _new_box_autoadd_reverse_swap_fees_request_0Ptr
      .asFunction<ffi.Pointer<wire_ReverseSwapFeesRequest> Function()>();

  ffi.Pointer<wire_SendOnchainRequest> new_box_autoadd_send_onchain_request_0() {
    return _new_box_autoadd_send_onchain_request_0();
  }

  late final _new_box_autoadd_send_onchain_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SendOnchainRequest> Function()>>(
          'new_box_autoadd_send_onchain_request_0');
  late final _new_box_autoadd_send_onchain_request_0 = _new_box_autoadd_send_onchain_request_0Ptr
      .asFunction<ffi.Pointer<wire_SendOnchainRequest> Function()>();

  ffi.Pointer<wire_SendPaymentRequest> new_box_autoadd_send_payment_request_0() {
    return _new_box_autoadd_send_payment_request_0();
  }

  late final _new_box_autoadd_send_payment_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SendPaymentRequest> Function()>>(
          'new_box_autoadd_send_payment_request_0');
  late final _new_box_autoadd_send_payment_request_0 = _new_box_autoadd_send_payment_request_0Ptr
      .asFunction<ffi.Pointer<wire_SendPaymentRequest> Function()>();

  ffi.Pointer<wire_SendSpontaneousPaymentRequest> new_box_autoadd_send_spontaneous_payment_request_0() {
    return _new_box_autoadd_send_spontaneous_payment_request_0();
  }

  late final _new_box_autoadd_send_spontaneous_payment_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SendSpontaneousPaymentRequest> Function()>>(
          'new_box_autoadd_send_spontaneous_payment_request_0');
  late final _new_box_autoadd_send_spontaneous_payment_request_0 =
      _new_box_autoadd_send_spontaneous_payment_request_0Ptr
          .asFunction<ffi.Pointer<wire_SendSpontaneousPaymentRequest> Function()>();

  ffi.Pointer<wire_SignMessageRequest> new_box_autoadd_sign_message_request_0() {
    return _new_box_autoadd_sign_message_request_0();
  }

  late final _new_box_autoadd_sign_message_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SignMessageRequest> Function()>>(
          'new_box_autoadd_sign_message_request_0');
  late final _new_box_autoadd_sign_message_request_0 = _new_box_autoadd_sign_message_request_0Ptr
      .asFunction<ffi.Pointer<wire_SignMessageRequest> Function()>();

  ffi.Pointer<wire_StaticBackupRequest> new_box_autoadd_static_backup_request_0() {
    return _new_box_autoadd_static_backup_request_0();
  }

  late final _new_box_autoadd_static_backup_request_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_StaticBackupRequest> Function()>>(
          'new_box_autoadd_static_backup_request_0');
  late final _new_box_autoadd_static_backup_request_0 = _new_box_autoadd_static_backup_request_0Ptr
      .asFunction<ffi.Pointer<wire_StaticBackupRequest> Function()>();

  ffi.Pointer<ffi.Uint32> new_box_autoadd_u32_0(
    int value,
  ) {
    return _new_box_autoadd_u32_0(
      value,
    );
  }

  late final _new_box_autoadd_u32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>('new_box_autoadd_u32_0');
  late final _new_box_autoadd_u32_0 =
      _new_box_autoadd_u32_0Ptr.asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<ffi.Uint64> new_box_autoadd_u64_0(
    int value,
  ) {
    return _new_box_autoadd_u64_0(
      value,
    );
  }

  late final _new_box_autoadd_u64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>('new_box_autoadd_u64_0');
  late final _new_box_autoadd_u64_0 =
      _new_box_autoadd_u64_0Ptr.asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<wire_list_metadata_filter> new_list_metadata_filter_0(
    int len,
  ) {
    return _new_list_metadata_filter_0(
      len,
    );
  }

  late final _new_list_metadata_filter_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_metadata_filter> Function(ffi.Int32)>>(
          'new_list_metadata_filter_0');
  late final _new_list_metadata_filter_0 =
      _new_list_metadata_filter_0Ptr.asFunction<ffi.Pointer<wire_list_metadata_filter> Function(int)>();

  ffi.Pointer<wire_list_payment_type_filter> new_list_payment_type_filter_0(
    int len,
  ) {
    return _new_list_payment_type_filter_0(
      len,
    );
  }

  late final _new_list_payment_type_filter_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_payment_type_filter> Function(ffi.Int32)>>(
          'new_list_payment_type_filter_0');
  late final _new_list_payment_type_filter_0 = _new_list_payment_type_filter_0Ptr
      .asFunction<ffi.Pointer<wire_list_payment_type_filter> Function(int)>();

  ffi.Pointer<wire_list_tlv_entry> new_list_tlv_entry_0(
    int len,
  ) {
    return _new_list_tlv_entry_0(
      len,
    );
  }

  late final _new_list_tlv_entry_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_tlv_entry> Function(ffi.Int32)>>(
          'new_list_tlv_entry_0');
  late final _new_list_tlv_entry_0 =
      _new_list_tlv_entry_0Ptr.asFunction<ffi.Pointer<wire_list_tlv_entry> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 =
      _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<NodeConfigKind> inflate_NodeConfig_Greenlight() {
    return _inflate_NodeConfig_Greenlight();
  }

  late final _inflate_NodeConfig_GreenlightPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NodeConfigKind> Function()>>('inflate_NodeConfig_Greenlight');
  late final _inflate_NodeConfig_Greenlight =
      _inflate_NodeConfig_GreenlightPtr.asFunction<ffi.Pointer<NodeConfigKind> Function()>();

  ffi.Pointer<ReportIssueRequestKind> inflate_ReportIssueRequest_PaymentFailure() {
    return _inflate_ReportIssueRequest_PaymentFailure();
  }

  late final _inflate_ReportIssueRequest_PaymentFailurePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ReportIssueRequestKind> Function()>>(
          'inflate_ReportIssueRequest_PaymentFailure');
  late final _inflate_ReportIssueRequest_PaymentFailure = _inflate_ReportIssueRequest_PaymentFailurePtr
      .asFunction<ffi.Pointer<ReportIssueRequestKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_GreenlightCredentials extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> developer_key;

  external ffi.Pointer<wire_uint_8_list> developer_cert;
}

final class wire_GreenlightNodeConfig extends ffi.Struct {
  external ffi.Pointer<wire_GreenlightCredentials> partner_credentials;

  external ffi.Pointer<wire_uint_8_list> invite_code;
}

final class wire_NodeConfig_Greenlight extends ffi.Struct {
  external ffi.Pointer<wire_GreenlightNodeConfig> config;
}

final class NodeConfigKind extends ffi.Union {
  external ffi.Pointer<wire_NodeConfig_Greenlight> Greenlight;
}

final class wire_NodeConfig extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<NodeConfigKind> kind;
}

final class wire_Config extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> breezserver;

  external ffi.Pointer<wire_uint_8_list> chainnotifier_url;

  external ffi.Pointer<wire_uint_8_list> mempoolspace_url;

  external ffi.Pointer<wire_uint_8_list> working_dir;

  @ffi.Int32()
  external int network;

  @ffi.Uint32()
  external int payment_timeout_sec;

  external ffi.Pointer<wire_uint_8_list> default_lsp_id;

  external ffi.Pointer<wire_uint_8_list> api_key;

  @ffi.Double()
  external double maxfee_percent;

  @ffi.Uint64()
  external int exemptfee_msat;

  external wire_NodeConfig node_config;
}

final class wire_ConnectRequest extends ffi.Struct {
  external wire_Config config;

  external ffi.Pointer<wire_uint_8_list> seed;

  external ffi.Pointer<ffi.Bool> restore_only;
}

final class wire_ConfigureNodeRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> close_to_address;
}

final class wire_SignMessageRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> message;
}

final class wire_CheckMessageRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> message;

  external ffi.Pointer<wire_uint_8_list> pubkey;

  external ffi.Pointer<wire_uint_8_list> signature;
}

final class wire_StaticBackupRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> working_dir;
}

final class wire_list_payment_type_filter extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_MetadataFilter extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> json_path;

  external ffi.Pointer<wire_uint_8_list> json_value;
}

final class wire_list_metadata_filter extends ffi.Struct {
  external ffi.Pointer<wire_MetadataFilter> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_ListPaymentsRequest extends ffi.Struct {
  external ffi.Pointer<wire_list_payment_type_filter> filters;

  external ffi.Pointer<wire_list_metadata_filter> metadata_filters;

  external ffi.Pointer<ffi.Int64> from_timestamp;

  external ffi.Pointer<ffi.Int64> to_timestamp;

  external ffi.Pointer<ffi.Bool> include_failures;

  external ffi.Pointer<ffi.Uint32> offset;

  external ffi.Pointer<ffi.Uint32> limit;
}

final class wire_SendPaymentRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> bolt11;

  @ffi.Bool()
  external bool use_trampoline;

  external ffi.Pointer<ffi.Uint64> amount_msat;

  external ffi.Pointer<wire_uint_8_list> label;
}

final class wire_TlvEntry extends ffi.Struct {
  @ffi.Uint64()
  external int field_number;

  external ffi.Pointer<wire_uint_8_list> value;
}

final class wire_list_tlv_entry extends ffi.Struct {
  external ffi.Pointer<wire_TlvEntry> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_SendSpontaneousPaymentRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> node_id;

  @ffi.Uint64()
  external int amount_msat;

  external ffi.Pointer<wire_list_tlv_entry> extra_tlvs;

  external ffi.Pointer<wire_uint_8_list> label;
}

final class wire_OpeningFeeParams extends ffi.Struct {
  @ffi.Uint64()
  external int min_msat;

  @ffi.Uint32()
  external int proportional;

  external ffi.Pointer<wire_uint_8_list> valid_until;

  @ffi.Uint32()
  external int max_idle_time;

  @ffi.Uint32()
  external int max_client_to_self_delay;

  external ffi.Pointer<wire_uint_8_list> promise;
}

final class wire_ReceivePaymentRequest extends ffi.Struct {
  @ffi.Uint64()
  external int amount_msat;

  external ffi.Pointer<wire_uint_8_list> description;

  external ffi.Pointer<wire_uint_8_list> preimage;

  external ffi.Pointer<wire_OpeningFeeParams> opening_fee_params;

  external ffi.Pointer<ffi.Bool> use_description_hash;

  external ffi.Pointer<ffi.Uint32> expiry;

  external ffi.Pointer<ffi.Uint32> cltv;
}

final class wire_LnUrlPayRequestData extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> callback;

  @ffi.Uint64()
  external int min_sendable;

  @ffi.Uint64()
  external int max_sendable;

  external ffi.Pointer<wire_uint_8_list> metadata_str;

  @ffi.Uint16()
  external int comment_allowed;

  external ffi.Pointer<wire_uint_8_list> domain;

  @ffi.Bool()
  external bool allows_nostr;

  external ffi.Pointer<wire_uint_8_list> nostr_pubkey;

  external ffi.Pointer<wire_uint_8_list> ln_address;
}

final class wire_LnUrlPayRequest extends ffi.Struct {
  external wire_LnUrlPayRequestData data;

  @ffi.Uint64()
  external int amount_msat;

  @ffi.Bool()
  external bool use_trampoline;

  external ffi.Pointer<wire_uint_8_list> comment;

  external ffi.Pointer<wire_uint_8_list> payment_label;

  external ffi.Pointer<ffi.Bool> validate_success_action_url;
}

final class wire_LnUrlWithdrawRequestData extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> callback;

  external ffi.Pointer<wire_uint_8_list> k1;

  external ffi.Pointer<wire_uint_8_list> default_description;

  @ffi.Uint64()
  external int min_withdrawable;

  @ffi.Uint64()
  external int max_withdrawable;
}

final class wire_LnUrlWithdrawRequest extends ffi.Struct {
  external wire_LnUrlWithdrawRequestData data;

  @ffi.Uint64()
  external int amount_msat;

  external ffi.Pointer<wire_uint_8_list> description;
}

final class wire_LnUrlAuthRequestData extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> k1;

  external ffi.Pointer<wire_uint_8_list> action;

  external ffi.Pointer<wire_uint_8_list> domain;

  external ffi.Pointer<wire_uint_8_list> url;
}

final class wire_ReportPaymentFailureDetails extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> payment_hash;

  external ffi.Pointer<wire_uint_8_list> comment;
}

final class wire_ReportIssueRequest_PaymentFailure extends ffi.Struct {
  external ffi.Pointer<wire_ReportPaymentFailureDetails> data;
}

final class ReportIssueRequestKind extends ffi.Union {
  external ffi.Pointer<wire_ReportIssueRequest_PaymentFailure> PaymentFailure;
}

final class wire_ReportIssueRequest extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<ReportIssueRequestKind> kind;
}

final class wire_SendOnchainRequest extends ffi.Struct {
  @ffi.Uint64()
  external int amount_sat;

  external ffi.Pointer<wire_uint_8_list> onchain_recipient_address;

  external ffi.Pointer<wire_uint_8_list> pair_hash;

  @ffi.Uint32()
  external int sat_per_vbyte;
}

final class wire_PrepareOnchainPaymentResponse extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> fees_hash;

  @ffi.Double()
  external double fees_percentage;

  @ffi.Uint64()
  external int fees_lockup;

  @ffi.Uint64()
  external int fees_claim;

  @ffi.Uint64()
  external int sender_amount_sat;

  @ffi.Uint64()
  external int recipient_amount_sat;

  @ffi.Uint64()
  external int total_fees;
}

final class wire_PayOnchainRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> recipient_address;

  external wire_PrepareOnchainPaymentResponse prepare_res;
}

final class wire_ReceiveOnchainRequest extends ffi.Struct {
  external ffi.Pointer<wire_OpeningFeeParams> opening_fee_params;
}

final class wire_BuyBitcoinRequest extends ffi.Struct {
  @ffi.Int32()
  external int provider;

  external ffi.Pointer<wire_OpeningFeeParams> opening_fee_params;

  external ffi.Pointer<wire_uint_8_list> redirect_url;
}

final class wire_RedeemOnchainFundsRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> to_address;

  @ffi.Uint32()
  external int sat_per_vbyte;
}

final class wire_PrepareRedeemOnchainFundsRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> to_address;

  @ffi.Uint32()
  external int sat_per_vbyte;
}

final class wire_PrepareRefundRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> swap_address;

  external ffi.Pointer<wire_uint_8_list> to_address;

  @ffi.Uint32()
  external int sat_per_vbyte;
}

final class wire_RefundRequest extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> swap_address;

  external ffi.Pointer<wire_uint_8_list> to_address;

  @ffi.Uint32()
  external int sat_per_vbyte;
}

final class wire_OpenChannelFeeRequest extends ffi.Struct {
  external ffi.Pointer<ffi.Uint64> amount_msat;

  external ffi.Pointer<ffi.Uint32> expiry;
}

final class wire_ReverseSwapFeesRequest extends ffi.Struct {
  external ffi.Pointer<ffi.Uint64> send_amount_sat;

  external ffi.Pointer<ffi.Uint32> claim_tx_feerate;
}

final class wire_PrepareOnchainPaymentRequest extends ffi.Struct {
  @ffi.Uint64()
  external int amount_sat;

  @ffi.Int32()
  external int amount_type;

  @ffi.Uint32()
  external int claim_tx_feerate;
}

typedef DartPostCObjectFnType
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;

const int SWAP_PAYMENT_FEE_EXPIRY_SECONDS = 172800;

const int INVOICE_PAYMENT_FEE_EXPIRY_SECONDS = 3600;

const int ESTIMATED_CLAIM_TX_VSIZE = 138;

const int ESTIMATED_LOCKUP_TX_VSIZE = 153;

const int MOCK_REVERSE_SWAP_MIN = 50000;

const int MOCK_REVERSE_SWAP_MAX = 1000000;
