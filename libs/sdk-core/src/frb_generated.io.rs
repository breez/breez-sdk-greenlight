// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.32.

// Section: imports

use super::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate_io!();

// Section: dart2rust

impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
    for *mut wire_cst_list_prim_u_8_strict
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
        unimplemented!()
    }
}
impl
    CstDecode<
        StreamSink<crate::breez_services::BreezEvent, flutter_rust_bridge::for_generated::DcoCodec>,
    > for *mut wire_cst_list_prim_u_8_strict
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> StreamSink<crate::breez_services::BreezEvent, flutter_rust_bridge::for_generated::DcoCodec>
    {
        let raw: String = self.cst_decode();
        StreamSink::deserialize(raw)
    }
}
impl CstDecode<StreamSink<crate::models::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>>
    for *mut wire_cst_list_prim_u_8_strict
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> StreamSink<crate::models::LogEntry, flutter_rust_bridge::for_generated::DcoCodec> {
        let raw: String = self.cst_decode();
        StreamSink::deserialize(raw)
    }
}
impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> String {
        let vec: Vec<u8> = self.cst_decode();
        String::from_utf8(vec).unwrap()
    }
}
impl CstDecode<crate::lnurl::pay::model::AesSuccessActionDataDecrypted>
    for wire_cst_aes_success_action_data_decrypted
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::AesSuccessActionDataDecrypted {
        crate::lnurl::pay::model::AesSuccessActionDataDecrypted {
            description: self.description.cst_decode(),
            plaintext: self.plaintext.cst_decode(),
        }
    }
}
impl CstDecode<crate::lnurl::pay::model::AesSuccessActionDataResult>
    for wire_cst_aes_success_action_data_result
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::AesSuccessActionDataResult {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Decrypted };
                crate::lnurl::pay::model::AesSuccessActionDataResult::Decrypted {
                    data: ans.data.cst_decode(),
                }
            }
            1 => {
                let ans = unsafe { self.kind.ErrorStatus };
                crate::lnurl::pay::model::AesSuccessActionDataResult::ErrorStatus {
                    reason: ans.reason.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::breez_services::BackupFailedData> for wire_cst_backup_failed_data {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::BackupFailedData {
        crate::breez_services::BackupFailedData {
            error: self.error.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::BackupStatus> for wire_cst_backup_status {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::BackupStatus {
        crate::models::BackupStatus {
            backed_up: self.backed_up.cst_decode(),
            last_backup_time: self.last_backup_time.cst_decode(),
        }
    }
}
impl CstDecode<crate::input_parser::BitcoinAddressData> for wire_cst_bitcoin_address_data {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::input_parser::BitcoinAddressData {
        crate::input_parser::BitcoinAddressData {
            address: self.address.cst_decode(),
            network: self.network.cst_decode(),
            amount_sat: self.amount_sat.cst_decode(),
            label: self.label.cst_decode(),
            message: self.message.cst_decode(),
        }
    }
}
impl CstDecode<crate::lnurl::pay::model::AesSuccessActionDataDecrypted>
    for *mut wire_cst_aes_success_action_data_decrypted
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::AesSuccessActionDataDecrypted {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::lnurl::pay::model::AesSuccessActionDataDecrypted>::cst_decode(*wrap)
            .into()
    }
}
impl CstDecode<crate::lnurl::pay::model::AesSuccessActionDataResult>
    for *mut wire_cst_aes_success_action_data_result
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::AesSuccessActionDataResult {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::lnurl::pay::model::AesSuccessActionDataResult>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::breez_services::BackupFailedData> for *mut wire_cst_backup_failed_data {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::BackupFailedData {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::breez_services::BackupFailedData>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::input_parser::BitcoinAddressData> for *mut wire_cst_bitcoin_address_data {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::input_parser::BitcoinAddressData {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::input_parser::BitcoinAddressData>::cst_decode(*wrap).into()
    }
}
impl CstDecode<bool> for *mut bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::models::BuyBitcoinRequest> for *mut wire_cst_buy_bitcoin_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::BuyBitcoinRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::BuyBitcoinRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::breez_services::CheckMessageRequest> for *mut wire_cst_check_message_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::CheckMessageRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::breez_services::CheckMessageRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::ClosedChannelPaymentDetails>
    for *mut wire_cst_closed_channel_payment_details
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ClosedChannelPaymentDetails {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::ClosedChannelPaymentDetails>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::ConfigureNodeRequest> for *mut wire_cst_configure_node_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ConfigureNodeRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::ConfigureNodeRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::ConnectRequest> for *mut wire_cst_connect_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ConnectRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::ConnectRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::GreenlightCredentials> for *mut wire_cst_greenlight_credentials {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::GreenlightCredentials {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::GreenlightCredentials>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::GreenlightNodeConfig> for *mut wire_cst_greenlight_node_config {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::GreenlightNodeConfig {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::GreenlightNodeConfig>::cst_decode(*wrap).into()
    }
}
impl CstDecode<i64> for *mut i64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::breez_services::InvoicePaidDetails> for *mut wire_cst_invoice_paid_details {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::InvoicePaidDetails {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::breez_services::InvoicePaidDetails>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::ListPaymentsRequest> for *mut wire_cst_list_payments_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ListPaymentsRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::ListPaymentsRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::invoice::LNInvoice> for *mut wire_cst_ln_invoice {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::invoice::LNInvoice {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::invoice::LNInvoice>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::LnPaymentDetails> for *mut wire_cst_ln_payment_details {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::LnPaymentDetails {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::LnPaymentDetails>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::input_parser::LnUrlAuthRequestData>
    for *mut wire_cst_ln_url_auth_request_data
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::input_parser::LnUrlAuthRequestData {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::input_parser::LnUrlAuthRequestData>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::input_parser::LnUrlErrorData> for *mut wire_cst_ln_url_error_data {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::input_parser::LnUrlErrorData {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::input_parser::LnUrlErrorData>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::lnurl::pay::model::LnUrlPayErrorData>
    for *mut wire_cst_ln_url_pay_error_data
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::LnUrlPayErrorData {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::lnurl::pay::model::LnUrlPayErrorData>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::LnUrlPayRequest> for *mut wire_cst_ln_url_pay_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::LnUrlPayRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::LnUrlPayRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::input_parser::LnUrlPayRequestData> for *mut wire_cst_ln_url_pay_request_data {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::input_parser::LnUrlPayRequestData {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::input_parser::LnUrlPayRequestData>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::lnurl::pay::model::LnUrlPaySuccessData>
    for *mut wire_cst_ln_url_pay_success_data
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::LnUrlPaySuccessData {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::lnurl::pay::model::LnUrlPaySuccessData>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::LnUrlWithdrawRequest> for *mut wire_cst_ln_url_withdraw_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::LnUrlWithdrawRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::LnUrlWithdrawRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::input_parser::LnUrlWithdrawRequestData>
    for *mut wire_cst_ln_url_withdraw_request_data
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::input_parser::LnUrlWithdrawRequestData {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::input_parser::LnUrlWithdrawRequestData>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::LnUrlWithdrawSuccessData>
    for *mut wire_cst_ln_url_withdraw_success_data
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::LnUrlWithdrawSuccessData {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::LnUrlWithdrawSuccessData>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::lsp::LspInformation> for *mut wire_cst_lsp_information {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lsp::LspInformation {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::lsp::LspInformation>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::lnurl::pay::model::MessageSuccessActionData>
    for *mut wire_cst_message_success_action_data
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::MessageSuccessActionData {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::lnurl::pay::model::MessageSuccessActionData>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::NodeConfig> for *mut wire_cst_node_config {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::NodeConfig {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::NodeConfig>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::NodeCredentials> for *mut wire_cst_node_credentials {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::NodeCredentials {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::NodeCredentials>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::OpenChannelFeeRequest> for *mut wire_cst_open_channel_fee_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::OpenChannelFeeRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::OpenChannelFeeRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::OpeningFeeParams> for *mut wire_cst_opening_fee_params {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::OpeningFeeParams {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::OpeningFeeParams>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::PayOnchainRequest> for *mut wire_cst_pay_onchain_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PayOnchainRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::PayOnchainRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::Payment> for *mut wire_cst_payment {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::Payment {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::Payment>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::breez_services::PaymentFailedData> for *mut wire_cst_payment_failed_data {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::PaymentFailedData {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::breez_services::PaymentFailedData>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::PrepareOnchainPaymentRequest>
    for *mut wire_cst_prepare_onchain_payment_request
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PrepareOnchainPaymentRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::PrepareOnchainPaymentRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::PrepareRedeemOnchainFundsRequest>
    for *mut wire_cst_prepare_redeem_onchain_funds_request
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PrepareRedeemOnchainFundsRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::PrepareRedeemOnchainFundsRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::PrepareRefundRequest> for *mut wire_cst_prepare_refund_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PrepareRefundRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::PrepareRefundRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::ReceiveOnchainRequest> for *mut wire_cst_receive_onchain_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReceiveOnchainRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::ReceiveOnchainRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::ReceivePaymentRequest> for *mut wire_cst_receive_payment_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReceivePaymentRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::ReceivePaymentRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::RedeemOnchainFundsRequest>
    for *mut wire_cst_redeem_onchain_funds_request
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::RedeemOnchainFundsRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::RedeemOnchainFundsRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::RefundRequest> for *mut wire_cst_refund_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::RefundRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::RefundRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::ReportIssueRequest> for *mut wire_cst_report_issue_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReportIssueRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::ReportIssueRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::ReportPaymentFailureDetails>
    for *mut wire_cst_report_payment_failure_details
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReportPaymentFailureDetails {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::ReportPaymentFailureDetails>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::ReverseSwapFeesRequest> for *mut wire_cst_reverse_swap_fees_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReverseSwapFeesRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::ReverseSwapFeesRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::ReverseSwapInfo> for *mut wire_cst_reverse_swap_info {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReverseSwapInfo {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::ReverseSwapInfo>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::SendOnchainRequest> for *mut wire_cst_send_onchain_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SendOnchainRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::SendOnchainRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::SendPaymentRequest> for *mut wire_cst_send_payment_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SendPaymentRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::SendPaymentRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::SendSpontaneousPaymentRequest>
    for *mut wire_cst_send_spontaneous_payment_request
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SendSpontaneousPaymentRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::SendSpontaneousPaymentRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::breez_services::SignMessageRequest> for *mut wire_cst_sign_message_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::SignMessageRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::breez_services::SignMessageRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::StaticBackupRequest> for *mut wire_cst_static_backup_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::StaticBackupRequest {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::StaticBackupRequest>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::lnurl::pay::model::SuccessActionProcessed>
    for *mut wire_cst_success_action_processed
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::SuccessActionProcessed {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::lnurl::pay::model::SuccessActionProcessed>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::models::SwapInfo> for *mut wire_cst_swap_info {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SwapInfo {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::models::SwapInfo>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::fiat::Symbol> for *mut wire_cst_symbol {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::fiat::Symbol {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::fiat::Symbol>::cst_decode(*wrap).into()
    }
}
impl CstDecode<u32> for *mut u32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u32 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<u64> for *mut u64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u64 {
        unsafe { *flutter_rust_bridge::for_generated::box_from_leak_ptr(self) }
    }
}
impl CstDecode<crate::lnurl::pay::model::UrlSuccessActionData>
    for *mut wire_cst_url_success_action_data
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::UrlSuccessActionData {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::lnurl::pay::model::UrlSuccessActionData>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::breez_services::BreezEvent> for wire_cst_breez_event {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::BreezEvent {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.NewBlock };
                crate::breez_services::BreezEvent::NewBlock {
                    block: ans.block.cst_decode(),
                }
            }
            1 => {
                let ans = unsafe { self.kind.InvoicePaid };
                crate::breez_services::BreezEvent::InvoicePaid {
                    details: ans.details.cst_decode(),
                }
            }
            2 => crate::breez_services::BreezEvent::Synced,
            3 => {
                let ans = unsafe { self.kind.PaymentSucceed };
                crate::breez_services::BreezEvent::PaymentSucceed {
                    details: ans.details.cst_decode(),
                }
            }
            4 => {
                let ans = unsafe { self.kind.PaymentFailed };
                crate::breez_services::BreezEvent::PaymentFailed {
                    details: ans.details.cst_decode(),
                }
            }
            5 => crate::breez_services::BreezEvent::BackupStarted,
            6 => crate::breez_services::BreezEvent::BackupSucceeded,
            7 => {
                let ans = unsafe { self.kind.BackupFailed };
                crate::breez_services::BreezEvent::BackupFailed {
                    details: ans.details.cst_decode(),
                }
            }
            8 => {
                let ans = unsafe { self.kind.SwapUpdated };
                crate::breez_services::BreezEvent::SwapUpdated {
                    details: ans.details.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::models::BuyBitcoinRequest> for wire_cst_buy_bitcoin_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::BuyBitcoinRequest {
        crate::models::BuyBitcoinRequest {
            provider: self.provider.cst_decode(),
            opening_fee_params: self.opening_fee_params.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::BuyBitcoinResponse> for wire_cst_buy_bitcoin_response {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::BuyBitcoinResponse {
        crate::models::BuyBitcoinResponse {
            url: self.url.cst_decode(),
            opening_fee_params: self.opening_fee_params.cst_decode(),
        }
    }
}
impl CstDecode<crate::breez_services::CheckMessageRequest> for wire_cst_check_message_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::CheckMessageRequest {
        crate::breez_services::CheckMessageRequest {
            message: self.message.cst_decode(),
            pubkey: self.pubkey.cst_decode(),
            signature: self.signature.cst_decode(),
        }
    }
}
impl CstDecode<crate::breez_services::CheckMessageResponse> for wire_cst_check_message_response {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::CheckMessageResponse {
        crate::breez_services::CheckMessageResponse {
            is_valid: self.is_valid.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ClosedChannelPaymentDetails>
    for wire_cst_closed_channel_payment_details
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ClosedChannelPaymentDetails {
        crate::models::ClosedChannelPaymentDetails {
            state: self.state.cst_decode(),
            funding_txid: self.funding_txid.cst_decode(),
            short_channel_id: self.short_channel_id.cst_decode(),
            closing_txid: self.closing_txid.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::Config> for wire_cst_config {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::Config {
        crate::models::Config {
            breezserver: self.breezserver.cst_decode(),
            chainnotifier_url: self.chainnotifier_url.cst_decode(),
            mempoolspace_url: self.mempoolspace_url.cst_decode(),
            working_dir: self.working_dir.cst_decode(),
            network: self.network.cst_decode(),
            payment_timeout_sec: self.payment_timeout_sec.cst_decode(),
            default_lsp_id: self.default_lsp_id.cst_decode(),
            api_key: self.api_key.cst_decode(),
            maxfee_percent: self.maxfee_percent.cst_decode(),
            exemptfee_msat: self.exemptfee_msat.cst_decode(),
            node_config: self.node_config.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ConfigureNodeRequest> for wire_cst_configure_node_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ConfigureNodeRequest {
        crate::models::ConfigureNodeRequest {
            close_to_address: self.close_to_address.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ConnectRequest> for wire_cst_connect_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ConnectRequest {
        crate::models::ConnectRequest {
            config: self.config.cst_decode(),
            seed: self.seed.cst_decode(),
            restore_only: self.restore_only.cst_decode(),
        }
    }
}
impl CstDecode<crate::fiat::CurrencyInfo> for wire_cst_currency_info {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::fiat::CurrencyInfo {
        crate::fiat::CurrencyInfo {
            name: self.name.cst_decode(),
            fraction_size: self.fraction_size.cst_decode(),
            spacing: self.spacing.cst_decode(),
            symbol: self.symbol.cst_decode(),
            uniq_symbol: self.uniq_symbol.cst_decode(),
            localized_name: self.localized_name.cst_decode(),
            locale_overrides: self.locale_overrides.cst_decode(),
        }
    }
}
impl CstDecode<crate::fiat::FiatCurrency> for wire_cst_fiat_currency {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::fiat::FiatCurrency {
        crate::fiat::FiatCurrency {
            id: self.id.cst_decode(),
            info: self.info.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::GreenlightCredentials> for wire_cst_greenlight_credentials {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::GreenlightCredentials {
        crate::models::GreenlightCredentials {
            device_key: self.device_key.cst_decode(),
            device_cert: self.device_cert.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::GreenlightNodeConfig> for wire_cst_greenlight_node_config {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::GreenlightNodeConfig {
        crate::models::GreenlightNodeConfig {
            partner_credentials: self.partner_credentials.cst_decode(),
            invite_code: self.invite_code.cst_decode(),
        }
    }
}
impl CstDecode<crate::input_parser::InputType> for wire_cst_input_type {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::input_parser::InputType {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.BitcoinAddress };
                crate::input_parser::InputType::BitcoinAddress {
                    address: ans.address.cst_decode(),
                }
            }
            1 => {
                let ans = unsafe { self.kind.Bolt11 };
                crate::input_parser::InputType::Bolt11 {
                    invoice: ans.invoice.cst_decode(),
                }
            }
            2 => {
                let ans = unsafe { self.kind.NodeId };
                crate::input_parser::InputType::NodeId {
                    node_id: ans.node_id.cst_decode(),
                }
            }
            3 => {
                let ans = unsafe { self.kind.Url };
                crate::input_parser::InputType::Url {
                    url: ans.url.cst_decode(),
                }
            }
            4 => {
                let ans = unsafe { self.kind.LnUrlPay };
                crate::input_parser::InputType::LnUrlPay {
                    data: ans.data.cst_decode(),
                }
            }
            5 => {
                let ans = unsafe { self.kind.LnUrlWithdraw };
                crate::input_parser::InputType::LnUrlWithdraw {
                    data: ans.data.cst_decode(),
                }
            }
            6 => {
                let ans = unsafe { self.kind.LnUrlAuth };
                crate::input_parser::InputType::LnUrlAuth {
                    data: ans.data.cst_decode(),
                }
            }
            7 => {
                let ans = unsafe { self.kind.LnUrlError };
                crate::input_parser::InputType::LnUrlError {
                    data: ans.data.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::breez_services::InvoicePaidDetails> for wire_cst_invoice_paid_details {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::InvoicePaidDetails {
        crate::breez_services::InvoicePaidDetails {
            payment_hash: self.payment_hash.cst_decode(),
            bolt11: self.bolt11.cst_decode(),
            payment: self.payment.cst_decode(),
        }
    }
}
impl CstDecode<Vec<String>> for *mut wire_cst_list_String {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<String> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::fiat::FiatCurrency>> for *mut wire_cst_list_fiat_currency {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::fiat::FiatCurrency> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::fiat::LocaleOverrides>> for *mut wire_cst_list_locale_overrides {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::fiat::LocaleOverrides> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::fiat::LocalizedName>> for *mut wire_cst_list_localized_name {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::fiat::LocalizedName> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::lsp::LspInformation>> for *mut wire_cst_list_lsp_information {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::lsp::LspInformation> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::models::MetadataFilter>> for *mut wire_cst_list_metadata_filter {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::models::MetadataFilter> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::models::OpeningFeeParams>> for *mut wire_cst_list_opening_fee_params {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::models::OpeningFeeParams> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::models::Payment>> for *mut wire_cst_list_payment {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::models::Payment> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::models::PaymentTypeFilter>> for *mut wire_cst_list_payment_type_filter {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::models::PaymentTypeFilter> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<crate::models::ListPaymentsRequest> for wire_cst_list_payments_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ListPaymentsRequest {
        crate::models::ListPaymentsRequest {
            filters: self.filters.cst_decode(),
            metadata_filters: self.metadata_filters.cst_decode(),
            from_timestamp: self.from_timestamp.cst_decode(),
            to_timestamp: self.to_timestamp.cst_decode(),
            include_failures: self.include_failures.cst_decode(),
            offset: self.offset.cst_decode(),
            limit: self.limit.cst_decode(),
        }
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<crate::fiat::Rate>> for *mut wire_cst_list_rate {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::fiat::Rate> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::models::ReverseSwapInfo>> for *mut wire_cst_list_reverse_swap_info {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::models::ReverseSwapInfo> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::invoice::RouteHint>> for *mut wire_cst_list_route_hint {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::invoice::RouteHint> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::invoice::RouteHintHop>> for *mut wire_cst_list_route_hint_hop {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::invoice::RouteHintHop> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::models::SwapInfo>> for *mut wire_cst_list_swap_info {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::models::SwapInfo> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::models::TlvEntry>> for *mut wire_cst_list_tlv_entry {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::models::TlvEntry> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::models::UnspentTransactionOutput>>
    for *mut wire_cst_list_unspent_transaction_output
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::models::UnspentTransactionOutput> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<crate::invoice::LNInvoice> for wire_cst_ln_invoice {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::invoice::LNInvoice {
        crate::invoice::LNInvoice {
            bolt11: self.bolt11.cst_decode(),
            network: self.network.cst_decode(),
            payee_pubkey: self.payee_pubkey.cst_decode(),
            payment_hash: self.payment_hash.cst_decode(),
            description: self.description.cst_decode(),
            description_hash: self.description_hash.cst_decode(),
            amount_msat: self.amount_msat.cst_decode(),
            timestamp: self.timestamp.cst_decode(),
            expiry: self.expiry.cst_decode(),
            routing_hints: self.routing_hints.cst_decode(),
            payment_secret: self.payment_secret.cst_decode(),
            min_final_cltv_expiry_delta: self.min_final_cltv_expiry_delta.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::LnPaymentDetails> for wire_cst_ln_payment_details {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::LnPaymentDetails {
        crate::models::LnPaymentDetails {
            payment_hash: self.payment_hash.cst_decode(),
            label: self.label.cst_decode(),
            destination_pubkey: self.destination_pubkey.cst_decode(),
            payment_preimage: self.payment_preimage.cst_decode(),
            keysend: self.keysend.cst_decode(),
            bolt11: self.bolt11.cst_decode(),
            open_channel_bolt11: self.open_channel_bolt11.cst_decode(),
            lnurl_success_action: self.lnurl_success_action.cst_decode(),
            lnurl_pay_domain: self.lnurl_pay_domain.cst_decode(),
            ln_address: self.ln_address.cst_decode(),
            lnurl_metadata: self.lnurl_metadata.cst_decode(),
            lnurl_withdraw_endpoint: self.lnurl_withdraw_endpoint.cst_decode(),
            swap_info: self.swap_info.cst_decode(),
            reverse_swap_info: self.reverse_swap_info.cst_decode(),
            pending_expiration_block: self.pending_expiration_block.cst_decode(),
        }
    }
}
impl CstDecode<crate::input_parser::LnUrlAuthRequestData> for wire_cst_ln_url_auth_request_data {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::input_parser::LnUrlAuthRequestData {
        crate::input_parser::LnUrlAuthRequestData {
            k1: self.k1.cst_decode(),
            action: self.action.cst_decode(),
            domain: self.domain.cst_decode(),
            url: self.url.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::LnUrlCallbackStatus> for wire_cst_ln_url_callback_status {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::LnUrlCallbackStatus {
        match self.tag {
            0 => crate::models::LnUrlCallbackStatus::Ok,
            1 => {
                let ans = unsafe { self.kind.ErrorStatus };
                crate::models::LnUrlCallbackStatus::ErrorStatus {
                    data: ans.data.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::input_parser::LnUrlErrorData> for wire_cst_ln_url_error_data {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::input_parser::LnUrlErrorData {
        crate::input_parser::LnUrlErrorData {
            reason: self.reason.cst_decode(),
        }
    }
}
impl CstDecode<crate::lnurl::pay::model::LnUrlPayErrorData> for wire_cst_ln_url_pay_error_data {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::LnUrlPayErrorData {
        crate::lnurl::pay::model::LnUrlPayErrorData {
            payment_hash: self.payment_hash.cst_decode(),
            reason: self.reason.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::LnUrlPayRequest> for wire_cst_ln_url_pay_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::LnUrlPayRequest {
        crate::models::LnUrlPayRequest {
            data: self.data.cst_decode(),
            amount_msat: self.amount_msat.cst_decode(),
            comment: self.comment.cst_decode(),
            payment_label: self.payment_label.cst_decode(),
        }
    }
}
impl CstDecode<crate::input_parser::LnUrlPayRequestData> for wire_cst_ln_url_pay_request_data {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::input_parser::LnUrlPayRequestData {
        crate::input_parser::LnUrlPayRequestData {
            callback: self.callback.cst_decode(),
            min_sendable: self.min_sendable.cst_decode(),
            max_sendable: self.max_sendable.cst_decode(),
            metadata_str: self.metadata_str.cst_decode(),
            comment_allowed: self.comment_allowed.cst_decode(),
            domain: self.domain.cst_decode(),
            allows_nostr: self.allows_nostr.cst_decode(),
            nostr_pubkey: self.nostr_pubkey.cst_decode(),
            ln_address: self.ln_address.cst_decode(),
        }
    }
}
impl CstDecode<crate::lnurl::pay::model::LnUrlPayResult> for wire_cst_ln_url_pay_result {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::LnUrlPayResult {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.EndpointSuccess };
                crate::lnurl::pay::model::LnUrlPayResult::EndpointSuccess {
                    data: ans.data.cst_decode(),
                }
            }
            1 => {
                let ans = unsafe { self.kind.EndpointError };
                crate::lnurl::pay::model::LnUrlPayResult::EndpointError {
                    data: ans.data.cst_decode(),
                }
            }
            2 => {
                let ans = unsafe { self.kind.PayError };
                crate::lnurl::pay::model::LnUrlPayResult::PayError {
                    data: ans.data.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::lnurl::pay::model::LnUrlPaySuccessData> for wire_cst_ln_url_pay_success_data {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::LnUrlPaySuccessData {
        crate::lnurl::pay::model::LnUrlPaySuccessData {
            payment: self.payment.cst_decode(),
            success_action: self.success_action.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::LnUrlWithdrawRequest> for wire_cst_ln_url_withdraw_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::LnUrlWithdrawRequest {
        crate::models::LnUrlWithdrawRequest {
            data: self.data.cst_decode(),
            amount_msat: self.amount_msat.cst_decode(),
            description: self.description.cst_decode(),
        }
    }
}
impl CstDecode<crate::input_parser::LnUrlWithdrawRequestData>
    for wire_cst_ln_url_withdraw_request_data
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::input_parser::LnUrlWithdrawRequestData {
        crate::input_parser::LnUrlWithdrawRequestData {
            callback: self.callback.cst_decode(),
            k1: self.k1.cst_decode(),
            default_description: self.default_description.cst_decode(),
            min_withdrawable: self.min_withdrawable.cst_decode(),
            max_withdrawable: self.max_withdrawable.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::LnUrlWithdrawResult> for wire_cst_ln_url_withdraw_result {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::LnUrlWithdrawResult {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Ok };
                crate::models::LnUrlWithdrawResult::Ok {
                    data: ans.data.cst_decode(),
                }
            }
            1 => {
                let ans = unsafe { self.kind.ErrorStatus };
                crate::models::LnUrlWithdrawResult::ErrorStatus {
                    data: ans.data.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::models::LnUrlWithdrawSuccessData> for wire_cst_ln_url_withdraw_success_data {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::LnUrlWithdrawSuccessData {
        crate::models::LnUrlWithdrawSuccessData {
            invoice: self.invoice.cst_decode(),
        }
    }
}
impl CstDecode<crate::fiat::LocaleOverrides> for wire_cst_locale_overrides {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::fiat::LocaleOverrides {
        crate::fiat::LocaleOverrides {
            locale: self.locale.cst_decode(),
            spacing: self.spacing.cst_decode(),
            symbol: self.symbol.cst_decode(),
        }
    }
}
impl CstDecode<crate::fiat::LocalizedName> for wire_cst_localized_name {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::fiat::LocalizedName {
        crate::fiat::LocalizedName {
            locale: self.locale.cst_decode(),
            name: self.name.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::LogEntry> for wire_cst_log_entry {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::LogEntry {
        crate::models::LogEntry {
            line: self.line.cst_decode(),
            level: self.level.cst_decode(),
        }
    }
}
impl CstDecode<crate::lsp::LspInformation> for wire_cst_lsp_information {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lsp::LspInformation {
        crate::lsp::LspInformation {
            id: self.id.cst_decode(),
            name: self.name.cst_decode(),
            widget_url: self.widget_url.cst_decode(),
            pubkey: self.pubkey.cst_decode(),
            host: self.host.cst_decode(),
            base_fee_msat: self.base_fee_msat.cst_decode(),
            fee_rate: self.fee_rate.cst_decode(),
            time_lock_delta: self.time_lock_delta.cst_decode(),
            min_htlc_msat: self.min_htlc_msat.cst_decode(),
            lsp_pubkey: self.lsp_pubkey.cst_decode(),
            opening_fee_params_list: self.opening_fee_params_list.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::MaxReverseSwapAmountResponse>
    for wire_cst_max_reverse_swap_amount_response
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::MaxReverseSwapAmountResponse {
        crate::models::MaxReverseSwapAmountResponse {
            total_sat: self.total_sat.cst_decode(),
        }
    }
}
impl CstDecode<crate::lnurl::pay::model::MessageSuccessActionData>
    for wire_cst_message_success_action_data
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::MessageSuccessActionData {
        crate::lnurl::pay::model::MessageSuccessActionData {
            message: self.message.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::MetadataFilter> for wire_cst_metadata_filter {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::MetadataFilter {
        crate::models::MetadataFilter {
            json_path: self.json_path.cst_decode(),
            json_value: self.json_value.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::NodeConfig> for wire_cst_node_config {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::NodeConfig {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Greenlight };
                crate::models::NodeConfig::Greenlight {
                    config: ans.config.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::models::NodeCredentials> for wire_cst_node_credentials {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::NodeCredentials {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Greenlight };
                crate::models::NodeCredentials::Greenlight {
                    credentials: ans.credentials.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::models::NodeState> for wire_cst_node_state {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::NodeState {
        crate::models::NodeState {
            id: self.id.cst_decode(),
            block_height: self.block_height.cst_decode(),
            channels_balance_msat: self.channels_balance_msat.cst_decode(),
            onchain_balance_msat: self.onchain_balance_msat.cst_decode(),
            pending_onchain_balance_msat: self.pending_onchain_balance_msat.cst_decode(),
            utxos: self.utxos.cst_decode(),
            max_payable_msat: self.max_payable_msat.cst_decode(),
            max_receivable_msat: self.max_receivable_msat.cst_decode(),
            max_single_payment_amount_msat: self.max_single_payment_amount_msat.cst_decode(),
            max_chan_reserve_msats: self.max_chan_reserve_msats.cst_decode(),
            connected_peers: self.connected_peers.cst_decode(),
            inbound_liquidity_msats: self.inbound_liquidity_msats.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::OnchainPaymentLimitsResponse>
    for wire_cst_onchain_payment_limits_response
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::OnchainPaymentLimitsResponse {
        crate::models::OnchainPaymentLimitsResponse {
            min_sat: self.min_sat.cst_decode(),
            max_sat: self.max_sat.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::OpenChannelFeeRequest> for wire_cst_open_channel_fee_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::OpenChannelFeeRequest {
        crate::models::OpenChannelFeeRequest {
            amount_msat: self.amount_msat.cst_decode(),
            expiry: self.expiry.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::OpenChannelFeeResponse> for wire_cst_open_channel_fee_response {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::OpenChannelFeeResponse {
        crate::models::OpenChannelFeeResponse {
            fee_msat: self.fee_msat.cst_decode(),
            fee_params: self.fee_params.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::OpeningFeeParams> for wire_cst_opening_fee_params {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::OpeningFeeParams {
        crate::models::OpeningFeeParams {
            min_msat: self.min_msat.cst_decode(),
            proportional: self.proportional.cst_decode(),
            valid_until: self.valid_until.cst_decode(),
            max_idle_time: self.max_idle_time.cst_decode(),
            max_client_to_self_delay: self.max_client_to_self_delay.cst_decode(),
            promise: self.promise.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::OpeningFeeParamsMenu> for wire_cst_opening_fee_params_menu {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::OpeningFeeParamsMenu {
        crate::models::OpeningFeeParamsMenu {
            values: self.values.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::PayOnchainRequest> for wire_cst_pay_onchain_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PayOnchainRequest {
        crate::models::PayOnchainRequest {
            recipient_address: self.recipient_address.cst_decode(),
            prepare_res: self.prepare_res.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::PayOnchainResponse> for wire_cst_pay_onchain_response {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PayOnchainResponse {
        crate::models::PayOnchainResponse {
            reverse_swap_info: self.reverse_swap_info.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::Payment> for wire_cst_payment {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::Payment {
        crate::models::Payment {
            id: self.id.cst_decode(),
            payment_type: self.payment_type.cst_decode(),
            payment_time: self.payment_time.cst_decode(),
            amount_msat: self.amount_msat.cst_decode(),
            fee_msat: self.fee_msat.cst_decode(),
            status: self.status.cst_decode(),
            error: self.error.cst_decode(),
            description: self.description.cst_decode(),
            details: self.details.cst_decode(),
            metadata: self.metadata.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::PaymentDetails> for wire_cst_payment_details {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PaymentDetails {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Ln };
                crate::models::PaymentDetails::Ln {
                    data: ans.data.cst_decode(),
                }
            }
            1 => {
                let ans = unsafe { self.kind.ClosedChannel };
                crate::models::PaymentDetails::ClosedChannel {
                    data: ans.data.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::breez_services::PaymentFailedData> for wire_cst_payment_failed_data {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::PaymentFailedData {
        crate::breez_services::PaymentFailedData {
            error: self.error.cst_decode(),
            node_id: self.node_id.cst_decode(),
            invoice: self.invoice.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::PrepareOnchainPaymentRequest>
    for wire_cst_prepare_onchain_payment_request
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PrepareOnchainPaymentRequest {
        crate::models::PrepareOnchainPaymentRequest {
            amount_sat: self.amount_sat.cst_decode(),
            amount_type: self.amount_type.cst_decode(),
            claim_tx_feerate: self.claim_tx_feerate.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::PrepareOnchainPaymentResponse>
    for wire_cst_prepare_onchain_payment_response
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PrepareOnchainPaymentResponse {
        crate::models::PrepareOnchainPaymentResponse {
            fees_hash: self.fees_hash.cst_decode(),
            fees_percentage: self.fees_percentage.cst_decode(),
            fees_lockup: self.fees_lockup.cst_decode(),
            fees_claim: self.fees_claim.cst_decode(),
            sender_amount_sat: self.sender_amount_sat.cst_decode(),
            recipient_amount_sat: self.recipient_amount_sat.cst_decode(),
            total_fees: self.total_fees.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::PrepareRedeemOnchainFundsRequest>
    for wire_cst_prepare_redeem_onchain_funds_request
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PrepareRedeemOnchainFundsRequest {
        crate::models::PrepareRedeemOnchainFundsRequest {
            to_address: self.to_address.cst_decode(),
            sat_per_vbyte: self.sat_per_vbyte.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::PrepareRedeemOnchainFundsResponse>
    for wire_cst_prepare_redeem_onchain_funds_response
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PrepareRedeemOnchainFundsResponse {
        crate::models::PrepareRedeemOnchainFundsResponse {
            tx_weight: self.tx_weight.cst_decode(),
            tx_fee_sat: self.tx_fee_sat.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::PrepareRefundRequest> for wire_cst_prepare_refund_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PrepareRefundRequest {
        crate::models::PrepareRefundRequest {
            swap_address: self.swap_address.cst_decode(),
            to_address: self.to_address.cst_decode(),
            sat_per_vbyte: self.sat_per_vbyte.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::PrepareRefundResponse> for wire_cst_prepare_refund_response {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PrepareRefundResponse {
        crate::models::PrepareRefundResponse {
            refund_tx_weight: self.refund_tx_weight.cst_decode(),
            refund_tx_fee_sat: self.refund_tx_fee_sat.cst_decode(),
        }
    }
}
impl CstDecode<crate::fiat::Rate> for wire_cst_rate {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::fiat::Rate {
        crate::fiat::Rate {
            coin: self.coin.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ReceiveOnchainRequest> for wire_cst_receive_onchain_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReceiveOnchainRequest {
        crate::models::ReceiveOnchainRequest {
            opening_fee_params: self.opening_fee_params.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ReceivePaymentRequest> for wire_cst_receive_payment_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReceivePaymentRequest {
        crate::models::ReceivePaymentRequest {
            amount_msat: self.amount_msat.cst_decode(),
            description: self.description.cst_decode(),
            preimage: self.preimage.cst_decode(),
            opening_fee_params: self.opening_fee_params.cst_decode(),
            use_description_hash: self.use_description_hash.cst_decode(),
            expiry: self.expiry.cst_decode(),
            cltv: self.cltv.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ReceivePaymentResponse> for wire_cst_receive_payment_response {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReceivePaymentResponse {
        crate::models::ReceivePaymentResponse {
            ln_invoice: self.ln_invoice.cst_decode(),
            opening_fee_params: self.opening_fee_params.cst_decode(),
            opening_fee_msat: self.opening_fee_msat.cst_decode(),
        }
    }
}
impl CstDecode<crate::chain::RecommendedFees> for wire_cst_recommended_fees {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::chain::RecommendedFees {
        crate::chain::RecommendedFees {
            fastest_fee: self.fastest_fee.cst_decode(),
            half_hour_fee: self.half_hour_fee.cst_decode(),
            hour_fee: self.hour_fee.cst_decode(),
            economy_fee: self.economy_fee.cst_decode(),
            minimum_fee: self.minimum_fee.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::RedeemOnchainFundsRequest> for wire_cst_redeem_onchain_funds_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::RedeemOnchainFundsRequest {
        crate::models::RedeemOnchainFundsRequest {
            to_address: self.to_address.cst_decode(),
            sat_per_vbyte: self.sat_per_vbyte.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::RedeemOnchainFundsResponse>
    for wire_cst_redeem_onchain_funds_response
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::RedeemOnchainFundsResponse {
        crate::models::RedeemOnchainFundsResponse {
            txid: self.txid.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::RefundRequest> for wire_cst_refund_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::RefundRequest {
        crate::models::RefundRequest {
            swap_address: self.swap_address.cst_decode(),
            to_address: self.to_address.cst_decode(),
            sat_per_vbyte: self.sat_per_vbyte.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::RefundResponse> for wire_cst_refund_response {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::RefundResponse {
        crate::models::RefundResponse {
            refund_tx_id: self.refund_tx_id.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ReportIssueRequest> for wire_cst_report_issue_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReportIssueRequest {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.PaymentFailure };
                crate::models::ReportIssueRequest::PaymentFailure {
                    data: ans.data.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::models::ReportPaymentFailureDetails>
    for wire_cst_report_payment_failure_details
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReportPaymentFailureDetails {
        crate::models::ReportPaymentFailureDetails {
            payment_hash: self.payment_hash.cst_decode(),
            comment: self.comment.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ReverseSwapFeesRequest> for wire_cst_reverse_swap_fees_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReverseSwapFeesRequest {
        crate::models::ReverseSwapFeesRequest {
            send_amount_sat: self.send_amount_sat.cst_decode(),
            claim_tx_feerate: self.claim_tx_feerate.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ReverseSwapInfo> for wire_cst_reverse_swap_info {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReverseSwapInfo {
        crate::models::ReverseSwapInfo {
            id: self.id.cst_decode(),
            claim_pubkey: self.claim_pubkey.cst_decode(),
            lockup_txid: self.lockup_txid.cst_decode(),
            claim_txid: self.claim_txid.cst_decode(),
            onchain_amount_sat: self.onchain_amount_sat.cst_decode(),
            status: self.status.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ReverseSwapPairInfo> for wire_cst_reverse_swap_pair_info {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReverseSwapPairInfo {
        crate::models::ReverseSwapPairInfo {
            min: self.min.cst_decode(),
            max: self.max.cst_decode(),
            fees_hash: self.fees_hash.cst_decode(),
            fees_percentage: self.fees_percentage.cst_decode(),
            fees_lockup: self.fees_lockup.cst_decode(),
            fees_claim: self.fees_claim.cst_decode(),
            total_fees: self.total_fees.cst_decode(),
        }
    }
}
impl CstDecode<crate::invoice::RouteHint> for wire_cst_route_hint {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::invoice::RouteHint {
        crate::invoice::RouteHint {
            hops: self.hops.cst_decode(),
        }
    }
}
impl CstDecode<crate::invoice::RouteHintHop> for wire_cst_route_hint_hop {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::invoice::RouteHintHop {
        crate::invoice::RouteHintHop {
            src_node_id: self.src_node_id.cst_decode(),
            short_channel_id: self.short_channel_id.cst_decode(),
            fees_base_msat: self.fees_base_msat.cst_decode(),
            fees_proportional_millionths: self.fees_proportional_millionths.cst_decode(),
            cltv_expiry_delta: self.cltv_expiry_delta.cst_decode(),
            htlc_minimum_msat: self.htlc_minimum_msat.cst_decode(),
            htlc_maximum_msat: self.htlc_maximum_msat.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::SendOnchainRequest> for wire_cst_send_onchain_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SendOnchainRequest {
        crate::models::SendOnchainRequest {
            amount_sat: self.amount_sat.cst_decode(),
            onchain_recipient_address: self.onchain_recipient_address.cst_decode(),
            pair_hash: self.pair_hash.cst_decode(),
            sat_per_vbyte: self.sat_per_vbyte.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::SendOnchainResponse> for wire_cst_send_onchain_response {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SendOnchainResponse {
        crate::models::SendOnchainResponse {
            reverse_swap_info: self.reverse_swap_info.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::SendPaymentRequest> for wire_cst_send_payment_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SendPaymentRequest {
        crate::models::SendPaymentRequest {
            bolt11: self.bolt11.cst_decode(),
            amount_msat: self.amount_msat.cst_decode(),
            label: self.label.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::SendPaymentResponse> for wire_cst_send_payment_response {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SendPaymentResponse {
        crate::models::SendPaymentResponse {
            payment: self.payment.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::SendSpontaneousPaymentRequest>
    for wire_cst_send_spontaneous_payment_request
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SendSpontaneousPaymentRequest {
        crate::models::SendSpontaneousPaymentRequest {
            node_id: self.node_id.cst_decode(),
            amount_msat: self.amount_msat.cst_decode(),
            extra_tlvs: self.extra_tlvs.cst_decode(),
            label: self.label.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ServiceHealthCheckResponse>
    for wire_cst_service_health_check_response
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ServiceHealthCheckResponse {
        crate::models::ServiceHealthCheckResponse {
            status: self.status.cst_decode(),
        }
    }
}
impl CstDecode<crate::breez_services::SignMessageRequest> for wire_cst_sign_message_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::SignMessageRequest {
        crate::breez_services::SignMessageRequest {
            message: self.message.cst_decode(),
        }
    }
}
impl CstDecode<crate::breez_services::SignMessageResponse> for wire_cst_sign_message_response {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::SignMessageResponse {
        crate::breez_services::SignMessageResponse {
            signature: self.signature.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::StaticBackupRequest> for wire_cst_static_backup_request {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::StaticBackupRequest {
        crate::models::StaticBackupRequest {
            working_dir: self.working_dir.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::StaticBackupResponse> for wire_cst_static_backup_response {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::StaticBackupResponse {
        crate::models::StaticBackupResponse {
            backup: self.backup.cst_decode(),
        }
    }
}
impl CstDecode<crate::lnurl::pay::model::SuccessActionProcessed>
    for wire_cst_success_action_processed
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::SuccessActionProcessed {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Aes };
                crate::lnurl::pay::model::SuccessActionProcessed::Aes {
                    result: ans.result.cst_decode(),
                }
            }
            1 => {
                let ans = unsafe { self.kind.Message };
                crate::lnurl::pay::model::SuccessActionProcessed::Message {
                    data: ans.data.cst_decode(),
                }
            }
            2 => {
                let ans = unsafe { self.kind.Url };
                crate::lnurl::pay::model::SuccessActionProcessed::Url {
                    data: ans.data.cst_decode(),
                }
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::models::SwapInfo> for wire_cst_swap_info {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SwapInfo {
        crate::models::SwapInfo {
            bitcoin_address: self.bitcoin_address.cst_decode(),
            created_at: self.created_at.cst_decode(),
            lock_height: self.lock_height.cst_decode(),
            payment_hash: self.payment_hash.cst_decode(),
            preimage: self.preimage.cst_decode(),
            private_key: self.private_key.cst_decode(),
            public_key: self.public_key.cst_decode(),
            swapper_public_key: self.swapper_public_key.cst_decode(),
            script: self.script.cst_decode(),
            bolt11: self.bolt11.cst_decode(),
            paid_msat: self.paid_msat.cst_decode(),
            total_incoming_txs: self.total_incoming_txs.cst_decode(),
            confirmed_sats: self.confirmed_sats.cst_decode(),
            unconfirmed_sats: self.unconfirmed_sats.cst_decode(),
            status: self.status.cst_decode(),
            refund_tx_ids: self.refund_tx_ids.cst_decode(),
            unconfirmed_tx_ids: self.unconfirmed_tx_ids.cst_decode(),
            confirmed_tx_ids: self.confirmed_tx_ids.cst_decode(),
            min_allowed_deposit: self.min_allowed_deposit.cst_decode(),
            max_allowed_deposit: self.max_allowed_deposit.cst_decode(),
            max_swapper_payable: self.max_swapper_payable.cst_decode(),
            last_redeem_error: self.last_redeem_error.cst_decode(),
            channel_opening_fees: self.channel_opening_fees.cst_decode(),
            confirmed_at: self.confirmed_at.cst_decode(),
        }
    }
}
impl CstDecode<crate::fiat::Symbol> for wire_cst_symbol {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::fiat::Symbol {
        crate::fiat::Symbol {
            grapheme: self.grapheme.cst_decode(),
            template: self.template.cst_decode(),
            rtl: self.rtl.cst_decode(),
            position: self.position.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::TlvEntry> for wire_cst_tlv_entry {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::TlvEntry {
        crate::models::TlvEntry {
            field_number: self.field_number.cst_decode(),
            value: self.value.cst_decode(),
        }
    }
}
impl CstDecode<crate::models::UnspentTransactionOutput> for wire_cst_unspent_transaction_output {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::UnspentTransactionOutput {
        crate::models::UnspentTransactionOutput {
            txid: self.txid.cst_decode(),
            outnum: self.outnum.cst_decode(),
            amount_millisatoshi: self.amount_millisatoshi.cst_decode(),
            address: self.address.cst_decode(),
            reserved: self.reserved.cst_decode(),
        }
    }
}
impl CstDecode<crate::lnurl::pay::model::UrlSuccessActionData>
    for wire_cst_url_success_action_data
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::UrlSuccessActionData {
        crate::lnurl::pay::model::UrlSuccessActionData {
            description: self.description.cst_decode(),
            url: self.url.cst_decode(),
        }
    }
}
impl NewWithNullPtr for wire_cst_aes_success_action_data_decrypted {
    fn new_with_null_ptr() -> Self {
        Self {
            description: core::ptr::null_mut(),
            plaintext: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_aes_success_action_data_decrypted {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_aes_success_action_data_result {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: AesSuccessActionDataResultKind { nil__: () },
        }
    }
}
impl Default for wire_cst_aes_success_action_data_result {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_backup_failed_data {
    fn new_with_null_ptr() -> Self {
        Self {
            error: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_backup_failed_data {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_backup_status {
    fn new_with_null_ptr() -> Self {
        Self {
            backed_up: Default::default(),
            last_backup_time: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_backup_status {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_bitcoin_address_data {
    fn new_with_null_ptr() -> Self {
        Self {
            address: core::ptr::null_mut(),
            network: Default::default(),
            amount_sat: core::ptr::null_mut(),
            label: core::ptr::null_mut(),
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_bitcoin_address_data {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_breez_event {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: BreezEventKind { nil__: () },
        }
    }
}
impl Default for wire_cst_breez_event {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_buy_bitcoin_request {
    fn new_with_null_ptr() -> Self {
        Self {
            provider: Default::default(),
            opening_fee_params: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_buy_bitcoin_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_buy_bitcoin_response {
    fn new_with_null_ptr() -> Self {
        Self {
            url: core::ptr::null_mut(),
            opening_fee_params: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_buy_bitcoin_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_check_message_request {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
            pubkey: core::ptr::null_mut(),
            signature: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_check_message_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_check_message_response {
    fn new_with_null_ptr() -> Self {
        Self {
            is_valid: Default::default(),
        }
    }
}
impl Default for wire_cst_check_message_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_closed_channel_payment_details {
    fn new_with_null_ptr() -> Self {
        Self {
            state: Default::default(),
            funding_txid: core::ptr::null_mut(),
            short_channel_id: core::ptr::null_mut(),
            closing_txid: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_closed_channel_payment_details {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_config {
    fn new_with_null_ptr() -> Self {
        Self {
            breezserver: core::ptr::null_mut(),
            chainnotifier_url: core::ptr::null_mut(),
            mempoolspace_url: core::ptr::null_mut(),
            working_dir: core::ptr::null_mut(),
            network: Default::default(),
            payment_timeout_sec: Default::default(),
            default_lsp_id: core::ptr::null_mut(),
            api_key: core::ptr::null_mut(),
            maxfee_percent: Default::default(),
            exemptfee_msat: Default::default(),
            node_config: Default::default(),
        }
    }
}
impl Default for wire_cst_config {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_configure_node_request {
    fn new_with_null_ptr() -> Self {
        Self {
            close_to_address: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_configure_node_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_connect_request {
    fn new_with_null_ptr() -> Self {
        Self {
            config: Default::default(),
            seed: core::ptr::null_mut(),
            restore_only: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_connect_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_currency_info {
    fn new_with_null_ptr() -> Self {
        Self {
            name: core::ptr::null_mut(),
            fraction_size: Default::default(),
            spacing: core::ptr::null_mut(),
            symbol: core::ptr::null_mut(),
            uniq_symbol: core::ptr::null_mut(),
            localized_name: core::ptr::null_mut(),
            locale_overrides: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_currency_info {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_fiat_currency {
    fn new_with_null_ptr() -> Self {
        Self {
            id: core::ptr::null_mut(),
            info: Default::default(),
        }
    }
}
impl Default for wire_cst_fiat_currency {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_greenlight_credentials {
    fn new_with_null_ptr() -> Self {
        Self {
            device_key: core::ptr::null_mut(),
            device_cert: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_greenlight_credentials {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_greenlight_node_config {
    fn new_with_null_ptr() -> Self {
        Self {
            partner_credentials: core::ptr::null_mut(),
            invite_code: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_greenlight_node_config {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_input_type {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: InputTypeKind { nil__: () },
        }
    }
}
impl Default for wire_cst_input_type {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_invoice_paid_details {
    fn new_with_null_ptr() -> Self {
        Self {
            payment_hash: core::ptr::null_mut(),
            bolt11: core::ptr::null_mut(),
            payment: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_invoice_paid_details {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_list_payments_request {
    fn new_with_null_ptr() -> Self {
        Self {
            filters: core::ptr::null_mut(),
            metadata_filters: core::ptr::null_mut(),
            from_timestamp: core::ptr::null_mut(),
            to_timestamp: core::ptr::null_mut(),
            include_failures: core::ptr::null_mut(),
            offset: core::ptr::null_mut(),
            limit: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_list_payments_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ln_invoice {
    fn new_with_null_ptr() -> Self {
        Self {
            bolt11: core::ptr::null_mut(),
            network: Default::default(),
            payee_pubkey: core::ptr::null_mut(),
            payment_hash: core::ptr::null_mut(),
            description: core::ptr::null_mut(),
            description_hash: core::ptr::null_mut(),
            amount_msat: core::ptr::null_mut(),
            timestamp: Default::default(),
            expiry: Default::default(),
            routing_hints: core::ptr::null_mut(),
            payment_secret: core::ptr::null_mut(),
            min_final_cltv_expiry_delta: Default::default(),
        }
    }
}
impl Default for wire_cst_ln_invoice {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ln_payment_details {
    fn new_with_null_ptr() -> Self {
        Self {
            payment_hash: core::ptr::null_mut(),
            label: core::ptr::null_mut(),
            destination_pubkey: core::ptr::null_mut(),
            payment_preimage: core::ptr::null_mut(),
            keysend: Default::default(),
            bolt11: core::ptr::null_mut(),
            open_channel_bolt11: core::ptr::null_mut(),
            lnurl_success_action: core::ptr::null_mut(),
            lnurl_pay_domain: core::ptr::null_mut(),
            ln_address: core::ptr::null_mut(),
            lnurl_metadata: core::ptr::null_mut(),
            lnurl_withdraw_endpoint: core::ptr::null_mut(),
            swap_info: core::ptr::null_mut(),
            reverse_swap_info: core::ptr::null_mut(),
            pending_expiration_block: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_ln_payment_details {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ln_url_auth_request_data {
    fn new_with_null_ptr() -> Self {
        Self {
            k1: core::ptr::null_mut(),
            action: core::ptr::null_mut(),
            domain: core::ptr::null_mut(),
            url: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_ln_url_auth_request_data {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ln_url_callback_status {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: LnUrlCallbackStatusKind { nil__: () },
        }
    }
}
impl Default for wire_cst_ln_url_callback_status {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ln_url_error_data {
    fn new_with_null_ptr() -> Self {
        Self {
            reason: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_ln_url_error_data {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ln_url_pay_error_data {
    fn new_with_null_ptr() -> Self {
        Self {
            payment_hash: core::ptr::null_mut(),
            reason: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_ln_url_pay_error_data {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ln_url_pay_request {
    fn new_with_null_ptr() -> Self {
        Self {
            data: Default::default(),
            amount_msat: Default::default(),
            comment: core::ptr::null_mut(),
            payment_label: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_ln_url_pay_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ln_url_pay_request_data {
    fn new_with_null_ptr() -> Self {
        Self {
            callback: core::ptr::null_mut(),
            min_sendable: Default::default(),
            max_sendable: Default::default(),
            metadata_str: core::ptr::null_mut(),
            comment_allowed: Default::default(),
            domain: core::ptr::null_mut(),
            allows_nostr: Default::default(),
            nostr_pubkey: core::ptr::null_mut(),
            ln_address: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_ln_url_pay_request_data {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ln_url_pay_result {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: LnUrlPayResultKind { nil__: () },
        }
    }
}
impl Default for wire_cst_ln_url_pay_result {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ln_url_pay_success_data {
    fn new_with_null_ptr() -> Self {
        Self {
            payment: Default::default(),
            success_action: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_ln_url_pay_success_data {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ln_url_withdraw_request {
    fn new_with_null_ptr() -> Self {
        Self {
            data: Default::default(),
            amount_msat: Default::default(),
            description: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_ln_url_withdraw_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ln_url_withdraw_request_data {
    fn new_with_null_ptr() -> Self {
        Self {
            callback: core::ptr::null_mut(),
            k1: core::ptr::null_mut(),
            default_description: core::ptr::null_mut(),
            min_withdrawable: Default::default(),
            max_withdrawable: Default::default(),
        }
    }
}
impl Default for wire_cst_ln_url_withdraw_request_data {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ln_url_withdraw_result {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: LnUrlWithdrawResultKind { nil__: () },
        }
    }
}
impl Default for wire_cst_ln_url_withdraw_result {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_ln_url_withdraw_success_data {
    fn new_with_null_ptr() -> Self {
        Self {
            invoice: Default::default(),
        }
    }
}
impl Default for wire_cst_ln_url_withdraw_success_data {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_locale_overrides {
    fn new_with_null_ptr() -> Self {
        Self {
            locale: core::ptr::null_mut(),
            spacing: core::ptr::null_mut(),
            symbol: Default::default(),
        }
    }
}
impl Default for wire_cst_locale_overrides {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_localized_name {
    fn new_with_null_ptr() -> Self {
        Self {
            locale: core::ptr::null_mut(),
            name: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_localized_name {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_log_entry {
    fn new_with_null_ptr() -> Self {
        Self {
            line: core::ptr::null_mut(),
            level: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_log_entry {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_lsp_information {
    fn new_with_null_ptr() -> Self {
        Self {
            id: core::ptr::null_mut(),
            name: core::ptr::null_mut(),
            widget_url: core::ptr::null_mut(),
            pubkey: core::ptr::null_mut(),
            host: core::ptr::null_mut(),
            base_fee_msat: Default::default(),
            fee_rate: Default::default(),
            time_lock_delta: Default::default(),
            min_htlc_msat: Default::default(),
            lsp_pubkey: core::ptr::null_mut(),
            opening_fee_params_list: Default::default(),
        }
    }
}
impl Default for wire_cst_lsp_information {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_max_reverse_swap_amount_response {
    fn new_with_null_ptr() -> Self {
        Self {
            total_sat: Default::default(),
        }
    }
}
impl Default for wire_cst_max_reverse_swap_amount_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_message_success_action_data {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_message_success_action_data {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_metadata_filter {
    fn new_with_null_ptr() -> Self {
        Self {
            json_path: core::ptr::null_mut(),
            json_value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_metadata_filter {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_node_config {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: NodeConfigKind { nil__: () },
        }
    }
}
impl Default for wire_cst_node_config {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_node_credentials {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: NodeCredentialsKind { nil__: () },
        }
    }
}
impl Default for wire_cst_node_credentials {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_node_state {
    fn new_with_null_ptr() -> Self {
        Self {
            id: core::ptr::null_mut(),
            block_height: Default::default(),
            channels_balance_msat: Default::default(),
            onchain_balance_msat: Default::default(),
            pending_onchain_balance_msat: Default::default(),
            utxos: core::ptr::null_mut(),
            max_payable_msat: Default::default(),
            max_receivable_msat: Default::default(),
            max_single_payment_amount_msat: Default::default(),
            max_chan_reserve_msats: Default::default(),
            connected_peers: core::ptr::null_mut(),
            inbound_liquidity_msats: Default::default(),
        }
    }
}
impl Default for wire_cst_node_state {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_onchain_payment_limits_response {
    fn new_with_null_ptr() -> Self {
        Self {
            min_sat: Default::default(),
            max_sat: Default::default(),
        }
    }
}
impl Default for wire_cst_onchain_payment_limits_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_open_channel_fee_request {
    fn new_with_null_ptr() -> Self {
        Self {
            amount_msat: core::ptr::null_mut(),
            expiry: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_open_channel_fee_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_open_channel_fee_response {
    fn new_with_null_ptr() -> Self {
        Self {
            fee_msat: core::ptr::null_mut(),
            fee_params: Default::default(),
        }
    }
}
impl Default for wire_cst_open_channel_fee_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opening_fee_params {
    fn new_with_null_ptr() -> Self {
        Self {
            min_msat: Default::default(),
            proportional: Default::default(),
            valid_until: core::ptr::null_mut(),
            max_idle_time: Default::default(),
            max_client_to_self_delay: Default::default(),
            promise: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opening_fee_params {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_opening_fee_params_menu {
    fn new_with_null_ptr() -> Self {
        Self {
            values: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_opening_fee_params_menu {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_pay_onchain_request {
    fn new_with_null_ptr() -> Self {
        Self {
            recipient_address: core::ptr::null_mut(),
            prepare_res: Default::default(),
        }
    }
}
impl Default for wire_cst_pay_onchain_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_pay_onchain_response {
    fn new_with_null_ptr() -> Self {
        Self {
            reverse_swap_info: Default::default(),
        }
    }
}
impl Default for wire_cst_pay_onchain_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_payment {
    fn new_with_null_ptr() -> Self {
        Self {
            id: core::ptr::null_mut(),
            payment_type: Default::default(),
            payment_time: Default::default(),
            amount_msat: Default::default(),
            fee_msat: Default::default(),
            status: Default::default(),
            error: core::ptr::null_mut(),
            description: core::ptr::null_mut(),
            details: Default::default(),
            metadata: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_payment {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_payment_details {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: PaymentDetailsKind { nil__: () },
        }
    }
}
impl Default for wire_cst_payment_details {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_payment_failed_data {
    fn new_with_null_ptr() -> Self {
        Self {
            error: core::ptr::null_mut(),
            node_id: core::ptr::null_mut(),
            invoice: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_payment_failed_data {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_prepare_onchain_payment_request {
    fn new_with_null_ptr() -> Self {
        Self {
            amount_sat: Default::default(),
            amount_type: Default::default(),
            claim_tx_feerate: Default::default(),
        }
    }
}
impl Default for wire_cst_prepare_onchain_payment_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_prepare_onchain_payment_response {
    fn new_with_null_ptr() -> Self {
        Self {
            fees_hash: core::ptr::null_mut(),
            fees_percentage: Default::default(),
            fees_lockup: Default::default(),
            fees_claim: Default::default(),
            sender_amount_sat: Default::default(),
            recipient_amount_sat: Default::default(),
            total_fees: Default::default(),
        }
    }
}
impl Default for wire_cst_prepare_onchain_payment_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_prepare_redeem_onchain_funds_request {
    fn new_with_null_ptr() -> Self {
        Self {
            to_address: core::ptr::null_mut(),
            sat_per_vbyte: Default::default(),
        }
    }
}
impl Default for wire_cst_prepare_redeem_onchain_funds_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_prepare_redeem_onchain_funds_response {
    fn new_with_null_ptr() -> Self {
        Self {
            tx_weight: Default::default(),
            tx_fee_sat: Default::default(),
        }
    }
}
impl Default for wire_cst_prepare_redeem_onchain_funds_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_prepare_refund_request {
    fn new_with_null_ptr() -> Self {
        Self {
            swap_address: core::ptr::null_mut(),
            to_address: core::ptr::null_mut(),
            sat_per_vbyte: Default::default(),
        }
    }
}
impl Default for wire_cst_prepare_refund_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_prepare_refund_response {
    fn new_with_null_ptr() -> Self {
        Self {
            refund_tx_weight: Default::default(),
            refund_tx_fee_sat: Default::default(),
        }
    }
}
impl Default for wire_cst_prepare_refund_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_rate {
    fn new_with_null_ptr() -> Self {
        Self {
            coin: core::ptr::null_mut(),
            value: Default::default(),
        }
    }
}
impl Default for wire_cst_rate {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_receive_onchain_request {
    fn new_with_null_ptr() -> Self {
        Self {
            opening_fee_params: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_receive_onchain_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_receive_payment_request {
    fn new_with_null_ptr() -> Self {
        Self {
            amount_msat: Default::default(),
            description: core::ptr::null_mut(),
            preimage: core::ptr::null_mut(),
            opening_fee_params: core::ptr::null_mut(),
            use_description_hash: core::ptr::null_mut(),
            expiry: core::ptr::null_mut(),
            cltv: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_receive_payment_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_receive_payment_response {
    fn new_with_null_ptr() -> Self {
        Self {
            ln_invoice: Default::default(),
            opening_fee_params: core::ptr::null_mut(),
            opening_fee_msat: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_receive_payment_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_recommended_fees {
    fn new_with_null_ptr() -> Self {
        Self {
            fastest_fee: Default::default(),
            half_hour_fee: Default::default(),
            hour_fee: Default::default(),
            economy_fee: Default::default(),
            minimum_fee: Default::default(),
        }
    }
}
impl Default for wire_cst_recommended_fees {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_redeem_onchain_funds_request {
    fn new_with_null_ptr() -> Self {
        Self {
            to_address: core::ptr::null_mut(),
            sat_per_vbyte: Default::default(),
        }
    }
}
impl Default for wire_cst_redeem_onchain_funds_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_redeem_onchain_funds_response {
    fn new_with_null_ptr() -> Self {
        Self {
            txid: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_redeem_onchain_funds_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_refund_request {
    fn new_with_null_ptr() -> Self {
        Self {
            swap_address: core::ptr::null_mut(),
            to_address: core::ptr::null_mut(),
            sat_per_vbyte: Default::default(),
        }
    }
}
impl Default for wire_cst_refund_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_refund_response {
    fn new_with_null_ptr() -> Self {
        Self {
            refund_tx_id: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_refund_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_report_issue_request {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: ReportIssueRequestKind { nil__: () },
        }
    }
}
impl Default for wire_cst_report_issue_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_report_payment_failure_details {
    fn new_with_null_ptr() -> Self {
        Self {
            payment_hash: core::ptr::null_mut(),
            comment: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_report_payment_failure_details {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_reverse_swap_fees_request {
    fn new_with_null_ptr() -> Self {
        Self {
            send_amount_sat: core::ptr::null_mut(),
            claim_tx_feerate: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_reverse_swap_fees_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_reverse_swap_info {
    fn new_with_null_ptr() -> Self {
        Self {
            id: core::ptr::null_mut(),
            claim_pubkey: core::ptr::null_mut(),
            lockup_txid: core::ptr::null_mut(),
            claim_txid: core::ptr::null_mut(),
            onchain_amount_sat: Default::default(),
            status: Default::default(),
        }
    }
}
impl Default for wire_cst_reverse_swap_info {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_reverse_swap_pair_info {
    fn new_with_null_ptr() -> Self {
        Self {
            min: Default::default(),
            max: Default::default(),
            fees_hash: core::ptr::null_mut(),
            fees_percentage: Default::default(),
            fees_lockup: Default::default(),
            fees_claim: Default::default(),
            total_fees: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_reverse_swap_pair_info {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_route_hint {
    fn new_with_null_ptr() -> Self {
        Self {
            hops: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_route_hint {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_route_hint_hop {
    fn new_with_null_ptr() -> Self {
        Self {
            src_node_id: core::ptr::null_mut(),
            short_channel_id: Default::default(),
            fees_base_msat: Default::default(),
            fees_proportional_millionths: Default::default(),
            cltv_expiry_delta: Default::default(),
            htlc_minimum_msat: core::ptr::null_mut(),
            htlc_maximum_msat: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_route_hint_hop {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_send_onchain_request {
    fn new_with_null_ptr() -> Self {
        Self {
            amount_sat: Default::default(),
            onchain_recipient_address: core::ptr::null_mut(),
            pair_hash: core::ptr::null_mut(),
            sat_per_vbyte: Default::default(),
        }
    }
}
impl Default for wire_cst_send_onchain_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_send_onchain_response {
    fn new_with_null_ptr() -> Self {
        Self {
            reverse_swap_info: Default::default(),
        }
    }
}
impl Default for wire_cst_send_onchain_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_send_payment_request {
    fn new_with_null_ptr() -> Self {
        Self {
            bolt11: core::ptr::null_mut(),
            amount_msat: core::ptr::null_mut(),
            label: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_send_payment_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_send_payment_response {
    fn new_with_null_ptr() -> Self {
        Self {
            payment: Default::default(),
        }
    }
}
impl Default for wire_cst_send_payment_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_send_spontaneous_payment_request {
    fn new_with_null_ptr() -> Self {
        Self {
            node_id: core::ptr::null_mut(),
            amount_msat: Default::default(),
            extra_tlvs: core::ptr::null_mut(),
            label: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_send_spontaneous_payment_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_service_health_check_response {
    fn new_with_null_ptr() -> Self {
        Self {
            status: Default::default(),
        }
    }
}
impl Default for wire_cst_service_health_check_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_sign_message_request {
    fn new_with_null_ptr() -> Self {
        Self {
            message: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_sign_message_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_sign_message_response {
    fn new_with_null_ptr() -> Self {
        Self {
            signature: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_sign_message_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_static_backup_request {
    fn new_with_null_ptr() -> Self {
        Self {
            working_dir: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_static_backup_request {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_static_backup_response {
    fn new_with_null_ptr() -> Self {
        Self {
            backup: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_static_backup_response {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_success_action_processed {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: SuccessActionProcessedKind { nil__: () },
        }
    }
}
impl Default for wire_cst_success_action_processed {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_swap_info {
    fn new_with_null_ptr() -> Self {
        Self {
            bitcoin_address: core::ptr::null_mut(),
            created_at: Default::default(),
            lock_height: Default::default(),
            payment_hash: core::ptr::null_mut(),
            preimage: core::ptr::null_mut(),
            private_key: core::ptr::null_mut(),
            public_key: core::ptr::null_mut(),
            swapper_public_key: core::ptr::null_mut(),
            script: core::ptr::null_mut(),
            bolt11: core::ptr::null_mut(),
            paid_msat: Default::default(),
            total_incoming_txs: Default::default(),
            confirmed_sats: Default::default(),
            unconfirmed_sats: Default::default(),
            status: Default::default(),
            refund_tx_ids: core::ptr::null_mut(),
            unconfirmed_tx_ids: core::ptr::null_mut(),
            confirmed_tx_ids: core::ptr::null_mut(),
            min_allowed_deposit: Default::default(),
            max_allowed_deposit: Default::default(),
            max_swapper_payable: Default::default(),
            last_redeem_error: core::ptr::null_mut(),
            channel_opening_fees: core::ptr::null_mut(),
            confirmed_at: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_swap_info {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_symbol {
    fn new_with_null_ptr() -> Self {
        Self {
            grapheme: core::ptr::null_mut(),
            template: core::ptr::null_mut(),
            rtl: core::ptr::null_mut(),
            position: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_symbol {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_tlv_entry {
    fn new_with_null_ptr() -> Self {
        Self {
            field_number: Default::default(),
            value: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_tlv_entry {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_unspent_transaction_output {
    fn new_with_null_ptr() -> Self {
        Self {
            txid: core::ptr::null_mut(),
            outnum: Default::default(),
            amount_millisatoshi: Default::default(),
            address: core::ptr::null_mut(),
            reserved: Default::default(),
        }
    }
}
impl Default for wire_cst_unspent_transaction_output {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_url_success_action_data {
    fn new_with_null_ptr() -> Self {
        Self {
            description: core::ptr::null_mut(),
            url: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_url_success_action_data {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_backup(port_: i64) {
    wire_backup_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_backup_status(port_: i64) {
    wire_backup_status_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_breez_events_stream(
    port_: i64,
    s: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_breez_events_stream_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_breez_log_stream(
    port_: i64,
    s: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_breez_log_stream_impl(port_, s)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_buy_bitcoin(
    port_: i64,
    req: *mut wire_cst_buy_bitcoin_request,
) {
    wire_buy_bitcoin_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_check_message(
    port_: i64,
    req: *mut wire_cst_check_message_request,
) {
    wire_check_message_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_close_lsp_channels(port_: i64) {
    wire_close_lsp_channels_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_configure_node(
    port_: i64,
    req: *mut wire_cst_configure_node_request,
) {
    wire_configure_node_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_connect(port_: i64, req: *mut wire_cst_connect_request) {
    wire_connect_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_connect_lsp(
    port_: i64,
    lsp_id: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_connect_lsp_impl(port_, lsp_id)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_default_config(
    port_: i64,
    env_type: i32,
    api_key: *mut wire_cst_list_prim_u_8_strict,
    node_config: *mut wire_cst_node_config,
) {
    wire_default_config_impl(port_, env_type, api_key, node_config)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_disconnect(port_: i64) {
    wire_disconnect_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_execute_command(
    port_: i64,
    command: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_execute_command_impl(port_, command)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_fetch_fiat_rates(port_: i64) {
    wire_fetch_fiat_rates_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_fetch_lsp_info(
    port_: i64,
    id: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_fetch_lsp_info_impl(port_, id)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_fetch_reverse_swap_fees(
    port_: i64,
    req: *mut wire_cst_reverse_swap_fees_request,
) {
    wire_fetch_reverse_swap_fees_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_generate_diagnostic_data(port_: i64) {
    wire_generate_diagnostic_data_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_in_progress_onchain_payments(port_: i64) {
    wire_in_progress_onchain_payments_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_in_progress_reverse_swaps(port_: i64) {
    wire_in_progress_reverse_swaps_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_in_progress_swap(port_: i64) {
    wire_in_progress_swap_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_is_initialized(port_: i64) {
    wire_is_initialized_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_list_fiat_currencies(port_: i64) {
    wire_list_fiat_currencies_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_list_lsps(port_: i64) {
    wire_list_lsps_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_list_payments(
    port_: i64,
    req: *mut wire_cst_list_payments_request,
) {
    wire_list_payments_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_list_refundables(port_: i64) {
    wire_list_refundables_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_lnurl_auth(
    port_: i64,
    req_data: *mut wire_cst_ln_url_auth_request_data,
) {
    wire_lnurl_auth_impl(port_, req_data)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_lnurl_pay(
    port_: i64,
    req: *mut wire_cst_ln_url_pay_request,
) {
    wire_lnurl_pay_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_lnurl_withdraw(
    port_: i64,
    req: *mut wire_cst_ln_url_withdraw_request,
) {
    wire_lnurl_withdraw_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_lsp_id(port_: i64) {
    wire_lsp_id_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_lsp_info(port_: i64) {
    wire_lsp_info_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_max_reverse_swap_amount(port_: i64) {
    wire_max_reverse_swap_amount_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_mnemonic_to_seed(
    port_: i64,
    phrase: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_mnemonic_to_seed_impl(port_, phrase)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_node_credentials(port_: i64) {
    wire_node_credentials_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_node_info(port_: i64) {
    wire_node_info_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_onchain_payment_limits(port_: i64) {
    wire_onchain_payment_limits_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_open_channel_fee(
    port_: i64,
    req: *mut wire_cst_open_channel_fee_request,
) {
    wire_open_channel_fee_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_parse_input(
    port_: i64,
    input: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_parse_input_impl(port_, input)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_parse_invoice(
    port_: i64,
    invoice: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_parse_invoice_impl(port_, invoice)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_pay_onchain(
    port_: i64,
    req: *mut wire_cst_pay_onchain_request,
) {
    wire_pay_onchain_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_payment_by_hash(
    port_: i64,
    hash: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_payment_by_hash_impl(port_, hash)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_prepare_onchain_payment(
    port_: i64,
    req: *mut wire_cst_prepare_onchain_payment_request,
) {
    wire_prepare_onchain_payment_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_prepare_redeem_onchain_funds(
    port_: i64,
    req: *mut wire_cst_prepare_redeem_onchain_funds_request,
) {
    wire_prepare_redeem_onchain_funds_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_prepare_refund(
    port_: i64,
    req: *mut wire_cst_prepare_refund_request,
) {
    wire_prepare_refund_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_receive_onchain(
    port_: i64,
    req: *mut wire_cst_receive_onchain_request,
) {
    wire_receive_onchain_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_receive_payment(
    port_: i64,
    req: *mut wire_cst_receive_payment_request,
) {
    wire_receive_payment_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_recommended_fees(port_: i64) {
    wire_recommended_fees_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_redeem_onchain_funds(
    port_: i64,
    req: *mut wire_cst_redeem_onchain_funds_request,
) {
    wire_redeem_onchain_funds_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_redeem_swap(
    port_: i64,
    swap_address: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_redeem_swap_impl(port_, swap_address)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_refund(port_: i64, req: *mut wire_cst_refund_request) {
    wire_refund_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_register_webhook(
    port_: i64,
    webhook_url: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_register_webhook_impl(port_, webhook_url)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_report_issue(
    port_: i64,
    req: *mut wire_cst_report_issue_request,
) {
    wire_report_issue_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_rescan_swaps(port_: i64) {
    wire_rescan_swaps_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_send_onchain(
    port_: i64,
    req: *mut wire_cst_send_onchain_request,
) {
    wire_send_onchain_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_send_payment(
    port_: i64,
    req: *mut wire_cst_send_payment_request,
) {
    wire_send_payment_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_send_spontaneous_payment(
    port_: i64,
    req: *mut wire_cst_send_spontaneous_payment_request,
) {
    wire_send_spontaneous_payment_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_service_health_check(
    port_: i64,
    api_key: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_service_health_check_impl(port_, api_key)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_set_payment_metadata(
    port_: i64,
    hash: *mut wire_cst_list_prim_u_8_strict,
    metadata: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_set_payment_metadata_impl(port_, hash, metadata)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_sign_message(
    port_: i64,
    req: *mut wire_cst_sign_message_request,
) {
    wire_sign_message_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_static_backup(
    port_: i64,
    req: *mut wire_cst_static_backup_request,
) {
    wire_static_backup_impl(port_, req)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_wire_sync(port_: i64) {
    wire_sync_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_aes_success_action_data_decrypted(
) -> *mut wire_cst_aes_success_action_data_decrypted {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_aes_success_action_data_decrypted::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_aes_success_action_data_result(
) -> *mut wire_cst_aes_success_action_data_result {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_aes_success_action_data_result::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_backup_failed_data(
) -> *mut wire_cst_backup_failed_data {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_backup_failed_data::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_bitcoin_address_data(
) -> *mut wire_cst_bitcoin_address_data {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_bitcoin_address_data::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_bool(value: bool) -> *mut bool {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_buy_bitcoin_request(
) -> *mut wire_cst_buy_bitcoin_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_buy_bitcoin_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_check_message_request(
) -> *mut wire_cst_check_message_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_check_message_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_closed_channel_payment_details(
) -> *mut wire_cst_closed_channel_payment_details {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_closed_channel_payment_details::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_configure_node_request(
) -> *mut wire_cst_configure_node_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_configure_node_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_connect_request(
) -> *mut wire_cst_connect_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_connect_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_greenlight_credentials(
) -> *mut wire_cst_greenlight_credentials {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_greenlight_credentials::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_greenlight_node_config(
) -> *mut wire_cst_greenlight_node_config {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_greenlight_node_config::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_i_64(value: i64) -> *mut i64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_invoice_paid_details(
) -> *mut wire_cst_invoice_paid_details {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_invoice_paid_details::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_list_payments_request(
) -> *mut wire_cst_list_payments_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_list_payments_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_ln_invoice() -> *mut wire_cst_ln_invoice {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_ln_invoice::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_ln_payment_details(
) -> *mut wire_cst_ln_payment_details {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ln_payment_details::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_ln_url_auth_request_data(
) -> *mut wire_cst_ln_url_auth_request_data {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ln_url_auth_request_data::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_ln_url_error_data(
) -> *mut wire_cst_ln_url_error_data {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ln_url_error_data::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_ln_url_pay_error_data(
) -> *mut wire_cst_ln_url_pay_error_data {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ln_url_pay_error_data::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_ln_url_pay_request(
) -> *mut wire_cst_ln_url_pay_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ln_url_pay_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_ln_url_pay_request_data(
) -> *mut wire_cst_ln_url_pay_request_data {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ln_url_pay_request_data::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_ln_url_pay_success_data(
) -> *mut wire_cst_ln_url_pay_success_data {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ln_url_pay_success_data::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_ln_url_withdraw_request(
) -> *mut wire_cst_ln_url_withdraw_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ln_url_withdraw_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_ln_url_withdraw_request_data(
) -> *mut wire_cst_ln_url_withdraw_request_data {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ln_url_withdraw_request_data::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_ln_url_withdraw_success_data(
) -> *mut wire_cst_ln_url_withdraw_success_data {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_ln_url_withdraw_success_data::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_lsp_information(
) -> *mut wire_cst_lsp_information {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_lsp_information::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_message_success_action_data(
) -> *mut wire_cst_message_success_action_data {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_message_success_action_data::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_node_config() -> *mut wire_cst_node_config {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_node_config::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_node_credentials(
) -> *mut wire_cst_node_credentials {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_node_credentials::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_open_channel_fee_request(
) -> *mut wire_cst_open_channel_fee_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_open_channel_fee_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_opening_fee_params(
) -> *mut wire_cst_opening_fee_params {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_opening_fee_params::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_pay_onchain_request(
) -> *mut wire_cst_pay_onchain_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_pay_onchain_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_payment() -> *mut wire_cst_payment {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_payment::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_payment_failed_data(
) -> *mut wire_cst_payment_failed_data {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_payment_failed_data::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_prepare_onchain_payment_request(
) -> *mut wire_cst_prepare_onchain_payment_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_prepare_onchain_payment_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_prepare_redeem_onchain_funds_request(
) -> *mut wire_cst_prepare_redeem_onchain_funds_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_prepare_redeem_onchain_funds_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_prepare_refund_request(
) -> *mut wire_cst_prepare_refund_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_prepare_refund_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_receive_onchain_request(
) -> *mut wire_cst_receive_onchain_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_receive_onchain_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_receive_payment_request(
) -> *mut wire_cst_receive_payment_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_receive_payment_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_redeem_onchain_funds_request(
) -> *mut wire_cst_redeem_onchain_funds_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_redeem_onchain_funds_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_refund_request(
) -> *mut wire_cst_refund_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_refund_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_report_issue_request(
) -> *mut wire_cst_report_issue_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_report_issue_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_report_payment_failure_details(
) -> *mut wire_cst_report_payment_failure_details {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_report_payment_failure_details::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_reverse_swap_fees_request(
) -> *mut wire_cst_reverse_swap_fees_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_reverse_swap_fees_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_reverse_swap_info(
) -> *mut wire_cst_reverse_swap_info {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_reverse_swap_info::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_send_onchain_request(
) -> *mut wire_cst_send_onchain_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_send_onchain_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_send_payment_request(
) -> *mut wire_cst_send_payment_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_send_payment_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_send_spontaneous_payment_request(
) -> *mut wire_cst_send_spontaneous_payment_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_send_spontaneous_payment_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_sign_message_request(
) -> *mut wire_cst_sign_message_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_sign_message_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_static_backup_request(
) -> *mut wire_cst_static_backup_request {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_static_backup_request::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_success_action_processed(
) -> *mut wire_cst_success_action_processed {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_success_action_processed::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_swap_info() -> *mut wire_cst_swap_info {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_swap_info::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_symbol() -> *mut wire_cst_symbol {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_symbol::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_u_32(value: u32) -> *mut u32 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_u_64(value: u64) -> *mut u64 {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_box_autoadd_url_success_action_data(
) -> *mut wire_cst_url_success_action_data {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_url_success_action_data::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_list_String(len: i32) -> *mut wire_cst_list_String {
    let wrap = wire_cst_list_String {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <*mut wire_cst_list_prim_u_8_strict>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_list_fiat_currency(
    len: i32,
) -> *mut wire_cst_list_fiat_currency {
    let wrap = wire_cst_list_fiat_currency {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_fiat_currency>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_list_locale_overrides(
    len: i32,
) -> *mut wire_cst_list_locale_overrides {
    let wrap = wire_cst_list_locale_overrides {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_locale_overrides>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_list_localized_name(
    len: i32,
) -> *mut wire_cst_list_localized_name {
    let wrap = wire_cst_list_localized_name {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_localized_name>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_list_lsp_information(
    len: i32,
) -> *mut wire_cst_list_lsp_information {
    let wrap = wire_cst_list_lsp_information {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_lsp_information>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_list_metadata_filter(
    len: i32,
) -> *mut wire_cst_list_metadata_filter {
    let wrap = wire_cst_list_metadata_filter {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_metadata_filter>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_list_opening_fee_params(
    len: i32,
) -> *mut wire_cst_list_opening_fee_params {
    let wrap = wire_cst_list_opening_fee_params {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_opening_fee_params>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_list_payment(len: i32) -> *mut wire_cst_list_payment {
    let wrap = wire_cst_list_payment {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_payment>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_list_payment_type_filter(
    len: i32,
) -> *mut wire_cst_list_payment_type_filter {
    let wrap = wire_cst_list_payment_type_filter {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_list_prim_u_8_strict(
    len: i32,
) -> *mut wire_cst_list_prim_u_8_strict {
    let ans = wire_cst_list_prim_u_8_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_list_rate(len: i32) -> *mut wire_cst_list_rate {
    let wrap = wire_cst_list_rate {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_rate>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_list_reverse_swap_info(
    len: i32,
) -> *mut wire_cst_list_reverse_swap_info {
    let wrap = wire_cst_list_reverse_swap_info {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_reverse_swap_info>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_list_route_hint(
    len: i32,
) -> *mut wire_cst_list_route_hint {
    let wrap = wire_cst_list_route_hint {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_route_hint>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_list_route_hint_hop(
    len: i32,
) -> *mut wire_cst_list_route_hint_hop {
    let wrap = wire_cst_list_route_hint_hop {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_route_hint_hop>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_list_swap_info(
    len: i32,
) -> *mut wire_cst_list_swap_info {
    let wrap = wire_cst_list_swap_info {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_swap_info>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_list_tlv_entry(
    len: i32,
) -> *mut wire_cst_list_tlv_entry {
    let wrap = wire_cst_list_tlv_entry {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_tlv_entry>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_breez_sdk_cst_new_list_unspent_transaction_output(
    len: i32,
) -> *mut wire_cst_list_unspent_transaction_output {
    let wrap = wire_cst_list_unspent_transaction_output {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_unspent_transaction_output>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_aes_success_action_data_decrypted {
    description: *mut wire_cst_list_prim_u_8_strict,
    plaintext: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_aes_success_action_data_result {
    tag: i32,
    kind: AesSuccessActionDataResultKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union AesSuccessActionDataResultKind {
    Decrypted: wire_cst_AesSuccessActionDataResult_Decrypted,
    ErrorStatus: wire_cst_AesSuccessActionDataResult_ErrorStatus,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AesSuccessActionDataResult_Decrypted {
    data: *mut wire_cst_aes_success_action_data_decrypted,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AesSuccessActionDataResult_ErrorStatus {
    reason: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_backup_failed_data {
    error: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_backup_status {
    backed_up: bool,
    last_backup_time: *mut u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_bitcoin_address_data {
    address: *mut wire_cst_list_prim_u_8_strict,
    network: i32,
    amount_sat: *mut u64,
    label: *mut wire_cst_list_prim_u_8_strict,
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_breez_event {
    tag: i32,
    kind: BreezEventKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union BreezEventKind {
    NewBlock: wire_cst_BreezEvent_NewBlock,
    InvoicePaid: wire_cst_BreezEvent_InvoicePaid,
    PaymentSucceed: wire_cst_BreezEvent_PaymentSucceed,
    PaymentFailed: wire_cst_BreezEvent_PaymentFailed,
    BackupFailed: wire_cst_BreezEvent_BackupFailed,
    SwapUpdated: wire_cst_BreezEvent_SwapUpdated,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_BreezEvent_NewBlock {
    block: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_BreezEvent_InvoicePaid {
    details: *mut wire_cst_invoice_paid_details,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_BreezEvent_PaymentSucceed {
    details: *mut wire_cst_payment,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_BreezEvent_PaymentFailed {
    details: *mut wire_cst_payment_failed_data,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_BreezEvent_BackupFailed {
    details: *mut wire_cst_backup_failed_data,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_BreezEvent_SwapUpdated {
    details: *mut wire_cst_swap_info,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_buy_bitcoin_request {
    provider: i32,
    opening_fee_params: *mut wire_cst_opening_fee_params,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_buy_bitcoin_response {
    url: *mut wire_cst_list_prim_u_8_strict,
    opening_fee_params: *mut wire_cst_opening_fee_params,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_check_message_request {
    message: *mut wire_cst_list_prim_u_8_strict,
    pubkey: *mut wire_cst_list_prim_u_8_strict,
    signature: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_check_message_response {
    is_valid: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_closed_channel_payment_details {
    state: i32,
    funding_txid: *mut wire_cst_list_prim_u_8_strict,
    short_channel_id: *mut wire_cst_list_prim_u_8_strict,
    closing_txid: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_config {
    breezserver: *mut wire_cst_list_prim_u_8_strict,
    chainnotifier_url: *mut wire_cst_list_prim_u_8_strict,
    mempoolspace_url: *mut wire_cst_list_prim_u_8_strict,
    working_dir: *mut wire_cst_list_prim_u_8_strict,
    network: i32,
    payment_timeout_sec: u32,
    default_lsp_id: *mut wire_cst_list_prim_u_8_strict,
    api_key: *mut wire_cst_list_prim_u_8_strict,
    maxfee_percent: f64,
    exemptfee_msat: u64,
    node_config: wire_cst_node_config,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_configure_node_request {
    close_to_address: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_connect_request {
    config: wire_cst_config,
    seed: *mut wire_cst_list_prim_u_8_strict,
    restore_only: *mut bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_currency_info {
    name: *mut wire_cst_list_prim_u_8_strict,
    fraction_size: u32,
    spacing: *mut u32,
    symbol: *mut wire_cst_symbol,
    uniq_symbol: *mut wire_cst_symbol,
    localized_name: *mut wire_cst_list_localized_name,
    locale_overrides: *mut wire_cst_list_locale_overrides,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_fiat_currency {
    id: *mut wire_cst_list_prim_u_8_strict,
    info: wire_cst_currency_info,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_greenlight_credentials {
    device_key: *mut wire_cst_list_prim_u_8_strict,
    device_cert: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_greenlight_node_config {
    partner_credentials: *mut wire_cst_greenlight_credentials,
    invite_code: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_input_type {
    tag: i32,
    kind: InputTypeKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union InputTypeKind {
    BitcoinAddress: wire_cst_InputType_BitcoinAddress,
    Bolt11: wire_cst_InputType_Bolt11,
    NodeId: wire_cst_InputType_NodeId,
    Url: wire_cst_InputType_Url,
    LnUrlPay: wire_cst_InputType_LnUrlPay,
    LnUrlWithdraw: wire_cst_InputType_LnUrlWithdraw,
    LnUrlAuth: wire_cst_InputType_LnUrlAuth,
    LnUrlError: wire_cst_InputType_LnUrlError,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_InputType_BitcoinAddress {
    address: *mut wire_cst_bitcoin_address_data,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_InputType_Bolt11 {
    invoice: *mut wire_cst_ln_invoice,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_InputType_NodeId {
    node_id: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_InputType_Url {
    url: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_InputType_LnUrlPay {
    data: *mut wire_cst_ln_url_pay_request_data,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_InputType_LnUrlWithdraw {
    data: *mut wire_cst_ln_url_withdraw_request_data,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_InputType_LnUrlAuth {
    data: *mut wire_cst_ln_url_auth_request_data,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_InputType_LnUrlError {
    data: *mut wire_cst_ln_url_error_data,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_invoice_paid_details {
    payment_hash: *mut wire_cst_list_prim_u_8_strict,
    bolt11: *mut wire_cst_list_prim_u_8_strict,
    payment: *mut wire_cst_payment,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_String {
    ptr: *mut *mut wire_cst_list_prim_u_8_strict,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_fiat_currency {
    ptr: *mut wire_cst_fiat_currency,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_locale_overrides {
    ptr: *mut wire_cst_locale_overrides,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_localized_name {
    ptr: *mut wire_cst_localized_name,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_lsp_information {
    ptr: *mut wire_cst_lsp_information,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_metadata_filter {
    ptr: *mut wire_cst_metadata_filter,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_opening_fee_params {
    ptr: *mut wire_cst_opening_fee_params,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_payment {
    ptr: *mut wire_cst_payment,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_payment_type_filter {
    ptr: *mut i32,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_payments_request {
    filters: *mut wire_cst_list_payment_type_filter,
    metadata_filters: *mut wire_cst_list_metadata_filter,
    from_timestamp: *mut i64,
    to_timestamp: *mut i64,
    include_failures: *mut bool,
    offset: *mut u32,
    limit: *mut u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8_strict {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_rate {
    ptr: *mut wire_cst_rate,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_reverse_swap_info {
    ptr: *mut wire_cst_reverse_swap_info,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_route_hint {
    ptr: *mut wire_cst_route_hint,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_route_hint_hop {
    ptr: *mut wire_cst_route_hint_hop,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_swap_info {
    ptr: *mut wire_cst_swap_info,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_tlv_entry {
    ptr: *mut wire_cst_tlv_entry,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_unspent_transaction_output {
    ptr: *mut wire_cst_unspent_transaction_output,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ln_invoice {
    bolt11: *mut wire_cst_list_prim_u_8_strict,
    network: i32,
    payee_pubkey: *mut wire_cst_list_prim_u_8_strict,
    payment_hash: *mut wire_cst_list_prim_u_8_strict,
    description: *mut wire_cst_list_prim_u_8_strict,
    description_hash: *mut wire_cst_list_prim_u_8_strict,
    amount_msat: *mut u64,
    timestamp: u64,
    expiry: u64,
    routing_hints: *mut wire_cst_list_route_hint,
    payment_secret: *mut wire_cst_list_prim_u_8_strict,
    min_final_cltv_expiry_delta: u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ln_payment_details {
    payment_hash: *mut wire_cst_list_prim_u_8_strict,
    label: *mut wire_cst_list_prim_u_8_strict,
    destination_pubkey: *mut wire_cst_list_prim_u_8_strict,
    payment_preimage: *mut wire_cst_list_prim_u_8_strict,
    keysend: bool,
    bolt11: *mut wire_cst_list_prim_u_8_strict,
    open_channel_bolt11: *mut wire_cst_list_prim_u_8_strict,
    lnurl_success_action: *mut wire_cst_success_action_processed,
    lnurl_pay_domain: *mut wire_cst_list_prim_u_8_strict,
    ln_address: *mut wire_cst_list_prim_u_8_strict,
    lnurl_metadata: *mut wire_cst_list_prim_u_8_strict,
    lnurl_withdraw_endpoint: *mut wire_cst_list_prim_u_8_strict,
    swap_info: *mut wire_cst_swap_info,
    reverse_swap_info: *mut wire_cst_reverse_swap_info,
    pending_expiration_block: *mut u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ln_url_auth_request_data {
    k1: *mut wire_cst_list_prim_u_8_strict,
    action: *mut wire_cst_list_prim_u_8_strict,
    domain: *mut wire_cst_list_prim_u_8_strict,
    url: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ln_url_callback_status {
    tag: i32,
    kind: LnUrlCallbackStatusKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union LnUrlCallbackStatusKind {
    ErrorStatus: wire_cst_LnUrlCallbackStatus_ErrorStatus,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LnUrlCallbackStatus_ErrorStatus {
    data: *mut wire_cst_ln_url_error_data,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ln_url_error_data {
    reason: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ln_url_pay_error_data {
    payment_hash: *mut wire_cst_list_prim_u_8_strict,
    reason: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ln_url_pay_request {
    data: wire_cst_ln_url_pay_request_data,
    amount_msat: u64,
    comment: *mut wire_cst_list_prim_u_8_strict,
    payment_label: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ln_url_pay_request_data {
    callback: *mut wire_cst_list_prim_u_8_strict,
    min_sendable: u64,
    max_sendable: u64,
    metadata_str: *mut wire_cst_list_prim_u_8_strict,
    comment_allowed: u16,
    domain: *mut wire_cst_list_prim_u_8_strict,
    allows_nostr: bool,
    nostr_pubkey: *mut wire_cst_list_prim_u_8_strict,
    ln_address: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ln_url_pay_result {
    tag: i32,
    kind: LnUrlPayResultKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union LnUrlPayResultKind {
    EndpointSuccess: wire_cst_LnUrlPayResult_EndpointSuccess,
    EndpointError: wire_cst_LnUrlPayResult_EndpointError,
    PayError: wire_cst_LnUrlPayResult_PayError,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LnUrlPayResult_EndpointSuccess {
    data: *mut wire_cst_ln_url_pay_success_data,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LnUrlPayResult_EndpointError {
    data: *mut wire_cst_ln_url_error_data,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LnUrlPayResult_PayError {
    data: *mut wire_cst_ln_url_pay_error_data,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ln_url_pay_success_data {
    payment: wire_cst_payment,
    success_action: *mut wire_cst_success_action_processed,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ln_url_withdraw_request {
    data: wire_cst_ln_url_withdraw_request_data,
    amount_msat: u64,
    description: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ln_url_withdraw_request_data {
    callback: *mut wire_cst_list_prim_u_8_strict,
    k1: *mut wire_cst_list_prim_u_8_strict,
    default_description: *mut wire_cst_list_prim_u_8_strict,
    min_withdrawable: u64,
    max_withdrawable: u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ln_url_withdraw_result {
    tag: i32,
    kind: LnUrlWithdrawResultKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union LnUrlWithdrawResultKind {
    Ok: wire_cst_LnUrlWithdrawResult_Ok,
    ErrorStatus: wire_cst_LnUrlWithdrawResult_ErrorStatus,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LnUrlWithdrawResult_Ok {
    data: *mut wire_cst_ln_url_withdraw_success_data,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_LnUrlWithdrawResult_ErrorStatus {
    data: *mut wire_cst_ln_url_error_data,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ln_url_withdraw_success_data {
    invoice: wire_cst_ln_invoice,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_locale_overrides {
    locale: *mut wire_cst_list_prim_u_8_strict,
    spacing: *mut u32,
    symbol: wire_cst_symbol,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_localized_name {
    locale: *mut wire_cst_list_prim_u_8_strict,
    name: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_log_entry {
    line: *mut wire_cst_list_prim_u_8_strict,
    level: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_lsp_information {
    id: *mut wire_cst_list_prim_u_8_strict,
    name: *mut wire_cst_list_prim_u_8_strict,
    widget_url: *mut wire_cst_list_prim_u_8_strict,
    pubkey: *mut wire_cst_list_prim_u_8_strict,
    host: *mut wire_cst_list_prim_u_8_strict,
    base_fee_msat: i64,
    fee_rate: f64,
    time_lock_delta: u32,
    min_htlc_msat: i64,
    lsp_pubkey: *mut wire_cst_list_prim_u_8_strict,
    opening_fee_params_list: wire_cst_opening_fee_params_menu,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_max_reverse_swap_amount_response {
    total_sat: u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_message_success_action_data {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_metadata_filter {
    json_path: *mut wire_cst_list_prim_u_8_strict,
    json_value: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_node_config {
    tag: i32,
    kind: NodeConfigKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union NodeConfigKind {
    Greenlight: wire_cst_NodeConfig_Greenlight,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_NodeConfig_Greenlight {
    config: *mut wire_cst_greenlight_node_config,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_node_credentials {
    tag: i32,
    kind: NodeCredentialsKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union NodeCredentialsKind {
    Greenlight: wire_cst_NodeCredentials_Greenlight,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_NodeCredentials_Greenlight {
    credentials: *mut wire_cst_greenlight_credentials,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_node_state {
    id: *mut wire_cst_list_prim_u_8_strict,
    block_height: u32,
    channels_balance_msat: u64,
    onchain_balance_msat: u64,
    pending_onchain_balance_msat: u64,
    utxos: *mut wire_cst_list_unspent_transaction_output,
    max_payable_msat: u64,
    max_receivable_msat: u64,
    max_single_payment_amount_msat: u64,
    max_chan_reserve_msats: u64,
    connected_peers: *mut wire_cst_list_String,
    inbound_liquidity_msats: u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_onchain_payment_limits_response {
    min_sat: u64,
    max_sat: u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_open_channel_fee_request {
    amount_msat: *mut u64,
    expiry: *mut u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_open_channel_fee_response {
    fee_msat: *mut u64,
    fee_params: wire_cst_opening_fee_params,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_opening_fee_params {
    min_msat: u64,
    proportional: u32,
    valid_until: *mut wire_cst_list_prim_u_8_strict,
    max_idle_time: u32,
    max_client_to_self_delay: u32,
    promise: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_opening_fee_params_menu {
    values: *mut wire_cst_list_opening_fee_params,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_pay_onchain_request {
    recipient_address: *mut wire_cst_list_prim_u_8_strict,
    prepare_res: wire_cst_prepare_onchain_payment_response,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_pay_onchain_response {
    reverse_swap_info: wire_cst_reverse_swap_info,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_payment {
    id: *mut wire_cst_list_prim_u_8_strict,
    payment_type: i32,
    payment_time: i64,
    amount_msat: u64,
    fee_msat: u64,
    status: i32,
    error: *mut wire_cst_list_prim_u_8_strict,
    description: *mut wire_cst_list_prim_u_8_strict,
    details: wire_cst_payment_details,
    metadata: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_payment_details {
    tag: i32,
    kind: PaymentDetailsKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union PaymentDetailsKind {
    Ln: wire_cst_PaymentDetails_Ln,
    ClosedChannel: wire_cst_PaymentDetails_ClosedChannel,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PaymentDetails_Ln {
    data: *mut wire_cst_ln_payment_details,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_PaymentDetails_ClosedChannel {
    data: *mut wire_cst_closed_channel_payment_details,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_payment_failed_data {
    error: *mut wire_cst_list_prim_u_8_strict,
    node_id: *mut wire_cst_list_prim_u_8_strict,
    invoice: *mut wire_cst_ln_invoice,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_prepare_onchain_payment_request {
    amount_sat: u64,
    amount_type: i32,
    claim_tx_feerate: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_prepare_onchain_payment_response {
    fees_hash: *mut wire_cst_list_prim_u_8_strict,
    fees_percentage: f64,
    fees_lockup: u64,
    fees_claim: u64,
    sender_amount_sat: u64,
    recipient_amount_sat: u64,
    total_fees: u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_prepare_redeem_onchain_funds_request {
    to_address: *mut wire_cst_list_prim_u_8_strict,
    sat_per_vbyte: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_prepare_redeem_onchain_funds_response {
    tx_weight: u64,
    tx_fee_sat: u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_prepare_refund_request {
    swap_address: *mut wire_cst_list_prim_u_8_strict,
    to_address: *mut wire_cst_list_prim_u_8_strict,
    sat_per_vbyte: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_prepare_refund_response {
    refund_tx_weight: u32,
    refund_tx_fee_sat: u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_rate {
    coin: *mut wire_cst_list_prim_u_8_strict,
    value: f64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_receive_onchain_request {
    opening_fee_params: *mut wire_cst_opening_fee_params,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_receive_payment_request {
    amount_msat: u64,
    description: *mut wire_cst_list_prim_u_8_strict,
    preimage: *mut wire_cst_list_prim_u_8_strict,
    opening_fee_params: *mut wire_cst_opening_fee_params,
    use_description_hash: *mut bool,
    expiry: *mut u32,
    cltv: *mut u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_receive_payment_response {
    ln_invoice: wire_cst_ln_invoice,
    opening_fee_params: *mut wire_cst_opening_fee_params,
    opening_fee_msat: *mut u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_recommended_fees {
    fastest_fee: u64,
    half_hour_fee: u64,
    hour_fee: u64,
    economy_fee: u64,
    minimum_fee: u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_redeem_onchain_funds_request {
    to_address: *mut wire_cst_list_prim_u_8_strict,
    sat_per_vbyte: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_redeem_onchain_funds_response {
    txid: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_refund_request {
    swap_address: *mut wire_cst_list_prim_u_8_strict,
    to_address: *mut wire_cst_list_prim_u_8_strict,
    sat_per_vbyte: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_refund_response {
    refund_tx_id: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_report_issue_request {
    tag: i32,
    kind: ReportIssueRequestKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union ReportIssueRequestKind {
    PaymentFailure: wire_cst_ReportIssueRequest_PaymentFailure,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_ReportIssueRequest_PaymentFailure {
    data: *mut wire_cst_report_payment_failure_details,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_report_payment_failure_details {
    payment_hash: *mut wire_cst_list_prim_u_8_strict,
    comment: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_reverse_swap_fees_request {
    send_amount_sat: *mut u64,
    claim_tx_feerate: *mut u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_reverse_swap_info {
    id: *mut wire_cst_list_prim_u_8_strict,
    claim_pubkey: *mut wire_cst_list_prim_u_8_strict,
    lockup_txid: *mut wire_cst_list_prim_u_8_strict,
    claim_txid: *mut wire_cst_list_prim_u_8_strict,
    onchain_amount_sat: u64,
    status: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_reverse_swap_pair_info {
    min: u64,
    max: u64,
    fees_hash: *mut wire_cst_list_prim_u_8_strict,
    fees_percentage: f64,
    fees_lockup: u64,
    fees_claim: u64,
    total_fees: *mut u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_route_hint {
    hops: *mut wire_cst_list_route_hint_hop,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_route_hint_hop {
    src_node_id: *mut wire_cst_list_prim_u_8_strict,
    short_channel_id: u64,
    fees_base_msat: u32,
    fees_proportional_millionths: u32,
    cltv_expiry_delta: u64,
    htlc_minimum_msat: *mut u64,
    htlc_maximum_msat: *mut u64,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_send_onchain_request {
    amount_sat: u64,
    onchain_recipient_address: *mut wire_cst_list_prim_u_8_strict,
    pair_hash: *mut wire_cst_list_prim_u_8_strict,
    sat_per_vbyte: u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_send_onchain_response {
    reverse_swap_info: wire_cst_reverse_swap_info,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_send_payment_request {
    bolt11: *mut wire_cst_list_prim_u_8_strict,
    amount_msat: *mut u64,
    label: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_send_payment_response {
    payment: wire_cst_payment,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_send_spontaneous_payment_request {
    node_id: *mut wire_cst_list_prim_u_8_strict,
    amount_msat: u64,
    extra_tlvs: *mut wire_cst_list_tlv_entry,
    label: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_service_health_check_response {
    status: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_sign_message_request {
    message: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_sign_message_response {
    signature: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_static_backup_request {
    working_dir: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_static_backup_response {
    backup: *mut wire_cst_list_String,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_success_action_processed {
    tag: i32,
    kind: SuccessActionProcessedKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union SuccessActionProcessedKind {
    Aes: wire_cst_SuccessActionProcessed_Aes,
    Message: wire_cst_SuccessActionProcessed_Message,
    Url: wire_cst_SuccessActionProcessed_Url,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_SuccessActionProcessed_Aes {
    result: *mut wire_cst_aes_success_action_data_result,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_SuccessActionProcessed_Message {
    data: *mut wire_cst_message_success_action_data,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_SuccessActionProcessed_Url {
    data: *mut wire_cst_url_success_action_data,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_swap_info {
    bitcoin_address: *mut wire_cst_list_prim_u_8_strict,
    created_at: i64,
    lock_height: i64,
    payment_hash: *mut wire_cst_list_prim_u_8_strict,
    preimage: *mut wire_cst_list_prim_u_8_strict,
    private_key: *mut wire_cst_list_prim_u_8_strict,
    public_key: *mut wire_cst_list_prim_u_8_strict,
    swapper_public_key: *mut wire_cst_list_prim_u_8_strict,
    script: *mut wire_cst_list_prim_u_8_strict,
    bolt11: *mut wire_cst_list_prim_u_8_strict,
    paid_msat: u64,
    total_incoming_txs: u64,
    confirmed_sats: u64,
    unconfirmed_sats: u64,
    status: i32,
    refund_tx_ids: *mut wire_cst_list_String,
    unconfirmed_tx_ids: *mut wire_cst_list_String,
    confirmed_tx_ids: *mut wire_cst_list_String,
    min_allowed_deposit: i64,
    max_allowed_deposit: i64,
    max_swapper_payable: i64,
    last_redeem_error: *mut wire_cst_list_prim_u_8_strict,
    channel_opening_fees: *mut wire_cst_opening_fee_params,
    confirmed_at: *mut u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_symbol {
    grapheme: *mut wire_cst_list_prim_u_8_strict,
    template: *mut wire_cst_list_prim_u_8_strict,
    rtl: *mut bool,
    position: *mut u32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_tlv_entry {
    field_number: u64,
    value: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_unspent_transaction_output {
    txid: *mut wire_cst_list_prim_u_8_strict,
    outnum: u32,
    amount_millisatoshi: u64,
    address: *mut wire_cst_list_prim_u_8_strict,
    reserved: bool,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_url_success_action_data {
    description: *mut wire_cst_list_prim_u_8_strict,
    url: *mut wire_cst_list_prim_u_8_strict,
}
