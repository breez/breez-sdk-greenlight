// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.32.

// Section: imports

use super::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::for_generated::wasm_bindgen;
use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate_web!();

// Section: dart2rust

impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error> for String {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
        unimplemented!()
    }
}
impl
    CstDecode<
        StreamSink<crate::breez_services::BreezEvent, flutter_rust_bridge::for_generated::DcoCodec>,
    > for String
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> StreamSink<crate::breez_services::BreezEvent, flutter_rust_bridge::for_generated::DcoCodec>
    {
        StreamSink::deserialize(self)
    }
}
impl CstDecode<StreamSink<crate::models::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>>
    for String
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> StreamSink<crate::models::LogEntry, flutter_rust_bridge::for_generated::DcoCodec> {
        StreamSink::deserialize(self)
    }
}
impl CstDecode<String> for String {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> String {
        self
    }
}
impl CstDecode<crate::lnurl::pay::model::AesSuccessActionDataDecrypted>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::AesSuccessActionDataDecrypted {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::lnurl::pay::model::AesSuccessActionDataDecrypted {
            description: self_.get(0).cst_decode(),
            plaintext: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::lnurl::pay::model::AesSuccessActionDataResult>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::AesSuccessActionDataResult {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::lnurl::pay::model::AesSuccessActionDataResult::Decrypted {
                data: self_.get(1).cst_decode(),
            },
            1 => crate::lnurl::pay::model::AesSuccessActionDataResult::ErrorStatus {
                reason: self_.get(1).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::breez_services::BackupFailedData>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::BackupFailedData {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::breez_services::BackupFailedData {
            error: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::BackupStatus>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::BackupStatus {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::models::BackupStatus {
            backed_up: self_.get(0).cst_decode(),
            last_backup_time: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::input_parser::BitcoinAddressData>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::input_parser::BitcoinAddressData {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            5,
            "Expected 5 elements, got {}",
            self_.length()
        );
        crate::input_parser::BitcoinAddressData {
            address: self_.get(0).cst_decode(),
            network: self_.get(1).cst_decode(),
            amount_sat: self_.get(2).cst_decode(),
            label: self_.get(3).cst_decode(),
            message: self_.get(4).cst_decode(),
        }
    }
}
impl CstDecode<crate::breez_services::BreezEvent>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::BreezEvent {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::breez_services::BreezEvent::NewBlock {
                block: self_.get(1).cst_decode(),
            },
            1 => crate::breez_services::BreezEvent::InvoicePaid {
                details: self_.get(1).cst_decode(),
            },
            2 => crate::breez_services::BreezEvent::Synced,
            3 => crate::breez_services::BreezEvent::PaymentSucceed {
                details: self_.get(1).cst_decode(),
            },
            4 => crate::breez_services::BreezEvent::PaymentFailed {
                details: self_.get(1).cst_decode(),
            },
            5 => crate::breez_services::BreezEvent::BackupStarted,
            6 => crate::breez_services::BreezEvent::BackupSucceeded,
            7 => crate::breez_services::BreezEvent::BackupFailed {
                details: self_.get(1).cst_decode(),
            },
            8 => crate::breez_services::BreezEvent::SwapUpdated {
                details: self_.get(1).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::models::BuyBitcoinRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::BuyBitcoinRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::models::BuyBitcoinRequest {
            provider: self_.get(0).cst_decode(),
            opening_fee_params: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::BuyBitcoinResponse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::BuyBitcoinResponse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::models::BuyBitcoinResponse {
            url: self_.get(0).cst_decode(),
            opening_fee_params: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::breez_services::CheckMessageRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::CheckMessageRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::breez_services::CheckMessageRequest {
            message: self_.get(0).cst_decode(),
            pubkey: self_.get(1).cst_decode(),
            signature: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::breez_services::CheckMessageResponse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::CheckMessageResponse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::breez_services::CheckMessageResponse {
            is_valid: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ClosedChannelPaymentDetails>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ClosedChannelPaymentDetails {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::models::ClosedChannelPaymentDetails {
            state: self_.get(0).cst_decode(),
            funding_txid: self_.get(1).cst_decode(),
            short_channel_id: self_.get(2).cst_decode(),
            closing_txid: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::Config>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::Config {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            11,
            "Expected 11 elements, got {}",
            self_.length()
        );
        crate::models::Config {
            breezserver: self_.get(0).cst_decode(),
            chainnotifier_url: self_.get(1).cst_decode(),
            mempoolspace_url: self_.get(2).cst_decode(),
            working_dir: self_.get(3).cst_decode(),
            network: self_.get(4).cst_decode(),
            payment_timeout_sec: self_.get(5).cst_decode(),
            default_lsp_id: self_.get(6).cst_decode(),
            api_key: self_.get(7).cst_decode(),
            maxfee_percent: self_.get(8).cst_decode(),
            exemptfee_msat: self_.get(9).cst_decode(),
            node_config: self_.get(10).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ConfigureNodeRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ConfigureNodeRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::models::ConfigureNodeRequest {
            close_to_address: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ConnectRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ConnectRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::models::ConnectRequest {
            config: self_.get(0).cst_decode(),
            seed: self_.get(1).cst_decode(),
            restore_only: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::fiat::CurrencyInfo>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::fiat::CurrencyInfo {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            7,
            "Expected 7 elements, got {}",
            self_.length()
        );
        crate::fiat::CurrencyInfo {
            name: self_.get(0).cst_decode(),
            fraction_size: self_.get(1).cst_decode(),
            spacing: self_.get(2).cst_decode(),
            symbol: self_.get(3).cst_decode(),
            uniq_symbol: self_.get(4).cst_decode(),
            localized_name: self_.get(5).cst_decode(),
            locale_overrides: self_.get(6).cst_decode(),
        }
    }
}
impl CstDecode<crate::fiat::FiatCurrency>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::fiat::FiatCurrency {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::fiat::FiatCurrency {
            id: self_.get(0).cst_decode(),
            info: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::GreenlightCredentials>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::GreenlightCredentials {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::models::GreenlightCredentials {
            device_key: self_.get(0).cst_decode(),
            device_cert: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::GreenlightNodeConfig>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::GreenlightNodeConfig {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::models::GreenlightNodeConfig {
            partner_credentials: self_.get(0).cst_decode(),
            invite_code: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::input_parser::InputType>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::input_parser::InputType {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::input_parser::InputType::BitcoinAddress {
                address: self_.get(1).cst_decode(),
            },
            1 => crate::input_parser::InputType::Bolt11 {
                invoice: self_.get(1).cst_decode(),
            },
            2 => crate::input_parser::InputType::NodeId {
                node_id: self_.get(1).cst_decode(),
            },
            3 => crate::input_parser::InputType::Url {
                url: self_.get(1).cst_decode(),
            },
            4 => crate::input_parser::InputType::LnUrlPay {
                data: self_.get(1).cst_decode(),
            },
            5 => crate::input_parser::InputType::LnUrlWithdraw {
                data: self_.get(1).cst_decode(),
            },
            6 => crate::input_parser::InputType::LnUrlAuth {
                data: self_.get(1).cst_decode(),
            },
            7 => crate::input_parser::InputType::LnUrlError {
                data: self_.get(1).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::breez_services::InvoicePaidDetails>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::InvoicePaidDetails {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::breez_services::InvoicePaidDetails {
            payment_hash: self_.get(0).cst_decode(),
            bolt11: self_.get(1).cst_decode(),
            payment: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<Vec<String>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<String> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::fiat::FiatCurrency>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::fiat::FiatCurrency> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::fiat::LocaleOverrides>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::fiat::LocaleOverrides> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::fiat::LocalizedName>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::fiat::LocalizedName> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::lsp::LspInformation>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::lsp::LspInformation> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::models::MetadataFilter>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::models::MetadataFilter> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::models::OpeningFeeParams>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::models::OpeningFeeParams> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::models::Payment>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::models::Payment> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::models::PaymentTypeFilter>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::models::PaymentTypeFilter> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<crate::models::ListPaymentsRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ListPaymentsRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            7,
            "Expected 7 elements, got {}",
            self_.length()
        );
        crate::models::ListPaymentsRequest {
            filters: self_.get(0).cst_decode(),
            metadata_filters: self_.get(1).cst_decode(),
            from_timestamp: self_.get(2).cst_decode(),
            to_timestamp: self_.get(3).cst_decode(),
            include_failures: self_.get(4).cst_decode(),
            offset: self_.get(5).cst_decode(),
            limit: self_.get(6).cst_decode(),
        }
    }
}
impl CstDecode<Vec<u8>> for Box<[u8]> {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u8> {
        self.into_vec()
    }
}
impl CstDecode<Vec<crate::fiat::Rate>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::fiat::Rate> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::models::ReverseSwapInfo>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::models::ReverseSwapInfo> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::invoice::RouteHint>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::invoice::RouteHint> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::invoice::RouteHintHop>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::invoice::RouteHintHop> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::models::SwapInfo>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::models::SwapInfo> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::models::TlvEntry>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::models::TlvEntry> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::models::UnspentTransactionOutput>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::models::UnspentTransactionOutput> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<crate::invoice::LNInvoice>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::invoice::LNInvoice {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            12,
            "Expected 12 elements, got {}",
            self_.length()
        );
        crate::invoice::LNInvoice {
            bolt11: self_.get(0).cst_decode(),
            network: self_.get(1).cst_decode(),
            payee_pubkey: self_.get(2).cst_decode(),
            payment_hash: self_.get(3).cst_decode(),
            description: self_.get(4).cst_decode(),
            description_hash: self_.get(5).cst_decode(),
            amount_msat: self_.get(6).cst_decode(),
            timestamp: self_.get(7).cst_decode(),
            expiry: self_.get(8).cst_decode(),
            routing_hints: self_.get(9).cst_decode(),
            payment_secret: self_.get(10).cst_decode(),
            min_final_cltv_expiry_delta: self_.get(11).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::LnPaymentDetails>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::LnPaymentDetails {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            15,
            "Expected 15 elements, got {}",
            self_.length()
        );
        crate::models::LnPaymentDetails {
            payment_hash: self_.get(0).cst_decode(),
            label: self_.get(1).cst_decode(),
            destination_pubkey: self_.get(2).cst_decode(),
            payment_preimage: self_.get(3).cst_decode(),
            keysend: self_.get(4).cst_decode(),
            bolt11: self_.get(5).cst_decode(),
            open_channel_bolt11: self_.get(6).cst_decode(),
            lnurl_success_action: self_.get(7).cst_decode(),
            lnurl_pay_domain: self_.get(8).cst_decode(),
            ln_address: self_.get(9).cst_decode(),
            lnurl_metadata: self_.get(10).cst_decode(),
            lnurl_withdraw_endpoint: self_.get(11).cst_decode(),
            swap_info: self_.get(12).cst_decode(),
            reverse_swap_info: self_.get(13).cst_decode(),
            pending_expiration_block: self_.get(14).cst_decode(),
        }
    }
}
impl CstDecode<crate::input_parser::LnUrlAuthRequestData>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::input_parser::LnUrlAuthRequestData {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::input_parser::LnUrlAuthRequestData {
            k1: self_.get(0).cst_decode(),
            action: self_.get(1).cst_decode(),
            domain: self_.get(2).cst_decode(),
            url: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::LnUrlCallbackStatus>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::LnUrlCallbackStatus {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::models::LnUrlCallbackStatus::Ok,
            1 => crate::models::LnUrlCallbackStatus::ErrorStatus {
                data: self_.get(1).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::input_parser::LnUrlErrorData>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::input_parser::LnUrlErrorData {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::input_parser::LnUrlErrorData {
            reason: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::lnurl::pay::model::LnUrlPayErrorData>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::LnUrlPayErrorData {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::lnurl::pay::model::LnUrlPayErrorData {
            payment_hash: self_.get(0).cst_decode(),
            reason: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::LnUrlPayRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::LnUrlPayRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::models::LnUrlPayRequest {
            data: self_.get(0).cst_decode(),
            amount_msat: self_.get(1).cst_decode(),
            comment: self_.get(2).cst_decode(),
            payment_label: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::input_parser::LnUrlPayRequestData>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::input_parser::LnUrlPayRequestData {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            9,
            "Expected 9 elements, got {}",
            self_.length()
        );
        crate::input_parser::LnUrlPayRequestData {
            callback: self_.get(0).cst_decode(),
            min_sendable: self_.get(1).cst_decode(),
            max_sendable: self_.get(2).cst_decode(),
            metadata_str: self_.get(3).cst_decode(),
            comment_allowed: self_.get(4).cst_decode(),
            domain: self_.get(5).cst_decode(),
            allows_nostr: self_.get(6).cst_decode(),
            nostr_pubkey: self_.get(7).cst_decode(),
            ln_address: self_.get(8).cst_decode(),
        }
    }
}
impl CstDecode<crate::lnurl::pay::model::LnUrlPayResult>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::LnUrlPayResult {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::lnurl::pay::model::LnUrlPayResult::EndpointSuccess {
                data: self_.get(1).cst_decode(),
            },
            1 => crate::lnurl::pay::model::LnUrlPayResult::EndpointError {
                data: self_.get(1).cst_decode(),
            },
            2 => crate::lnurl::pay::model::LnUrlPayResult::PayError {
                data: self_.get(1).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::lnurl::pay::model::LnUrlPaySuccessData>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::LnUrlPaySuccessData {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::lnurl::pay::model::LnUrlPaySuccessData {
            payment: self_.get(0).cst_decode(),
            success_action: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::LnUrlWithdrawRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::LnUrlWithdrawRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::models::LnUrlWithdrawRequest {
            data: self_.get(0).cst_decode(),
            amount_msat: self_.get(1).cst_decode(),
            description: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::input_parser::LnUrlWithdrawRequestData>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::input_parser::LnUrlWithdrawRequestData {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            5,
            "Expected 5 elements, got {}",
            self_.length()
        );
        crate::input_parser::LnUrlWithdrawRequestData {
            callback: self_.get(0).cst_decode(),
            k1: self_.get(1).cst_decode(),
            default_description: self_.get(2).cst_decode(),
            min_withdrawable: self_.get(3).cst_decode(),
            max_withdrawable: self_.get(4).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::LnUrlWithdrawResult>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::LnUrlWithdrawResult {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::models::LnUrlWithdrawResult::Ok {
                data: self_.get(1).cst_decode(),
            },
            1 => crate::models::LnUrlWithdrawResult::ErrorStatus {
                data: self_.get(1).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::models::LnUrlWithdrawSuccessData>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::LnUrlWithdrawSuccessData {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::models::LnUrlWithdrawSuccessData {
            invoice: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::fiat::LocaleOverrides>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::fiat::LocaleOverrides {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::fiat::LocaleOverrides {
            locale: self_.get(0).cst_decode(),
            spacing: self_.get(1).cst_decode(),
            symbol: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::fiat::LocalizedName>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::fiat::LocalizedName {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::fiat::LocalizedName {
            locale: self_.get(0).cst_decode(),
            name: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::LogEntry>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::LogEntry {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::models::LogEntry {
            line: self_.get(0).cst_decode(),
            level: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::lsp::LspInformation>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lsp::LspInformation {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            11,
            "Expected 11 elements, got {}",
            self_.length()
        );
        crate::lsp::LspInformation {
            id: self_.get(0).cst_decode(),
            name: self_.get(1).cst_decode(),
            widget_url: self_.get(2).cst_decode(),
            pubkey: self_.get(3).cst_decode(),
            host: self_.get(4).cst_decode(),
            base_fee_msat: self_.get(5).cst_decode(),
            fee_rate: self_.get(6).cst_decode(),
            time_lock_delta: self_.get(7).cst_decode(),
            min_htlc_msat: self_.get(8).cst_decode(),
            lsp_pubkey: self_.get(9).cst_decode(),
            opening_fee_params_list: self_.get(10).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::MaxReverseSwapAmountResponse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::MaxReverseSwapAmountResponse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::models::MaxReverseSwapAmountResponse {
            total_sat: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::lnurl::pay::model::MessageSuccessActionData>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::MessageSuccessActionData {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::lnurl::pay::model::MessageSuccessActionData {
            message: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::MetadataFilter>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::MetadataFilter {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::models::MetadataFilter {
            json_path: self_.get(0).cst_decode(),
            json_value: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::NodeConfig>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::NodeConfig {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::models::NodeConfig::Greenlight {
                config: self_.get(1).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::models::NodeCredentials>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::NodeCredentials {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::models::NodeCredentials::Greenlight {
                credentials: self_.get(1).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::models::NodeState>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::NodeState {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            12,
            "Expected 12 elements, got {}",
            self_.length()
        );
        crate::models::NodeState {
            id: self_.get(0).cst_decode(),
            block_height: self_.get(1).cst_decode(),
            channels_balance_msat: self_.get(2).cst_decode(),
            onchain_balance_msat: self_.get(3).cst_decode(),
            pending_onchain_balance_msat: self_.get(4).cst_decode(),
            utxos: self_.get(5).cst_decode(),
            max_payable_msat: self_.get(6).cst_decode(),
            max_receivable_msat: self_.get(7).cst_decode(),
            max_single_payment_amount_msat: self_.get(8).cst_decode(),
            max_chan_reserve_msats: self_.get(9).cst_decode(),
            connected_peers: self_.get(10).cst_decode(),
            inbound_liquidity_msats: self_.get(11).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::OnchainPaymentLimitsResponse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::OnchainPaymentLimitsResponse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::models::OnchainPaymentLimitsResponse {
            min_sat: self_.get(0).cst_decode(),
            max_sat: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::OpenChannelFeeRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::OpenChannelFeeRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::models::OpenChannelFeeRequest {
            amount_msat: self_.get(0).cst_decode(),
            expiry: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::OpenChannelFeeResponse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::OpenChannelFeeResponse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::models::OpenChannelFeeResponse {
            fee_msat: self_.get(0).cst_decode(),
            fee_params: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::OpeningFeeParams>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::OpeningFeeParams {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            6,
            "Expected 6 elements, got {}",
            self_.length()
        );
        crate::models::OpeningFeeParams {
            min_msat: self_.get(0).cst_decode(),
            proportional: self_.get(1).cst_decode(),
            valid_until: self_.get(2).cst_decode(),
            max_idle_time: self_.get(3).cst_decode(),
            max_client_to_self_delay: self_.get(4).cst_decode(),
            promise: self_.get(5).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::OpeningFeeParamsMenu>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::OpeningFeeParamsMenu {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::models::OpeningFeeParamsMenu {
            values: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<Option<String>> for Option<String> {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Option<String> {
        self.map(CstDecode::cst_decode)
    }
}
impl CstDecode<Option<Vec<u8>>> for Option<Box<[u8]>> {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Option<Vec<u8>> {
        self.map(CstDecode::cst_decode)
    }
}
impl CstDecode<crate::models::PayOnchainRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PayOnchainRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::models::PayOnchainRequest {
            recipient_address: self_.get(0).cst_decode(),
            prepare_res: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::PayOnchainResponse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PayOnchainResponse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::models::PayOnchainResponse {
            reverse_swap_info: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::Payment>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::Payment {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            10,
            "Expected 10 elements, got {}",
            self_.length()
        );
        crate::models::Payment {
            id: self_.get(0).cst_decode(),
            payment_type: self_.get(1).cst_decode(),
            payment_time: self_.get(2).cst_decode(),
            amount_msat: self_.get(3).cst_decode(),
            fee_msat: self_.get(4).cst_decode(),
            status: self_.get(5).cst_decode(),
            error: self_.get(6).cst_decode(),
            description: self_.get(7).cst_decode(),
            details: self_.get(8).cst_decode(),
            metadata: self_.get(9).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::PaymentDetails>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PaymentDetails {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::models::PaymentDetails::Ln {
                data: self_.get(1).cst_decode(),
            },
            1 => crate::models::PaymentDetails::ClosedChannel {
                data: self_.get(1).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::breez_services::PaymentFailedData>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::PaymentFailedData {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::breez_services::PaymentFailedData {
            error: self_.get(0).cst_decode(),
            node_id: self_.get(1).cst_decode(),
            invoice: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::PrepareOnchainPaymentRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PrepareOnchainPaymentRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::models::PrepareOnchainPaymentRequest {
            amount_sat: self_.get(0).cst_decode(),
            amount_type: self_.get(1).cst_decode(),
            claim_tx_feerate: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::PrepareOnchainPaymentResponse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PrepareOnchainPaymentResponse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            7,
            "Expected 7 elements, got {}",
            self_.length()
        );
        crate::models::PrepareOnchainPaymentResponse {
            fees_hash: self_.get(0).cst_decode(),
            fees_percentage: self_.get(1).cst_decode(),
            fees_lockup: self_.get(2).cst_decode(),
            fees_claim: self_.get(3).cst_decode(),
            sender_amount_sat: self_.get(4).cst_decode(),
            recipient_amount_sat: self_.get(5).cst_decode(),
            total_fees: self_.get(6).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::PrepareRedeemOnchainFundsRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PrepareRedeemOnchainFundsRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::models::PrepareRedeemOnchainFundsRequest {
            to_address: self_.get(0).cst_decode(),
            sat_per_vbyte: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::PrepareRedeemOnchainFundsResponse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PrepareRedeemOnchainFundsResponse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::models::PrepareRedeemOnchainFundsResponse {
            tx_weight: self_.get(0).cst_decode(),
            tx_fee_sat: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::PrepareRefundRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PrepareRefundRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::models::PrepareRefundRequest {
            swap_address: self_.get(0).cst_decode(),
            to_address: self_.get(1).cst_decode(),
            sat_per_vbyte: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::PrepareRefundResponse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PrepareRefundResponse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::models::PrepareRefundResponse {
            refund_tx_weight: self_.get(0).cst_decode(),
            refund_tx_fee_sat: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::fiat::Rate> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::fiat::Rate {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::fiat::Rate {
            coin: self_.get(0).cst_decode(),
            value: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ReceiveOnchainRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReceiveOnchainRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::models::ReceiveOnchainRequest {
            opening_fee_params: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ReceivePaymentRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReceivePaymentRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            7,
            "Expected 7 elements, got {}",
            self_.length()
        );
        crate::models::ReceivePaymentRequest {
            amount_msat: self_.get(0).cst_decode(),
            description: self_.get(1).cst_decode(),
            preimage: self_.get(2).cst_decode(),
            opening_fee_params: self_.get(3).cst_decode(),
            use_description_hash: self_.get(4).cst_decode(),
            expiry: self_.get(5).cst_decode(),
            cltv: self_.get(6).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ReceivePaymentResponse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReceivePaymentResponse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::models::ReceivePaymentResponse {
            ln_invoice: self_.get(0).cst_decode(),
            opening_fee_params: self_.get(1).cst_decode(),
            opening_fee_msat: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::chain::RecommendedFees>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::chain::RecommendedFees {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            5,
            "Expected 5 elements, got {}",
            self_.length()
        );
        crate::chain::RecommendedFees {
            fastest_fee: self_.get(0).cst_decode(),
            half_hour_fee: self_.get(1).cst_decode(),
            hour_fee: self_.get(2).cst_decode(),
            economy_fee: self_.get(3).cst_decode(),
            minimum_fee: self_.get(4).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::RedeemOnchainFundsRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::RedeemOnchainFundsRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::models::RedeemOnchainFundsRequest {
            to_address: self_.get(0).cst_decode(),
            sat_per_vbyte: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::RedeemOnchainFundsResponse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::RedeemOnchainFundsResponse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::models::RedeemOnchainFundsResponse {
            txid: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::RefundRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::RefundRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::models::RefundRequest {
            swap_address: self_.get(0).cst_decode(),
            to_address: self_.get(1).cst_decode(),
            sat_per_vbyte: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::RefundResponse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::RefundResponse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::models::RefundResponse {
            refund_tx_id: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ReportIssueRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReportIssueRequest {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::models::ReportIssueRequest::PaymentFailure {
                data: self_.get(1).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::models::ReportPaymentFailureDetails>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReportPaymentFailureDetails {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::models::ReportPaymentFailureDetails {
            payment_hash: self_.get(0).cst_decode(),
            comment: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ReverseSwapFeesRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReverseSwapFeesRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::models::ReverseSwapFeesRequest {
            send_amount_sat: self_.get(0).cst_decode(),
            claim_tx_feerate: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ReverseSwapInfo>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReverseSwapInfo {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            6,
            "Expected 6 elements, got {}",
            self_.length()
        );
        crate::models::ReverseSwapInfo {
            id: self_.get(0).cst_decode(),
            claim_pubkey: self_.get(1).cst_decode(),
            lockup_txid: self_.get(2).cst_decode(),
            claim_txid: self_.get(3).cst_decode(),
            onchain_amount_sat: self_.get(4).cst_decode(),
            status: self_.get(5).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ReverseSwapPairInfo>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReverseSwapPairInfo {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            7,
            "Expected 7 elements, got {}",
            self_.length()
        );
        crate::models::ReverseSwapPairInfo {
            min: self_.get(0).cst_decode(),
            max: self_.get(1).cst_decode(),
            fees_hash: self_.get(2).cst_decode(),
            fees_percentage: self_.get(3).cst_decode(),
            fees_lockup: self_.get(4).cst_decode(),
            fees_claim: self_.get(5).cst_decode(),
            total_fees: self_.get(6).cst_decode(),
        }
    }
}
impl CstDecode<crate::invoice::RouteHint>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::invoice::RouteHint {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::invoice::RouteHint {
            hops: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::invoice::RouteHintHop>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::invoice::RouteHintHop {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            7,
            "Expected 7 elements, got {}",
            self_.length()
        );
        crate::invoice::RouteHintHop {
            src_node_id: self_.get(0).cst_decode(),
            short_channel_id: self_.get(1).cst_decode(),
            fees_base_msat: self_.get(2).cst_decode(),
            fees_proportional_millionths: self_.get(3).cst_decode(),
            cltv_expiry_delta: self_.get(4).cst_decode(),
            htlc_minimum_msat: self_.get(5).cst_decode(),
            htlc_maximum_msat: self_.get(6).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::SendOnchainRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SendOnchainRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::models::SendOnchainRequest {
            amount_sat: self_.get(0).cst_decode(),
            onchain_recipient_address: self_.get(1).cst_decode(),
            pair_hash: self_.get(2).cst_decode(),
            sat_per_vbyte: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::SendOnchainResponse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SendOnchainResponse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::models::SendOnchainResponse {
            reverse_swap_info: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::SendPaymentRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SendPaymentRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            3,
            "Expected 3 elements, got {}",
            self_.length()
        );
        crate::models::SendPaymentRequest {
            bolt11: self_.get(0).cst_decode(),
            amount_msat: self_.get(1).cst_decode(),
            label: self_.get(2).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::SendPaymentResponse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SendPaymentResponse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::models::SendPaymentResponse {
            payment: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::SendSpontaneousPaymentRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SendSpontaneousPaymentRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::models::SendSpontaneousPaymentRequest {
            node_id: self_.get(0).cst_decode(),
            amount_msat: self_.get(1).cst_decode(),
            extra_tlvs: self_.get(2).cst_decode(),
            label: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::ServiceHealthCheckResponse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ServiceHealthCheckResponse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::models::ServiceHealthCheckResponse {
            status: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::breez_services::SignMessageRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::SignMessageRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::breez_services::SignMessageRequest {
            message: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::breez_services::SignMessageResponse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::breez_services::SignMessageResponse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::breez_services::SignMessageResponse {
            signature: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::StaticBackupRequest>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::StaticBackupRequest {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::models::StaticBackupRequest {
            working_dir: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::StaticBackupResponse>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::StaticBackupResponse {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            1,
            "Expected 1 elements, got {}",
            self_.length()
        );
        crate::models::StaticBackupResponse {
            backup: self_.get(0).cst_decode(),
        }
    }
}
impl CstDecode<crate::lnurl::pay::model::SuccessActionProcessed>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::SuccessActionProcessed {
        let self_ = self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Array>();
        match self_.get(0).unchecked_into_f64() as _ {
            0 => crate::lnurl::pay::model::SuccessActionProcessed::Aes {
                result: self_.get(1).cst_decode(),
            },
            1 => crate::lnurl::pay::model::SuccessActionProcessed::Message {
                data: self_.get(1).cst_decode(),
            },
            2 => crate::lnurl::pay::model::SuccessActionProcessed::Url {
                data: self_.get(1).cst_decode(),
            },
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::models::SwapInfo>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SwapInfo {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            24,
            "Expected 24 elements, got {}",
            self_.length()
        );
        crate::models::SwapInfo {
            bitcoin_address: self_.get(0).cst_decode(),
            created_at: self_.get(1).cst_decode(),
            lock_height: self_.get(2).cst_decode(),
            payment_hash: self_.get(3).cst_decode(),
            preimage: self_.get(4).cst_decode(),
            private_key: self_.get(5).cst_decode(),
            public_key: self_.get(6).cst_decode(),
            swapper_public_key: self_.get(7).cst_decode(),
            script: self_.get(8).cst_decode(),
            bolt11: self_.get(9).cst_decode(),
            paid_msat: self_.get(10).cst_decode(),
            total_incoming_txs: self_.get(11).cst_decode(),
            confirmed_sats: self_.get(12).cst_decode(),
            unconfirmed_sats: self_.get(13).cst_decode(),
            status: self_.get(14).cst_decode(),
            refund_tx_ids: self_.get(15).cst_decode(),
            unconfirmed_tx_ids: self_.get(16).cst_decode(),
            confirmed_tx_ids: self_.get(17).cst_decode(),
            min_allowed_deposit: self_.get(18).cst_decode(),
            max_allowed_deposit: self_.get(19).cst_decode(),
            max_swapper_payable: self_.get(20).cst_decode(),
            last_redeem_error: self_.get(21).cst_decode(),
            channel_opening_fees: self_.get(22).cst_decode(),
            confirmed_at: self_.get(23).cst_decode(),
        }
    }
}
impl CstDecode<crate::fiat::Symbol> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::fiat::Symbol {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::fiat::Symbol {
            grapheme: self_.get(0).cst_decode(),
            template: self_.get(1).cst_decode(),
            rtl: self_.get(2).cst_decode(),
            position: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::TlvEntry>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::TlvEntry {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::models::TlvEntry {
            field_number: self_.get(0).cst_decode(),
            value: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::models::UnspentTransactionOutput>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::UnspentTransactionOutput {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            5,
            "Expected 5 elements, got {}",
            self_.length()
        );
        crate::models::UnspentTransactionOutput {
            txid: self_.get(0).cst_decode(),
            outnum: self_.get(1).cst_decode(),
            amount_millisatoshi: self_.get(2).cst_decode(),
            address: self_.get(3).cst_decode(),
            reserved: self_.get(4).cst_decode(),
        }
    }
}
impl CstDecode<crate::lnurl::pay::model::UrlSuccessActionData>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::lnurl::pay::model::UrlSuccessActionData {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::lnurl::pay::model::UrlSuccessActionData {
            description: self_.get(0).cst_decode(),
            url: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
        unimplemented!()
    }
}
impl
    CstDecode<
        StreamSink<crate::breez_services::BreezEvent, flutter_rust_bridge::for_generated::DcoCodec>,
    > for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> StreamSink<crate::breez_services::BreezEvent, flutter_rust_bridge::for_generated::DcoCodec>
    {
        StreamSink::deserialize(self.as_string().expect("should be a string"))
    }
}
impl CstDecode<StreamSink<crate::models::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> StreamSink<crate::models::LogEntry, flutter_rust_bridge::for_generated::DcoCodec> {
        StreamSink::deserialize(self.as_string().expect("should be a string"))
    }
}
impl CstDecode<String> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> String {
        self.as_string().expect("non-UTF-8 string, or not a string")
    }
}
impl CstDecode<bool> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        self.is_truthy()
    }
}
impl CstDecode<crate::models::BuyBitcoinProvider>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::BuyBitcoinProvider {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::models::ChannelState>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ChannelState {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::models::EnvironmentType>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::EnvironmentType {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<f64> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> f64 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<crate::models::HealthCheckStatus>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::HealthCheckStatus {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<i32> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i32 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<i64> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i64 {
        ::std::convert::TryInto::try_into(
            self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::BigInt>()
                .unwrap(),
        )
        .unwrap()
    }
}
impl CstDecode<Vec<u8>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u8> {
        self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Uint8Array>()
            .to_vec()
            .into()
    }
}
impl CstDecode<crate::models::Network>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::Network {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::models::PaymentStatus>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PaymentStatus {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::models::PaymentType>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PaymentType {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::models::PaymentTypeFilter>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PaymentTypeFilter {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::models::ReverseSwapStatus>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReverseSwapStatus {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::models::SwapAmountType>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SwapAmountType {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<crate::models::SwapStatus>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SwapStatus {
        (self.unchecked_into_f64() as i32).cst_decode()
    }
}
impl CstDecode<u16> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u16 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<u32> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u32 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<u64> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u64 {
        ::std::convert::TryInto::try_into(
            self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::BigInt>()
                .unwrap(),
        )
        .unwrap()
    }
}
impl CstDecode<u8> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        self.unchecked_into_f64() as _
    }
}

#[wasm_bindgen]
pub fn wire_backup(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_backup_impl(port_)
}

#[wasm_bindgen]
pub fn wire_backup_status(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_backup_status_impl(port_)
}

#[wasm_bindgen]
pub fn wire_breez_events_stream(port_: flutter_rust_bridge::for_generated::MessagePort, s: String) {
    wire_breez_events_stream_impl(port_, s)
}

#[wasm_bindgen]
pub fn wire_breez_log_stream(port_: flutter_rust_bridge::for_generated::MessagePort, s: String) {
    wire_breez_log_stream_impl(port_, s)
}

#[wasm_bindgen]
pub fn wire_buy_bitcoin(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_buy_bitcoin_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_check_message(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_check_message_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_close_lsp_channels(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_close_lsp_channels_impl(port_)
}

#[wasm_bindgen]
pub fn wire_configure_node(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_configure_node_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_connect(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_connect_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_connect_lsp(port_: flutter_rust_bridge::for_generated::MessagePort, lsp_id: String) {
    wire_connect_lsp_impl(port_, lsp_id)
}

#[wasm_bindgen]
pub fn wire_default_config(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    env_type: i32,
    api_key: String,
    node_config: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_default_config_impl(port_, env_type, api_key, node_config)
}

#[wasm_bindgen]
pub fn wire_disconnect(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_disconnect_impl(port_)
}

#[wasm_bindgen]
pub fn wire_execute_command(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    command: String,
) {
    wire_execute_command_impl(port_, command)
}

#[wasm_bindgen]
pub fn wire_fetch_fiat_rates(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_fetch_fiat_rates_impl(port_)
}

#[wasm_bindgen]
pub fn wire_fetch_lsp_info(port_: flutter_rust_bridge::for_generated::MessagePort, id: String) {
    wire_fetch_lsp_info_impl(port_, id)
}

#[wasm_bindgen]
pub fn wire_fetch_reverse_swap_fees(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_fetch_reverse_swap_fees_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_generate_diagnostic_data(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_generate_diagnostic_data_impl(port_)
}

#[wasm_bindgen]
pub fn wire_in_progress_onchain_payments(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_in_progress_onchain_payments_impl(port_)
}

#[wasm_bindgen]
pub fn wire_in_progress_reverse_swaps(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_in_progress_reverse_swaps_impl(port_)
}

#[wasm_bindgen]
pub fn wire_in_progress_swap(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_in_progress_swap_impl(port_)
}

#[wasm_bindgen]
pub fn wire_is_initialized(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_is_initialized_impl(port_)
}

#[wasm_bindgen]
pub fn wire_list_fiat_currencies(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_list_fiat_currencies_impl(port_)
}

#[wasm_bindgen]
pub fn wire_list_lsps(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_list_lsps_impl(port_)
}

#[wasm_bindgen]
pub fn wire_list_payments(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_list_payments_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_list_refundables(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_list_refundables_impl(port_)
}

#[wasm_bindgen]
pub fn wire_lnurl_auth(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req_data: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_lnurl_auth_impl(port_, req_data)
}

#[wasm_bindgen]
pub fn wire_lnurl_pay(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_lnurl_pay_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_lnurl_withdraw(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_lnurl_withdraw_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_lsp_id(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_lsp_id_impl(port_)
}

#[wasm_bindgen]
pub fn wire_lsp_info(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_lsp_info_impl(port_)
}

#[wasm_bindgen]
pub fn wire_max_reverse_swap_amount(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_max_reverse_swap_amount_impl(port_)
}

#[wasm_bindgen]
pub fn wire_mnemonic_to_seed(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    phrase: String,
) {
    wire_mnemonic_to_seed_impl(port_, phrase)
}

#[wasm_bindgen]
pub fn wire_node_credentials(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_node_credentials_impl(port_)
}

#[wasm_bindgen]
pub fn wire_node_info(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_node_info_impl(port_)
}

#[wasm_bindgen]
pub fn wire_onchain_payment_limits(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_onchain_payment_limits_impl(port_)
}

#[wasm_bindgen]
pub fn wire_open_channel_fee(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_open_channel_fee_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_parse_input(port_: flutter_rust_bridge::for_generated::MessagePort, input: String) {
    wire_parse_input_impl(port_, input)
}

#[wasm_bindgen]
pub fn wire_parse_invoice(port_: flutter_rust_bridge::for_generated::MessagePort, invoice: String) {
    wire_parse_invoice_impl(port_, invoice)
}

#[wasm_bindgen]
pub fn wire_pay_onchain(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_pay_onchain_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_payment_by_hash(port_: flutter_rust_bridge::for_generated::MessagePort, hash: String) {
    wire_payment_by_hash_impl(port_, hash)
}

#[wasm_bindgen]
pub fn wire_prepare_onchain_payment(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_prepare_onchain_payment_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_prepare_redeem_onchain_funds(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_prepare_redeem_onchain_funds_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_prepare_refund(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_prepare_refund_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_receive_onchain(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_receive_onchain_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_receive_payment(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_receive_payment_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_recommended_fees(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_recommended_fees_impl(port_)
}

#[wasm_bindgen]
pub fn wire_redeem_onchain_funds(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_redeem_onchain_funds_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_redeem_swap(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    swap_address: String,
) {
    wire_redeem_swap_impl(port_, swap_address)
}

#[wasm_bindgen]
pub fn wire_refund(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_refund_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_register_webhook(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    webhook_url: String,
) {
    wire_register_webhook_impl(port_, webhook_url)
}

#[wasm_bindgen]
pub fn wire_report_issue(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_report_issue_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_rescan_swaps(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_rescan_swaps_impl(port_)
}

#[wasm_bindgen]
pub fn wire_send_onchain(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_send_onchain_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_send_payment(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_send_payment_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_send_spontaneous_payment(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_send_spontaneous_payment_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_service_health_check(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    api_key: String,
) {
    wire_service_health_check_impl(port_, api_key)
}

#[wasm_bindgen]
pub fn wire_set_payment_metadata(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    hash: String,
    metadata: String,
) {
    wire_set_payment_metadata_impl(port_, hash, metadata)
}

#[wasm_bindgen]
pub fn wire_sign_message(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_sign_message_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_static_backup(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: flutter_rust_bridge::for_generated::wasm_bindgen::JsValue,
) {
    wire_static_backup_impl(port_, req)
}

#[wasm_bindgen]
pub fn wire_sync(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_sync_impl(port_)
}
