// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.38.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value
)]

// Section: imports

use crate::breez_services::EventListener;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = DcoCodec,
    default_rust_opaque = RustOpaqueNom,
    default_rust_auto_opaque = RustAutoOpaqueNom,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0-dev.38";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 847148110;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__binding__backup_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "backup",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || move |context| transform_result_dco((move || crate::binding::backup())()),
    )
}
fn wire__crate__binding__backup_status_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "backup_status",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || move |context| transform_result_dco((move || crate::binding::backup_status())()),
    )
}
fn wire__crate__binding__binding_event_listener_on_event_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::binding::BindingEventListener>,
    e: impl CstDecode<crate::breez_services::BreezEvent>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "binding_event_listener_on_event",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_e = e.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok({
                        crate::binding::BindingEventListener::on_event(&api_that, api_e);
                    })
                })())
            }
        },
    )
}
fn wire__crate__binding__breez_events_stream_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    s: impl CstDecode<
        StreamSink<crate::breez_services::BreezEvent, flutter_rust_bridge::for_generated::DcoCodec>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "breez_events_stream",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_s = s.cst_decode();
            move |context| {
                transform_result_dco((move || crate::binding::breez_events_stream(api_s))())
            }
        },
    )
}
fn wire__crate__binding__breez_log_stream_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    s: impl CstDecode<StreamSink<crate::models::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "breez_log_stream",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_s = s.cst_decode();
            move |context| transform_result_dco((move || crate::binding::breez_log_stream(api_s))())
        },
    )
}
fn wire__crate__binding__buy_bitcoin_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::BuyBitcoinRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "buy_bitcoin",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| transform_result_dco((move || crate::binding::buy_bitcoin(api_req))())
        },
    )
}
fn wire__crate__binding__check_message_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::breez_services::CheckMessageRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "check_message",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| transform_result_dco((move || crate::binding::check_message(api_req))())
        },
    )
}
fn wire__crate__binding__close_lsp_channels_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "close_lsp_channels",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| transform_result_dco((move || crate::binding::close_lsp_channels())())
        },
    )
}
fn wire__crate__binding__configure_node_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::ConfigureNodeRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "configure_node",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| transform_result_dco((move || crate::binding::configure_node(api_req))())
        },
    )
}
fn wire__crate__binding__connect_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::ConnectRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "connect",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| transform_result_dco((move || crate::binding::connect(api_req))())
        },
    )
}
fn wire__crate__binding__connect_lsp_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    lsp_id: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "connect_lsp",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_lsp_id = lsp_id.cst_decode();
            move |context| transform_result_dco((move || crate::binding::connect_lsp(api_lsp_id))())
        },
    )
}
fn wire__crate__binding__default_config_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    env_type: impl CstDecode<crate::models::EnvironmentType>,
    api_key: impl CstDecode<String>,
    node_config: impl CstDecode<crate::models::NodeConfig>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "default_config",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_env_type = env_type.cst_decode();
            let api_api_key = api_key.cst_decode();
            let api_node_config = node_config.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::binding::default_config(
                        api_env_type,
                        api_api_key,
                        api_node_config,
                    ))
                })())
            }
        },
    )
}
fn wire__crate__binding__disconnect_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "disconnect",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || move |context| transform_result_dco((move || crate::binding::disconnect())()),
    )
}
fn wire__crate__binding__execute_command_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    command: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "execute_command",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_command = command.cst_decode();
            move |context| {
                transform_result_dco((move || crate::binding::execute_command(api_command))())
            }
        },
    )
}
fn wire__crate__binding__fetch_fiat_rates_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "fetch_fiat_rates",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || move |context| transform_result_dco((move || crate::binding::fetch_fiat_rates())()),
    )
}
fn wire__crate__binding__fetch_lsp_info_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    id: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "fetch_lsp_info",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_id = id.cst_decode();
            move |context| transform_result_dco((move || crate::binding::fetch_lsp_info(api_id))())
        },
    )
}
fn wire__crate__binding__fetch_reverse_swap_fees_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::ReverseSwapFeesRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "fetch_reverse_swap_fees",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| {
                transform_result_dco((move || crate::binding::fetch_reverse_swap_fees(api_req))())
            }
        },
    )
}
fn wire__crate__binding__generate_diagnostic_data_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "generate_diagnostic_data",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || crate::binding::generate_diagnostic_data())())
            }
        },
    )
}
fn wire__crate__binding__in_progress_onchain_payments_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "in_progress_onchain_payments",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || crate::binding::in_progress_onchain_payments())())
            }
        },
    )
}
fn wire__crate__binding__in_progress_reverse_swaps_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "in_progress_reverse_swaps",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || crate::binding::in_progress_reverse_swaps())())
            }
        },
    )
}
fn wire__crate__binding__in_progress_swap_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "in_progress_swap",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || move |context| transform_result_dco((move || crate::binding::in_progress_swap())()),
    )
}
fn wire__crate__binding__is_initialized_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "is_initialized",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::binding::is_initialized())
                })())
            }
        },
    )
}
fn wire__crate__binding__list_fiat_currencies_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "list_fiat_currencies",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| transform_result_dco((move || crate::binding::list_fiat_currencies())())
        },
    )
}
fn wire__crate__binding__list_lsps_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "list_lsps",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || move |context| transform_result_dco((move || crate::binding::list_lsps())()),
    )
}
fn wire__crate__binding__list_payments_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::ListPaymentsRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "list_payments",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| transform_result_dco((move || crate::binding::list_payments(api_req))())
        },
    )
}
fn wire__crate__binding__list_refundables_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "list_refundables",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || move |context| transform_result_dco((move || crate::binding::list_refundables())()),
    )
}
fn wire__crate__binding__lnurl_auth_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req_data: impl CstDecode<crate::input_parser::LnUrlAuthRequestData>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "lnurl_auth", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_req_data = req_data.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         crate::binding::lnurl_auth(api_req_data)
                    })())
                } })
}
fn wire__crate__binding__lnurl_pay_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::LnUrlPayRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "lnurl_pay",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| transform_result_dco((move || crate::binding::lnurl_pay(api_req))())
        },
    )
}
fn wire__crate__binding__lnurl_withdraw_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::LnUrlWithdrawRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "lnurl_withdraw",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| transform_result_dco((move || crate::binding::lnurl_withdraw(api_req))())
        },
    )
}
fn wire__crate__binding__lsp_id_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "lsp_id",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || move |context| transform_result_dco((move || crate::binding::lsp_id())()),
    )
}
fn wire__crate__binding__lsp_info_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "lsp_info",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || move |context| transform_result_dco((move || crate::binding::lsp_info())()),
    )
}
fn wire__crate__binding__max_reverse_swap_amount_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "max_reverse_swap_amount",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || crate::binding::max_reverse_swap_amount())())
            }
        },
    )
}
fn wire__crate__binding__mnemonic_to_seed_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    phrase: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "mnemonic_to_seed",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_phrase = phrase.cst_decode();
            move |context| {
                transform_result_dco((move || crate::binding::mnemonic_to_seed(api_phrase))())
            }
        },
    )
}
fn wire__crate__binding__node_credentials_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "node_credentials",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || move |context| transform_result_dco((move || crate::binding::node_credentials())()),
    )
}
fn wire__crate__binding__node_info_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "node_info",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || move |context| transform_result_dco((move || crate::binding::node_info())()),
    )
}
fn wire__crate__binding__onchain_payment_limits_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "onchain_payment_limits", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || {  move |context|  {
                    transform_result_dco((move ||  {
                         crate::binding::onchain_payment_limits()
                    })())
                } })
}
fn wire__crate__binding__open_channel_fee_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::OpenChannelFeeRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "open_channel_fee",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| {
                transform_result_dco((move || crate::binding::open_channel_fee(api_req))())
            }
        },
    )
}
fn wire__crate__binding__parse_input_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "parse_input",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_input = input.cst_decode();
            move |context| transform_result_dco((move || crate::binding::parse_input(api_input))())
        },
    )
}
fn wire__crate__binding__parse_invoice_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    invoice: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "parse_invoice",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_invoice = invoice.cst_decode();
            move |context| {
                transform_result_dco((move || crate::binding::parse_invoice(api_invoice))())
            }
        },
    )
}
fn wire__crate__binding__pay_onchain_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::PayOnchainRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "pay_onchain",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| transform_result_dco((move || crate::binding::pay_onchain(api_req))())
        },
    )
}
fn wire__crate__binding__payment_by_hash_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    hash: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "payment_by_hash",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_hash = hash.cst_decode();
            move |context| {
                transform_result_dco((move || crate::binding::payment_by_hash(api_hash))())
            }
        },
    )
}
fn wire__crate__binding__prepare_onchain_payment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::PrepareOnchainPaymentRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "prepare_onchain_payment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| {
                transform_result_dco((move || crate::binding::prepare_onchain_payment(api_req))())
            }
        },
    )
}
fn wire__crate__binding__prepare_redeem_onchain_funds_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::PrepareRedeemOnchainFundsRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "prepare_redeem_onchain_funds",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::binding::prepare_redeem_onchain_funds(api_req)
                })())
            }
        },
    )
}
fn wire__crate__binding__prepare_refund_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::PrepareRefundRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "prepare_refund",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| transform_result_dco((move || crate::binding::prepare_refund(api_req))())
        },
    )
}
fn wire__crate__binding__receive_onchain_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::ReceiveOnchainRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "receive_onchain", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_req = req.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         crate::binding::receive_onchain(api_req)
                    })())
                } })
}
fn wire__crate__binding__receive_payment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::ReceivePaymentRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "receive_payment", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_req = req.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         crate::binding::receive_payment(api_req)
                    })())
                } })
}
fn wire__crate__binding__recommended_fees_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "recommended_fees",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || move |context| transform_result_dco((move || crate::binding::recommended_fees())()),
    )
}
fn wire__crate__binding__redeem_onchain_funds_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::RedeemOnchainFundsRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "redeem_onchain_funds",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| {
                transform_result_dco((move || crate::binding::redeem_onchain_funds(api_req))())
            }
        },
    )
}
fn wire__crate__binding__redeem_swap_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    swap_address: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "redeem_swap",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_swap_address = swap_address.cst_decode();
            move |context| {
                transform_result_dco((move || crate::binding::redeem_swap(api_swap_address))())
            }
        },
    )
}
fn wire__crate__binding__refund_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::RefundRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "refund",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| transform_result_dco((move || crate::binding::refund(api_req))())
        },
    )
}
fn wire__crate__binding__register_webhook_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    webhook_url: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "register_webhook",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_webhook_url = webhook_url.cst_decode();
            move |context| {
                transform_result_dco((move || crate::binding::register_webhook(api_webhook_url))())
            }
        },
    )
}
fn wire__crate__binding__report_issue_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::ReportIssueRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "report_issue",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| transform_result_dco((move || crate::binding::report_issue(api_req))())
        },
    )
}
fn wire__crate__binding__rescan_swaps_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rescan_swaps",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || move |context| transform_result_dco((move || crate::binding::rescan_swaps())()),
    )
}
fn wire__crate__binding__send_onchain_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::SendOnchainRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "send_onchain",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| transform_result_dco((move || crate::binding::send_onchain(api_req))())
        },
    )
}
fn wire__crate__binding__send_payment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::SendPaymentRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "send_payment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| transform_result_dco((move || crate::binding::send_payment(api_req))())
        },
    )
}
fn wire__crate__binding__send_spontaneous_payment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::SendSpontaneousPaymentRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "send_spontaneous_payment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| {
                transform_result_dco((move || crate::binding::send_spontaneous_payment(api_req))())
            }
        },
    )
}
fn wire__crate__binding__service_health_check_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    api_key: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "service_health_check",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_api_key = api_key.cst_decode();
            move |context| {
                transform_result_dco((move || crate::binding::service_health_check(api_api_key))())
            }
        },
    )
}
fn wire__crate__binding__set_payment_metadata_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    hash: impl CstDecode<String>,
    metadata: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "set_payment_metadata",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_hash = hash.cst_decode();
            let api_metadata = metadata.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::binding::set_payment_metadata(api_hash, api_metadata)
                })())
            }
        },
    )
}
fn wire__crate__binding__sign_message_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::breez_services::SignMessageRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sign_message",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| transform_result_dco((move || crate::binding::sign_message(api_req))())
        },
    )
}
fn wire__crate__binding__static_backup_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::models::StaticBackupRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "static_backup",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| transform_result_dco((move || crate::binding::static_backup(api_req))())
        },
    )
}
fn wire__crate__binding__sync_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "sync",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || move |context| transform_result_dco((move || crate::binding::sync())()),
    )
}
fn wire__crate__binding__unregister_webhook_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    webhook_url: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "unregister_webhook",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_webhook_url = webhook_url.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::binding::unregister_webhook(api_webhook_url)
                })())
            }
        },
    )
}

// Section: dart2rust

impl CstDecode<bool> for bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<crate::models::BuyBitcoinProvider> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::BuyBitcoinProvider {
        match self {
            0 => crate::models::BuyBitcoinProvider::Moonpay,
            _ => unreachable!("Invalid variant for BuyBitcoinProvider: {}", self),
        }
    }
}
impl CstDecode<crate::models::ChannelState> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ChannelState {
        match self {
            0 => crate::models::ChannelState::PendingOpen,
            1 => crate::models::ChannelState::Opened,
            2 => crate::models::ChannelState::PendingClose,
            3 => crate::models::ChannelState::Closed,
            _ => unreachable!("Invalid variant for ChannelState: {}", self),
        }
    }
}
impl CstDecode<crate::models::EnvironmentType> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::EnvironmentType {
        match self {
            0 => crate::models::EnvironmentType::Production,
            1 => crate::models::EnvironmentType::Staging,
            _ => unreachable!("Invalid variant for EnvironmentType: {}", self),
        }
    }
}
impl CstDecode<f64> for f64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> f64 {
        self
    }
}
impl CstDecode<crate::models::HealthCheckStatus> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::HealthCheckStatus {
        match self {
            0 => crate::models::HealthCheckStatus::Operational,
            1 => crate::models::HealthCheckStatus::Maintenance,
            2 => crate::models::HealthCheckStatus::ServiceDisruption,
            _ => unreachable!("Invalid variant for HealthCheckStatus: {}", self),
        }
    }
}
impl CstDecode<i32> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<i64> for i64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i64 {
        self
    }
}
impl CstDecode<crate::models::Network> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::Network {
        match self {
            0 => crate::models::Network::Bitcoin,
            1 => crate::models::Network::Testnet,
            2 => crate::models::Network::Signet,
            3 => crate::models::Network::Regtest,
            _ => unreachable!("Invalid variant for Network: {}", self),
        }
    }
}
impl CstDecode<crate::models::PaymentStatus> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PaymentStatus {
        match self {
            0 => crate::models::PaymentStatus::Pending,
            1 => crate::models::PaymentStatus::Complete,
            2 => crate::models::PaymentStatus::Failed,
            _ => unreachable!("Invalid variant for PaymentStatus: {}", self),
        }
    }
}
impl CstDecode<crate::models::PaymentType> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PaymentType {
        match self {
            0 => crate::models::PaymentType::Sent,
            1 => crate::models::PaymentType::Received,
            2 => crate::models::PaymentType::ClosedChannel,
            _ => unreachable!("Invalid variant for PaymentType: {}", self),
        }
    }
}
impl CstDecode<crate::models::PaymentTypeFilter> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::PaymentTypeFilter {
        match self {
            0 => crate::models::PaymentTypeFilter::Sent,
            1 => crate::models::PaymentTypeFilter::Received,
            2 => crate::models::PaymentTypeFilter::ClosedChannel,
            _ => unreachable!("Invalid variant for PaymentTypeFilter: {}", self),
        }
    }
}
impl CstDecode<crate::models::ReverseSwapStatus> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::ReverseSwapStatus {
        match self {
            0 => crate::models::ReverseSwapStatus::Initial,
            1 => crate::models::ReverseSwapStatus::InProgress,
            2 => crate::models::ReverseSwapStatus::Cancelled,
            3 => crate::models::ReverseSwapStatus::CompletedSeen,
            4 => crate::models::ReverseSwapStatus::CompletedConfirmed,
            _ => unreachable!("Invalid variant for ReverseSwapStatus: {}", self),
        }
    }
}
impl CstDecode<crate::models::SwapAmountType> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SwapAmountType {
        match self {
            0 => crate::models::SwapAmountType::Send,
            1 => crate::models::SwapAmountType::Receive,
            _ => unreachable!("Invalid variant for SwapAmountType: {}", self),
        }
    }
}
impl CstDecode<crate::models::SwapStatus> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::models::SwapStatus {
        match self {
            0 => crate::models::SwapStatus::Initial,
            1 => crate::models::SwapStatus::WaitingConfirmation,
            2 => crate::models::SwapStatus::Redeemable,
            3 => crate::models::SwapStatus::Redeemed,
            4 => crate::models::SwapStatus::Refundable,
            5 => crate::models::SwapStatus::Completed,
            _ => unreachable!("Invalid variant for SwapStatus: {}", self),
        }
    }
}
impl CstDecode<u16> for u16 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u16 {
        self
    }
}
impl CstDecode<u32> for u32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u32 {
        self
    }
}
impl CstDecode<u64> for u64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u64 {
        self
    }
}
impl CstDecode<u8> for u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        self
    }
}
impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode
    for StreamSink<crate::breez_services::BreezEvent, flutter_rust_bridge::for_generated::DcoCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode
    for StreamSink<crate::models::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::lnurl::pay::model::AesSuccessActionDataDecrypted {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_description = <String>::sse_decode(deserializer);
        let mut var_plaintext = <String>::sse_decode(deserializer);
        return crate::lnurl::pay::model::AesSuccessActionDataDecrypted {
            description: var_description,
            plaintext: var_plaintext,
        };
    }
}

impl SseDecode for crate::lnurl::pay::model::AesSuccessActionDataResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_data =
                    <crate::lnurl::pay::model::AesSuccessActionDataDecrypted>::sse_decode(
                        deserializer,
                    );
                return crate::lnurl::pay::model::AesSuccessActionDataResult::Decrypted {
                    data: var_data,
                };
            }
            1 => {
                let mut var_reason = <String>::sse_decode(deserializer);
                return crate::lnurl::pay::model::AesSuccessActionDataResult::ErrorStatus {
                    reason: var_reason,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::breez_services::BackupFailedData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_error = <String>::sse_decode(deserializer);
        return crate::breez_services::BackupFailedData { error: var_error };
    }
}

impl SseDecode for crate::models::BackupStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_backedUp = <bool>::sse_decode(deserializer);
        let mut var_lastBackupTime = <Option<u64>>::sse_decode(deserializer);
        return crate::models::BackupStatus {
            backed_up: var_backedUp,
            last_backup_time: var_lastBackupTime,
        };
    }
}

impl SseDecode for crate::binding::BindingEventListener {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return crate::binding::BindingEventListener {};
    }
}

impl SseDecode for crate::input_parser::BitcoinAddressData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_network = <crate::models::Network>::sse_decode(deserializer);
        let mut var_amountSat = <Option<u64>>::sse_decode(deserializer);
        let mut var_label = <Option<String>>::sse_decode(deserializer);
        let mut var_message = <Option<String>>::sse_decode(deserializer);
        return crate::input_parser::BitcoinAddressData {
            address: var_address,
            network: var_network,
            amount_sat: var_amountSat,
            label: var_label,
            message: var_message,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::breez_services::BreezEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_block = <u32>::sse_decode(deserializer);
                return crate::breez_services::BreezEvent::NewBlock { block: var_block };
            }
            1 => {
                let mut var_details =
                    <crate::breez_services::InvoicePaidDetails>::sse_decode(deserializer);
                return crate::breez_services::BreezEvent::InvoicePaid {
                    details: var_details,
                };
            }
            2 => {
                return crate::breez_services::BreezEvent::Synced;
            }
            3 => {
                let mut var_details = <crate::models::Payment>::sse_decode(deserializer);
                return crate::breez_services::BreezEvent::PaymentSucceed {
                    details: var_details,
                };
            }
            4 => {
                let mut var_details =
                    <crate::breez_services::PaymentFailedData>::sse_decode(deserializer);
                return crate::breez_services::BreezEvent::PaymentFailed {
                    details: var_details,
                };
            }
            5 => {
                return crate::breez_services::BreezEvent::BackupStarted;
            }
            6 => {
                return crate::breez_services::BreezEvent::BackupSucceeded;
            }
            7 => {
                let mut var_details =
                    <crate::breez_services::BackupFailedData>::sse_decode(deserializer);
                return crate::breez_services::BreezEvent::BackupFailed {
                    details: var_details,
                };
            }
            8 => {
                let mut var_details = <crate::models::SwapInfo>::sse_decode(deserializer);
                return crate::breez_services::BreezEvent::SwapUpdated {
                    details: var_details,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::BuyBitcoinProvider {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::models::BuyBitcoinProvider::Moonpay,
            _ => unreachable!("Invalid variant for BuyBitcoinProvider: {}", inner),
        };
    }
}

impl SseDecode for crate::models::BuyBitcoinRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_provider = <crate::models::BuyBitcoinProvider>::sse_decode(deserializer);
        let mut var_openingFeeParams =
            <Option<crate::models::OpeningFeeParams>>::sse_decode(deserializer);
        return crate::models::BuyBitcoinRequest {
            provider: var_provider,
            opening_fee_params: var_openingFeeParams,
        };
    }
}

impl SseDecode for crate::models::BuyBitcoinResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_url = <String>::sse_decode(deserializer);
        let mut var_openingFeeParams =
            <Option<crate::models::OpeningFeeParams>>::sse_decode(deserializer);
        return crate::models::BuyBitcoinResponse {
            url: var_url,
            opening_fee_params: var_openingFeeParams,
        };
    }
}

impl SseDecode for crate::models::ChannelState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::models::ChannelState::PendingOpen,
            1 => crate::models::ChannelState::Opened,
            2 => crate::models::ChannelState::PendingClose,
            3 => crate::models::ChannelState::Closed,
            _ => unreachable!("Invalid variant for ChannelState: {}", inner),
        };
    }
}

impl SseDecode for crate::breez_services::CheckMessageRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message = <String>::sse_decode(deserializer);
        let mut var_pubkey = <String>::sse_decode(deserializer);
        let mut var_signature = <String>::sse_decode(deserializer);
        return crate::breez_services::CheckMessageRequest {
            message: var_message,
            pubkey: var_pubkey,
            signature: var_signature,
        };
    }
}

impl SseDecode for crate::breez_services::CheckMessageResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_isValid = <bool>::sse_decode(deserializer);
        return crate::breez_services::CheckMessageResponse {
            is_valid: var_isValid,
        };
    }
}

impl SseDecode for crate::models::ClosedChannelPaymentDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_state = <crate::models::ChannelState>::sse_decode(deserializer);
        let mut var_fundingTxid = <String>::sse_decode(deserializer);
        let mut var_shortChannelId = <Option<String>>::sse_decode(deserializer);
        let mut var_closingTxid = <Option<String>>::sse_decode(deserializer);
        return crate::models::ClosedChannelPaymentDetails {
            state: var_state,
            funding_txid: var_fundingTxid,
            short_channel_id: var_shortChannelId,
            closing_txid: var_closingTxid,
        };
    }
}

impl SseDecode for crate::models::Config {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_breezserver = <String>::sse_decode(deserializer);
        let mut var_chainnotifierUrl = <String>::sse_decode(deserializer);
        let mut var_mempoolspaceUrl = <Option<String>>::sse_decode(deserializer);
        let mut var_workingDir = <String>::sse_decode(deserializer);
        let mut var_network = <crate::models::Network>::sse_decode(deserializer);
        let mut var_paymentTimeoutSec = <u32>::sse_decode(deserializer);
        let mut var_defaultLspId = <Option<String>>::sse_decode(deserializer);
        let mut var_apiKey = <Option<String>>::sse_decode(deserializer);
        let mut var_maxfeePercent = <f64>::sse_decode(deserializer);
        let mut var_exemptfeeMsat = <u64>::sse_decode(deserializer);
        let mut var_nodeConfig = <crate::models::NodeConfig>::sse_decode(deserializer);
        return crate::models::Config {
            breezserver: var_breezserver,
            chainnotifier_url: var_chainnotifierUrl,
            mempoolspace_url: var_mempoolspaceUrl,
            working_dir: var_workingDir,
            network: var_network,
            payment_timeout_sec: var_paymentTimeoutSec,
            default_lsp_id: var_defaultLspId,
            api_key: var_apiKey,
            maxfee_percent: var_maxfeePercent,
            exemptfee_msat: var_exemptfeeMsat,
            node_config: var_nodeConfig,
        };
    }
}

impl SseDecode for crate::models::ConfigureNodeRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_closeToAddress = <Option<String>>::sse_decode(deserializer);
        return crate::models::ConfigureNodeRequest {
            close_to_address: var_closeToAddress,
        };
    }
}

impl SseDecode for crate::models::ConnectRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_config = <crate::models::Config>::sse_decode(deserializer);
        let mut var_seed = <Vec<u8>>::sse_decode(deserializer);
        let mut var_restoreOnly = <Option<bool>>::sse_decode(deserializer);
        return crate::models::ConnectRequest {
            config: var_config,
            seed: var_seed,
            restore_only: var_restoreOnly,
        };
    }
}

impl SseDecode for crate::fiat::CurrencyInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_fractionSize = <u32>::sse_decode(deserializer);
        let mut var_spacing = <Option<u32>>::sse_decode(deserializer);
        let mut var_symbol = <Option<crate::fiat::Symbol>>::sse_decode(deserializer);
        let mut var_uniqSymbol = <Option<crate::fiat::Symbol>>::sse_decode(deserializer);
        let mut var_localizedName =
            <Option<Vec<crate::fiat::LocalizedName>>>::sse_decode(deserializer);
        let mut var_localeOverrides =
            <Option<Vec<crate::fiat::LocaleOverrides>>>::sse_decode(deserializer);
        return crate::fiat::CurrencyInfo {
            name: var_name,
            fraction_size: var_fractionSize,
            spacing: var_spacing,
            symbol: var_symbol,
            uniq_symbol: var_uniqSymbol,
            localized_name: var_localizedName,
            locale_overrides: var_localeOverrides,
        };
    }
}

impl SseDecode for crate::models::EnvironmentType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::models::EnvironmentType::Production,
            1 => crate::models::EnvironmentType::Staging,
            _ => unreachable!("Invalid variant for EnvironmentType: {}", inner),
        };
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::fiat::FiatCurrency {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_info = <crate::fiat::CurrencyInfo>::sse_decode(deserializer);
        return crate::fiat::FiatCurrency {
            id: var_id,
            info: var_info,
        };
    }
}

impl SseDecode for crate::models::GreenlightCredentials {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_deviceKey = <Vec<u8>>::sse_decode(deserializer);
        let mut var_deviceCert = <Vec<u8>>::sse_decode(deserializer);
        return crate::models::GreenlightCredentials {
            device_key: var_deviceKey,
            device_cert: var_deviceCert,
        };
    }
}

impl SseDecode for crate::models::GreenlightNodeConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_partnerCredentials =
            <Option<crate::models::GreenlightCredentials>>::sse_decode(deserializer);
        let mut var_inviteCode = <Option<String>>::sse_decode(deserializer);
        return crate::models::GreenlightNodeConfig {
            partner_credentials: var_partnerCredentials,
            invite_code: var_inviteCode,
        };
    }
}

impl SseDecode for crate::models::HealthCheckStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::models::HealthCheckStatus::Operational,
            1 => crate::models::HealthCheckStatus::Maintenance,
            2 => crate::models::HealthCheckStatus::ServiceDisruption,
            _ => unreachable!("Invalid variant for HealthCheckStatus: {}", inner),
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::input_parser::InputType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_address =
                    <crate::input_parser::BitcoinAddressData>::sse_decode(deserializer);
                return crate::input_parser::InputType::BitcoinAddress {
                    address: var_address,
                };
            }
            1 => {
                let mut var_invoice = <crate::invoice::LNInvoice>::sse_decode(deserializer);
                return crate::input_parser::InputType::Bolt11 {
                    invoice: var_invoice,
                };
            }
            2 => {
                let mut var_nodeId = <String>::sse_decode(deserializer);
                return crate::input_parser::InputType::NodeId {
                    node_id: var_nodeId,
                };
            }
            3 => {
                let mut var_url = <String>::sse_decode(deserializer);
                return crate::input_parser::InputType::Url { url: var_url };
            }
            4 => {
                let mut var_data =
                    <crate::input_parser::LnUrlPayRequestData>::sse_decode(deserializer);
                return crate::input_parser::InputType::LnUrlPay { data: var_data };
            }
            5 => {
                let mut var_data =
                    <crate::input_parser::LnUrlWithdrawRequestData>::sse_decode(deserializer);
                return crate::input_parser::InputType::LnUrlWithdraw { data: var_data };
            }
            6 => {
                let mut var_data =
                    <crate::input_parser::LnUrlAuthRequestData>::sse_decode(deserializer);
                return crate::input_parser::InputType::LnUrlAuth { data: var_data };
            }
            7 => {
                let mut var_data = <crate::input_parser::LnUrlErrorData>::sse_decode(deserializer);
                return crate::input_parser::InputType::LnUrlError { data: var_data };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::breez_services::InvoicePaidDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_paymentHash = <String>::sse_decode(deserializer);
        let mut var_bolt11 = <String>::sse_decode(deserializer);
        let mut var_payment = <Option<crate::models::Payment>>::sse_decode(deserializer);
        return crate::breez_services::InvoicePaidDetails {
            payment_hash: var_paymentHash,
            bolt11: var_bolt11,
            payment: var_payment,
        };
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::fiat::FiatCurrency> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::fiat::FiatCurrency>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::fiat::LocaleOverrides> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::fiat::LocaleOverrides>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::fiat::LocalizedName> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::fiat::LocalizedName>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::lsp::LspInformation> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::lsp::LspInformation>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::MetadataFilter> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::MetadataFilter>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::OpeningFeeParams> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::OpeningFeeParams>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::Payment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::Payment>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::PaymentTypeFilter> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::PaymentTypeFilter>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::models::ListPaymentsRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_filters =
            <Option<Vec<crate::models::PaymentTypeFilter>>>::sse_decode(deserializer);
        let mut var_metadataFilters =
            <Option<Vec<crate::models::MetadataFilter>>>::sse_decode(deserializer);
        let mut var_fromTimestamp = <Option<i64>>::sse_decode(deserializer);
        let mut var_toTimestamp = <Option<i64>>::sse_decode(deserializer);
        let mut var_includeFailures = <Option<bool>>::sse_decode(deserializer);
        let mut var_offset = <Option<u32>>::sse_decode(deserializer);
        let mut var_limit = <Option<u32>>::sse_decode(deserializer);
        return crate::models::ListPaymentsRequest {
            filters: var_filters,
            metadata_filters: var_metadataFilters,
            from_timestamp: var_fromTimestamp,
            to_timestamp: var_toTimestamp,
            include_failures: var_includeFailures,
            offset: var_offset,
            limit: var_limit,
        };
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::fiat::Rate> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::fiat::Rate>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::ReverseSwapInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::ReverseSwapInfo>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::invoice::RouteHint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::invoice::RouteHint>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::invoice::RouteHintHop> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::invoice::RouteHintHop>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::SwapInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::SwapInfo>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::TlvEntry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::TlvEntry>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::models::UnspentTransactionOutput> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::models::UnspentTransactionOutput>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for crate::invoice::LNInvoice {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_bolt11 = <String>::sse_decode(deserializer);
        let mut var_network = <crate::models::Network>::sse_decode(deserializer);
        let mut var_payeePubkey = <String>::sse_decode(deserializer);
        let mut var_paymentHash = <String>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        let mut var_descriptionHash = <Option<String>>::sse_decode(deserializer);
        let mut var_amountMsat = <Option<u64>>::sse_decode(deserializer);
        let mut var_timestamp = <u64>::sse_decode(deserializer);
        let mut var_expiry = <u64>::sse_decode(deserializer);
        let mut var_routingHints = <Vec<crate::invoice::RouteHint>>::sse_decode(deserializer);
        let mut var_paymentSecret = <Vec<u8>>::sse_decode(deserializer);
        let mut var_minFinalCltvExpiryDelta = <u64>::sse_decode(deserializer);
        return crate::invoice::LNInvoice {
            bolt11: var_bolt11,
            network: var_network,
            payee_pubkey: var_payeePubkey,
            payment_hash: var_paymentHash,
            description: var_description,
            description_hash: var_descriptionHash,
            amount_msat: var_amountMsat,
            timestamp: var_timestamp,
            expiry: var_expiry,
            routing_hints: var_routingHints,
            payment_secret: var_paymentSecret,
            min_final_cltv_expiry_delta: var_minFinalCltvExpiryDelta,
        };
    }
}

impl SseDecode for crate::models::LnPaymentDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_paymentHash = <String>::sse_decode(deserializer);
        let mut var_label = <String>::sse_decode(deserializer);
        let mut var_destinationPubkey = <String>::sse_decode(deserializer);
        let mut var_paymentPreimage = <String>::sse_decode(deserializer);
        let mut var_keysend = <bool>::sse_decode(deserializer);
        let mut var_bolt11 = <String>::sse_decode(deserializer);
        let mut var_openChannelBolt11 = <Option<String>>::sse_decode(deserializer);
        let mut var_lnurlSuccessAction =
            <Option<crate::lnurl::pay::model::SuccessActionProcessed>>::sse_decode(deserializer);
        let mut var_lnurlPayDomain = <Option<String>>::sse_decode(deserializer);
        let mut var_lnurlPayComment = <Option<String>>::sse_decode(deserializer);
        let mut var_lnAddress = <Option<String>>::sse_decode(deserializer);
        let mut var_lnurlMetadata = <Option<String>>::sse_decode(deserializer);
        let mut var_lnurlWithdrawEndpoint = <Option<String>>::sse_decode(deserializer);
        let mut var_swapInfo = <Option<crate::models::SwapInfo>>::sse_decode(deserializer);
        let mut var_reverseSwapInfo =
            <Option<crate::models::ReverseSwapInfo>>::sse_decode(deserializer);
        let mut var_pendingExpirationBlock = <Option<u32>>::sse_decode(deserializer);
        return crate::models::LnPaymentDetails {
            payment_hash: var_paymentHash,
            label: var_label,
            destination_pubkey: var_destinationPubkey,
            payment_preimage: var_paymentPreimage,
            keysend: var_keysend,
            bolt11: var_bolt11,
            open_channel_bolt11: var_openChannelBolt11,
            lnurl_success_action: var_lnurlSuccessAction,
            lnurl_pay_domain: var_lnurlPayDomain,
            lnurl_pay_comment: var_lnurlPayComment,
            ln_address: var_lnAddress,
            lnurl_metadata: var_lnurlMetadata,
            lnurl_withdraw_endpoint: var_lnurlWithdrawEndpoint,
            swap_info: var_swapInfo,
            reverse_swap_info: var_reverseSwapInfo,
            pending_expiration_block: var_pendingExpirationBlock,
        };
    }
}

impl SseDecode for crate::input_parser::LnUrlAuthRequestData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_k1 = <String>::sse_decode(deserializer);
        let mut var_action = <Option<String>>::sse_decode(deserializer);
        let mut var_domain = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        return crate::input_parser::LnUrlAuthRequestData {
            k1: var_k1,
            action: var_action,
            domain: var_domain,
            url: var_url,
        };
    }
}

impl SseDecode for crate::models::LnUrlCallbackStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::models::LnUrlCallbackStatus::Ok;
            }
            1 => {
                let mut var_data = <crate::input_parser::LnUrlErrorData>::sse_decode(deserializer);
                return crate::models::LnUrlCallbackStatus::ErrorStatus { data: var_data };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::input_parser::LnUrlErrorData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_reason = <String>::sse_decode(deserializer);
        return crate::input_parser::LnUrlErrorData { reason: var_reason };
    }
}

impl SseDecode for crate::lnurl::pay::model::LnUrlPayErrorData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_paymentHash = <String>::sse_decode(deserializer);
        let mut var_reason = <String>::sse_decode(deserializer);
        return crate::lnurl::pay::model::LnUrlPayErrorData {
            payment_hash: var_paymentHash,
            reason: var_reason,
        };
    }
}

impl SseDecode for crate::models::LnUrlPayRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_data = <crate::input_parser::LnUrlPayRequestData>::sse_decode(deserializer);
        let mut var_amountMsat = <u64>::sse_decode(deserializer);
        let mut var_comment = <Option<String>>::sse_decode(deserializer);
        let mut var_paymentLabel = <Option<String>>::sse_decode(deserializer);
        return crate::models::LnUrlPayRequest {
            data: var_data,
            amount_msat: var_amountMsat,
            comment: var_comment,
            payment_label: var_paymentLabel,
        };
    }
}

impl SseDecode for crate::input_parser::LnUrlPayRequestData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_callback = <String>::sse_decode(deserializer);
        let mut var_minSendable = <u64>::sse_decode(deserializer);
        let mut var_maxSendable = <u64>::sse_decode(deserializer);
        let mut var_metadataStr = <String>::sse_decode(deserializer);
        let mut var_commentAllowed = <u16>::sse_decode(deserializer);
        let mut var_domain = <String>::sse_decode(deserializer);
        let mut var_allowsNostr = <bool>::sse_decode(deserializer);
        let mut var_nostrPubkey = <Option<String>>::sse_decode(deserializer);
        let mut var_lnAddress = <Option<String>>::sse_decode(deserializer);
        return crate::input_parser::LnUrlPayRequestData {
            callback: var_callback,
            min_sendable: var_minSendable,
            max_sendable: var_maxSendable,
            metadata_str: var_metadataStr,
            comment_allowed: var_commentAllowed,
            domain: var_domain,
            allows_nostr: var_allowsNostr,
            nostr_pubkey: var_nostrPubkey,
            ln_address: var_lnAddress,
        };
    }
}

impl SseDecode for crate::lnurl::pay::model::LnUrlPayResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_data =
                    <crate::lnurl::pay::model::LnUrlPaySuccessData>::sse_decode(deserializer);
                return crate::lnurl::pay::model::LnUrlPayResult::EndpointSuccess {
                    data: var_data,
                };
            }
            1 => {
                let mut var_data = <crate::input_parser::LnUrlErrorData>::sse_decode(deserializer);
                return crate::lnurl::pay::model::LnUrlPayResult::EndpointError { data: var_data };
            }
            2 => {
                let mut var_data =
                    <crate::lnurl::pay::model::LnUrlPayErrorData>::sse_decode(deserializer);
                return crate::lnurl::pay::model::LnUrlPayResult::PayError { data: var_data };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::lnurl::pay::model::LnUrlPaySuccessData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_payment = <crate::models::Payment>::sse_decode(deserializer);
        let mut var_successAction =
            <Option<crate::lnurl::pay::model::SuccessActionProcessed>>::sse_decode(deserializer);
        return crate::lnurl::pay::model::LnUrlPaySuccessData {
            payment: var_payment,
            success_action: var_successAction,
        };
    }
}

impl SseDecode for crate::models::LnUrlWithdrawRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_data =
            <crate::input_parser::LnUrlWithdrawRequestData>::sse_decode(deserializer);
        let mut var_amountMsat = <u64>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        return crate::models::LnUrlWithdrawRequest {
            data: var_data,
            amount_msat: var_amountMsat,
            description: var_description,
        };
    }
}

impl SseDecode for crate::input_parser::LnUrlWithdrawRequestData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_callback = <String>::sse_decode(deserializer);
        let mut var_k1 = <String>::sse_decode(deserializer);
        let mut var_defaultDescription = <String>::sse_decode(deserializer);
        let mut var_minWithdrawable = <u64>::sse_decode(deserializer);
        let mut var_maxWithdrawable = <u64>::sse_decode(deserializer);
        return crate::input_parser::LnUrlWithdrawRequestData {
            callback: var_callback,
            k1: var_k1,
            default_description: var_defaultDescription,
            min_withdrawable: var_minWithdrawable,
            max_withdrawable: var_maxWithdrawable,
        };
    }
}

impl SseDecode for crate::models::LnUrlWithdrawResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_data =
                    <crate::models::LnUrlWithdrawSuccessData>::sse_decode(deserializer);
                return crate::models::LnUrlWithdrawResult::Ok { data: var_data };
            }
            1 => {
                let mut var_data = <crate::input_parser::LnUrlErrorData>::sse_decode(deserializer);
                return crate::models::LnUrlWithdrawResult::ErrorStatus { data: var_data };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::LnUrlWithdrawSuccessData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_invoice = <crate::invoice::LNInvoice>::sse_decode(deserializer);
        return crate::models::LnUrlWithdrawSuccessData {
            invoice: var_invoice,
        };
    }
}

impl SseDecode for crate::fiat::LocaleOverrides {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_locale = <String>::sse_decode(deserializer);
        let mut var_spacing = <Option<u32>>::sse_decode(deserializer);
        let mut var_symbol = <crate::fiat::Symbol>::sse_decode(deserializer);
        return crate::fiat::LocaleOverrides {
            locale: var_locale,
            spacing: var_spacing,
            symbol: var_symbol,
        };
    }
}

impl SseDecode for crate::fiat::LocalizedName {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_locale = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        return crate::fiat::LocalizedName {
            locale: var_locale,
            name: var_name,
        };
    }
}

impl SseDecode for crate::models::LogEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_line = <String>::sse_decode(deserializer);
        let mut var_level = <String>::sse_decode(deserializer);
        return crate::models::LogEntry {
            line: var_line,
            level: var_level,
        };
    }
}

impl SseDecode for crate::lsp::LspInformation {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_name = <String>::sse_decode(deserializer);
        let mut var_widgetUrl = <String>::sse_decode(deserializer);
        let mut var_pubkey = <String>::sse_decode(deserializer);
        let mut var_host = <String>::sse_decode(deserializer);
        let mut var_baseFeeMsat = <i64>::sse_decode(deserializer);
        let mut var_feeRate = <f64>::sse_decode(deserializer);
        let mut var_timeLockDelta = <u32>::sse_decode(deserializer);
        let mut var_minHtlcMsat = <i64>::sse_decode(deserializer);
        let mut var_lspPubkey = <Vec<u8>>::sse_decode(deserializer);
        let mut var_openingFeeParamsList =
            <crate::models::OpeningFeeParamsMenu>::sse_decode(deserializer);
        return crate::lsp::LspInformation {
            id: var_id,
            name: var_name,
            widget_url: var_widgetUrl,
            pubkey: var_pubkey,
            host: var_host,
            base_fee_msat: var_baseFeeMsat,
            fee_rate: var_feeRate,
            time_lock_delta: var_timeLockDelta,
            min_htlc_msat: var_minHtlcMsat,
            lsp_pubkey: var_lspPubkey,
            opening_fee_params_list: var_openingFeeParamsList,
        };
    }
}

impl SseDecode for crate::models::MaxReverseSwapAmountResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_totalSat = <u64>::sse_decode(deserializer);
        return crate::models::MaxReverseSwapAmountResponse {
            total_sat: var_totalSat,
        };
    }
}

impl SseDecode for crate::lnurl::pay::model::MessageSuccessActionData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message = <String>::sse_decode(deserializer);
        return crate::lnurl::pay::model::MessageSuccessActionData {
            message: var_message,
        };
    }
}

impl SseDecode for crate::models::MetadataFilter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_jsonPath = <String>::sse_decode(deserializer);
        let mut var_jsonValue = <String>::sse_decode(deserializer);
        return crate::models::MetadataFilter {
            json_path: var_jsonPath,
            json_value: var_jsonValue,
        };
    }
}

impl SseDecode for crate::models::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::models::Network::Bitcoin,
            1 => crate::models::Network::Testnet,
            2 => crate::models::Network::Signet,
            3 => crate::models::Network::Regtest,
            _ => unreachable!("Invalid variant for Network: {}", inner),
        };
    }
}

impl SseDecode for crate::models::NodeConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_config =
                    <crate::models::GreenlightNodeConfig>::sse_decode(deserializer);
                return crate::models::NodeConfig::Greenlight { config: var_config };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::NodeCredentials {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_credentials =
                    <crate::models::GreenlightCredentials>::sse_decode(deserializer);
                return crate::models::NodeCredentials::Greenlight {
                    credentials: var_credentials,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::NodeState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_blockHeight = <u32>::sse_decode(deserializer);
        let mut var_channelsBalanceMsat = <u64>::sse_decode(deserializer);
        let mut var_onchainBalanceMsat = <u64>::sse_decode(deserializer);
        let mut var_pendingOnchainBalanceMsat = <u64>::sse_decode(deserializer);
        let mut var_utxos =
            <Vec<crate::models::UnspentTransactionOutput>>::sse_decode(deserializer);
        let mut var_maxPayableMsat = <u64>::sse_decode(deserializer);
        let mut var_maxReceivableMsat = <u64>::sse_decode(deserializer);
        let mut var_maxSinglePaymentAmountMsat = <u64>::sse_decode(deserializer);
        let mut var_maxChanReserveMsats = <u64>::sse_decode(deserializer);
        let mut var_connectedPeers = <Vec<String>>::sse_decode(deserializer);
        let mut var_inboundLiquidityMsats = <u64>::sse_decode(deserializer);
        return crate::models::NodeState {
            id: var_id,
            block_height: var_blockHeight,
            channels_balance_msat: var_channelsBalanceMsat,
            onchain_balance_msat: var_onchainBalanceMsat,
            pending_onchain_balance_msat: var_pendingOnchainBalanceMsat,
            utxos: var_utxos,
            max_payable_msat: var_maxPayableMsat,
            max_receivable_msat: var_maxReceivableMsat,
            max_single_payment_amount_msat: var_maxSinglePaymentAmountMsat,
            max_chan_reserve_msats: var_maxChanReserveMsats,
            connected_peers: var_connectedPeers,
            inbound_liquidity_msats: var_inboundLiquidityMsats,
        };
    }
}

impl SseDecode for crate::models::OnchainPaymentLimitsResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_minSat = <u64>::sse_decode(deserializer);
        let mut var_maxSat = <u64>::sse_decode(deserializer);
        return crate::models::OnchainPaymentLimitsResponse {
            min_sat: var_minSat,
            max_sat: var_maxSat,
        };
    }
}

impl SseDecode for crate::models::OpenChannelFeeRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_amountMsat = <Option<u64>>::sse_decode(deserializer);
        let mut var_expiry = <Option<u32>>::sse_decode(deserializer);
        return crate::models::OpenChannelFeeRequest {
            amount_msat: var_amountMsat,
            expiry: var_expiry,
        };
    }
}

impl SseDecode for crate::models::OpenChannelFeeResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_feeMsat = <Option<u64>>::sse_decode(deserializer);
        let mut var_feeParams = <crate::models::OpeningFeeParams>::sse_decode(deserializer);
        return crate::models::OpenChannelFeeResponse {
            fee_msat: var_feeMsat,
            fee_params: var_feeParams,
        };
    }
}

impl SseDecode for crate::models::OpeningFeeParams {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_minMsat = <u64>::sse_decode(deserializer);
        let mut var_proportional = <u32>::sse_decode(deserializer);
        let mut var_validUntil = <String>::sse_decode(deserializer);
        let mut var_maxIdleTime = <u32>::sse_decode(deserializer);
        let mut var_maxClientToSelfDelay = <u32>::sse_decode(deserializer);
        let mut var_promise = <String>::sse_decode(deserializer);
        return crate::models::OpeningFeeParams {
            min_msat: var_minMsat,
            proportional: var_proportional,
            valid_until: var_validUntil,
            max_idle_time: var_maxIdleTime,
            max_client_to_self_delay: var_maxClientToSelfDelay,
            promise: var_promise,
        };
    }
}

impl SseDecode for crate::models::OpeningFeeParamsMenu {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_values = <Vec<crate::models::OpeningFeeParams>>::sse_decode(deserializer);
        return crate::models::OpeningFeeParamsMenu { values: var_values };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::models::GreenlightCredentials> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::models::GreenlightCredentials>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<i64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::invoice::LNInvoice> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::invoice::LNInvoice>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::lsp::LspInformation> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::lsp::LspInformation>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::models::NodeCredentials> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::models::NodeCredentials>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::models::OpeningFeeParams> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::models::OpeningFeeParams>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::models::Payment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::models::Payment>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::models::ReverseSwapInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::models::ReverseSwapInfo>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::lnurl::pay::model::SuccessActionProcessed> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <crate::lnurl::pay::model::SuccessActionProcessed>::sse_decode(deserializer),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::models::SwapInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::models::SwapInfo>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::fiat::Symbol> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::fiat::Symbol>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u32>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<String>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::fiat::LocaleOverrides>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<crate::fiat::LocaleOverrides>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::fiat::LocalizedName>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<crate::fiat::LocalizedName>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::models::MetadataFilter>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<crate::models::MetadataFilter>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::models::PaymentTypeFilter>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<crate::models::PaymentTypeFilter>>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<u8>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<crate::models::TlvEntry>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<crate::models::TlvEntry>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::models::PayOnchainRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_recipientAddress = <String>::sse_decode(deserializer);
        let mut var_prepareRes =
            <crate::models::PrepareOnchainPaymentResponse>::sse_decode(deserializer);
        return crate::models::PayOnchainRequest {
            recipient_address: var_recipientAddress,
            prepare_res: var_prepareRes,
        };
    }
}

impl SseDecode for crate::models::PayOnchainResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_reverseSwapInfo = <crate::models::ReverseSwapInfo>::sse_decode(deserializer);
        return crate::models::PayOnchainResponse {
            reverse_swap_info: var_reverseSwapInfo,
        };
    }
}

impl SseDecode for crate::models::Payment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_paymentType = <crate::models::PaymentType>::sse_decode(deserializer);
        let mut var_paymentTime = <i64>::sse_decode(deserializer);
        let mut var_amountMsat = <u64>::sse_decode(deserializer);
        let mut var_feeMsat = <u64>::sse_decode(deserializer);
        let mut var_status = <crate::models::PaymentStatus>::sse_decode(deserializer);
        let mut var_error = <Option<String>>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        let mut var_details = <crate::models::PaymentDetails>::sse_decode(deserializer);
        let mut var_metadata = <Option<String>>::sse_decode(deserializer);
        return crate::models::Payment {
            id: var_id,
            payment_type: var_paymentType,
            payment_time: var_paymentTime,
            amount_msat: var_amountMsat,
            fee_msat: var_feeMsat,
            status: var_status,
            error: var_error,
            description: var_description,
            details: var_details,
            metadata: var_metadata,
        };
    }
}

impl SseDecode for crate::models::PaymentDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_data = <crate::models::LnPaymentDetails>::sse_decode(deserializer);
                return crate::models::PaymentDetails::Ln { data: var_data };
            }
            1 => {
                let mut var_data =
                    <crate::models::ClosedChannelPaymentDetails>::sse_decode(deserializer);
                return crate::models::PaymentDetails::ClosedChannel { data: var_data };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::breez_services::PaymentFailedData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_error = <String>::sse_decode(deserializer);
        let mut var_nodeId = <String>::sse_decode(deserializer);
        let mut var_invoice = <Option<crate::invoice::LNInvoice>>::sse_decode(deserializer);
        let mut var_label = <Option<String>>::sse_decode(deserializer);
        return crate::breez_services::PaymentFailedData {
            error: var_error,
            node_id: var_nodeId,
            invoice: var_invoice,
            label: var_label,
        };
    }
}

impl SseDecode for crate::models::PaymentStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::models::PaymentStatus::Pending,
            1 => crate::models::PaymentStatus::Complete,
            2 => crate::models::PaymentStatus::Failed,
            _ => unreachable!("Invalid variant for PaymentStatus: {}", inner),
        };
    }
}

impl SseDecode for crate::models::PaymentType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::models::PaymentType::Sent,
            1 => crate::models::PaymentType::Received,
            2 => crate::models::PaymentType::ClosedChannel,
            _ => unreachable!("Invalid variant for PaymentType: {}", inner),
        };
    }
}

impl SseDecode for crate::models::PaymentTypeFilter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::models::PaymentTypeFilter::Sent,
            1 => crate::models::PaymentTypeFilter::Received,
            2 => crate::models::PaymentTypeFilter::ClosedChannel,
            _ => unreachable!("Invalid variant for PaymentTypeFilter: {}", inner),
        };
    }
}

impl SseDecode for crate::models::PrepareOnchainPaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_amountSat = <u64>::sse_decode(deserializer);
        let mut var_amountType = <crate::models::SwapAmountType>::sse_decode(deserializer);
        let mut var_claimTxFeerate = <u32>::sse_decode(deserializer);
        return crate::models::PrepareOnchainPaymentRequest {
            amount_sat: var_amountSat,
            amount_type: var_amountType,
            claim_tx_feerate: var_claimTxFeerate,
        };
    }
}

impl SseDecode for crate::models::PrepareOnchainPaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_feesHash = <String>::sse_decode(deserializer);
        let mut var_feesPercentage = <f64>::sse_decode(deserializer);
        let mut var_feesLockup = <u64>::sse_decode(deserializer);
        let mut var_feesClaim = <u64>::sse_decode(deserializer);
        let mut var_senderAmountSat = <u64>::sse_decode(deserializer);
        let mut var_recipientAmountSat = <u64>::sse_decode(deserializer);
        let mut var_totalFees = <u64>::sse_decode(deserializer);
        return crate::models::PrepareOnchainPaymentResponse {
            fees_hash: var_feesHash,
            fees_percentage: var_feesPercentage,
            fees_lockup: var_feesLockup,
            fees_claim: var_feesClaim,
            sender_amount_sat: var_senderAmountSat,
            recipient_amount_sat: var_recipientAmountSat,
            total_fees: var_totalFees,
        };
    }
}

impl SseDecode for crate::models::PrepareRedeemOnchainFundsRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_toAddress = <String>::sse_decode(deserializer);
        let mut var_satPerVbyte = <u32>::sse_decode(deserializer);
        return crate::models::PrepareRedeemOnchainFundsRequest {
            to_address: var_toAddress,
            sat_per_vbyte: var_satPerVbyte,
        };
    }
}

impl SseDecode for crate::models::PrepareRedeemOnchainFundsResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_txWeight = <u64>::sse_decode(deserializer);
        let mut var_txFeeSat = <u64>::sse_decode(deserializer);
        return crate::models::PrepareRedeemOnchainFundsResponse {
            tx_weight: var_txWeight,
            tx_fee_sat: var_txFeeSat,
        };
    }
}

impl SseDecode for crate::models::PrepareRefundRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_swapAddress = <String>::sse_decode(deserializer);
        let mut var_toAddress = <String>::sse_decode(deserializer);
        let mut var_satPerVbyte = <u32>::sse_decode(deserializer);
        return crate::models::PrepareRefundRequest {
            swap_address: var_swapAddress,
            to_address: var_toAddress,
            sat_per_vbyte: var_satPerVbyte,
        };
    }
}

impl SseDecode for crate::models::PrepareRefundResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_refundTxWeight = <u32>::sse_decode(deserializer);
        let mut var_refundTxFeeSat = <u64>::sse_decode(deserializer);
        return crate::models::PrepareRefundResponse {
            refund_tx_weight: var_refundTxWeight,
            refund_tx_fee_sat: var_refundTxFeeSat,
        };
    }
}

impl SseDecode for crate::fiat::Rate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_coin = <String>::sse_decode(deserializer);
        let mut var_value = <f64>::sse_decode(deserializer);
        return crate::fiat::Rate {
            coin: var_coin,
            value: var_value,
        };
    }
}

impl SseDecode for crate::models::ReceiveOnchainRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_openingFeeParams =
            <Option<crate::models::OpeningFeeParams>>::sse_decode(deserializer);
        return crate::models::ReceiveOnchainRequest {
            opening_fee_params: var_openingFeeParams,
        };
    }
}

impl SseDecode for crate::models::ReceivePaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_amountMsat = <u64>::sse_decode(deserializer);
        let mut var_description = <String>::sse_decode(deserializer);
        let mut var_preimage = <Option<Vec<u8>>>::sse_decode(deserializer);
        let mut var_openingFeeParams =
            <Option<crate::models::OpeningFeeParams>>::sse_decode(deserializer);
        let mut var_useDescriptionHash = <Option<bool>>::sse_decode(deserializer);
        let mut var_expiry = <Option<u32>>::sse_decode(deserializer);
        let mut var_cltv = <Option<u32>>::sse_decode(deserializer);
        return crate::models::ReceivePaymentRequest {
            amount_msat: var_amountMsat,
            description: var_description,
            preimage: var_preimage,
            opening_fee_params: var_openingFeeParams,
            use_description_hash: var_useDescriptionHash,
            expiry: var_expiry,
            cltv: var_cltv,
        };
    }
}

impl SseDecode for crate::models::ReceivePaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_lnInvoice = <crate::invoice::LNInvoice>::sse_decode(deserializer);
        let mut var_openingFeeParams =
            <Option<crate::models::OpeningFeeParams>>::sse_decode(deserializer);
        let mut var_openingFeeMsat = <Option<u64>>::sse_decode(deserializer);
        return crate::models::ReceivePaymentResponse {
            ln_invoice: var_lnInvoice,
            opening_fee_params: var_openingFeeParams,
            opening_fee_msat: var_openingFeeMsat,
        };
    }
}

impl SseDecode for crate::chain::RecommendedFees {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_fastestFee = <u64>::sse_decode(deserializer);
        let mut var_halfHourFee = <u64>::sse_decode(deserializer);
        let mut var_hourFee = <u64>::sse_decode(deserializer);
        let mut var_economyFee = <u64>::sse_decode(deserializer);
        let mut var_minimumFee = <u64>::sse_decode(deserializer);
        return crate::chain::RecommendedFees {
            fastest_fee: var_fastestFee,
            half_hour_fee: var_halfHourFee,
            hour_fee: var_hourFee,
            economy_fee: var_economyFee,
            minimum_fee: var_minimumFee,
        };
    }
}

impl SseDecode for crate::models::RedeemOnchainFundsRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_toAddress = <String>::sse_decode(deserializer);
        let mut var_satPerVbyte = <u32>::sse_decode(deserializer);
        return crate::models::RedeemOnchainFundsRequest {
            to_address: var_toAddress,
            sat_per_vbyte: var_satPerVbyte,
        };
    }
}

impl SseDecode for crate::models::RedeemOnchainFundsResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_txid = <Vec<u8>>::sse_decode(deserializer);
        return crate::models::RedeemOnchainFundsResponse { txid: var_txid };
    }
}

impl SseDecode for crate::models::RefundRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_swapAddress = <String>::sse_decode(deserializer);
        let mut var_toAddress = <String>::sse_decode(deserializer);
        let mut var_satPerVbyte = <u32>::sse_decode(deserializer);
        return crate::models::RefundRequest {
            swap_address: var_swapAddress,
            to_address: var_toAddress,
            sat_per_vbyte: var_satPerVbyte,
        };
    }
}

impl SseDecode for crate::models::RefundResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_refundTxId = <String>::sse_decode(deserializer);
        return crate::models::RefundResponse {
            refund_tx_id: var_refundTxId,
        };
    }
}

impl SseDecode for crate::models::ReportIssueRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_data =
                    <crate::models::ReportPaymentFailureDetails>::sse_decode(deserializer);
                return crate::models::ReportIssueRequest::PaymentFailure { data: var_data };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::ReportPaymentFailureDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_paymentHash = <String>::sse_decode(deserializer);
        let mut var_comment = <Option<String>>::sse_decode(deserializer);
        return crate::models::ReportPaymentFailureDetails {
            payment_hash: var_paymentHash,
            comment: var_comment,
        };
    }
}

impl SseDecode for crate::models::ReverseSwapFeesRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_sendAmountSat = <Option<u64>>::sse_decode(deserializer);
        let mut var_claimTxFeerate = <Option<u32>>::sse_decode(deserializer);
        return crate::models::ReverseSwapFeesRequest {
            send_amount_sat: var_sendAmountSat,
            claim_tx_feerate: var_claimTxFeerate,
        };
    }
}

impl SseDecode for crate::models::ReverseSwapInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_claimPubkey = <String>::sse_decode(deserializer);
        let mut var_lockupTxid = <Option<String>>::sse_decode(deserializer);
        let mut var_claimTxid = <Option<String>>::sse_decode(deserializer);
        let mut var_onchainAmountSat = <u64>::sse_decode(deserializer);
        let mut var_status = <crate::models::ReverseSwapStatus>::sse_decode(deserializer);
        return crate::models::ReverseSwapInfo {
            id: var_id,
            claim_pubkey: var_claimPubkey,
            lockup_txid: var_lockupTxid,
            claim_txid: var_claimTxid,
            onchain_amount_sat: var_onchainAmountSat,
            status: var_status,
        };
    }
}

impl SseDecode for crate::models::ReverseSwapPairInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_min = <u64>::sse_decode(deserializer);
        let mut var_max = <u64>::sse_decode(deserializer);
        let mut var_feesHash = <String>::sse_decode(deserializer);
        let mut var_feesPercentage = <f64>::sse_decode(deserializer);
        let mut var_feesLockup = <u64>::sse_decode(deserializer);
        let mut var_feesClaim = <u64>::sse_decode(deserializer);
        let mut var_totalFees = <Option<u64>>::sse_decode(deserializer);
        return crate::models::ReverseSwapPairInfo {
            min: var_min,
            max: var_max,
            fees_hash: var_feesHash,
            fees_percentage: var_feesPercentage,
            fees_lockup: var_feesLockup,
            fees_claim: var_feesClaim,
            total_fees: var_totalFees,
        };
    }
}

impl SseDecode for crate::models::ReverseSwapStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::models::ReverseSwapStatus::Initial,
            1 => crate::models::ReverseSwapStatus::InProgress,
            2 => crate::models::ReverseSwapStatus::Cancelled,
            3 => crate::models::ReverseSwapStatus::CompletedSeen,
            4 => crate::models::ReverseSwapStatus::CompletedConfirmed,
            _ => unreachable!("Invalid variant for ReverseSwapStatus: {}", inner),
        };
    }
}

impl SseDecode for crate::invoice::RouteHint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_hops = <Vec<crate::invoice::RouteHintHop>>::sse_decode(deserializer);
        return crate::invoice::RouteHint { hops: var_hops };
    }
}

impl SseDecode for crate::invoice::RouteHintHop {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_srcNodeId = <String>::sse_decode(deserializer);
        let mut var_shortChannelId = <u64>::sse_decode(deserializer);
        let mut var_feesBaseMsat = <u32>::sse_decode(deserializer);
        let mut var_feesProportionalMillionths = <u32>::sse_decode(deserializer);
        let mut var_cltvExpiryDelta = <u64>::sse_decode(deserializer);
        let mut var_htlcMinimumMsat = <Option<u64>>::sse_decode(deserializer);
        let mut var_htlcMaximumMsat = <Option<u64>>::sse_decode(deserializer);
        return crate::invoice::RouteHintHop {
            src_node_id: var_srcNodeId,
            short_channel_id: var_shortChannelId,
            fees_base_msat: var_feesBaseMsat,
            fees_proportional_millionths: var_feesProportionalMillionths,
            cltv_expiry_delta: var_cltvExpiryDelta,
            htlc_minimum_msat: var_htlcMinimumMsat,
            htlc_maximum_msat: var_htlcMaximumMsat,
        };
    }
}

impl SseDecode for crate::models::SendOnchainRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_amountSat = <u64>::sse_decode(deserializer);
        let mut var_onchainRecipientAddress = <String>::sse_decode(deserializer);
        let mut var_pairHash = <String>::sse_decode(deserializer);
        let mut var_satPerVbyte = <u32>::sse_decode(deserializer);
        return crate::models::SendOnchainRequest {
            amount_sat: var_amountSat,
            onchain_recipient_address: var_onchainRecipientAddress,
            pair_hash: var_pairHash,
            sat_per_vbyte: var_satPerVbyte,
        };
    }
}

impl SseDecode for crate::models::SendOnchainResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_reverseSwapInfo = <crate::models::ReverseSwapInfo>::sse_decode(deserializer);
        return crate::models::SendOnchainResponse {
            reverse_swap_info: var_reverseSwapInfo,
        };
    }
}

impl SseDecode for crate::models::SendPaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_bolt11 = <String>::sse_decode(deserializer);
        let mut var_amountMsat = <Option<u64>>::sse_decode(deserializer);
        let mut var_label = <Option<String>>::sse_decode(deserializer);
        return crate::models::SendPaymentRequest {
            bolt11: var_bolt11,
            amount_msat: var_amountMsat,
            label: var_label,
        };
    }
}

impl SseDecode for crate::models::SendPaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_payment = <crate::models::Payment>::sse_decode(deserializer);
        return crate::models::SendPaymentResponse {
            payment: var_payment,
        };
    }
}

impl SseDecode for crate::models::SendSpontaneousPaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_nodeId = <String>::sse_decode(deserializer);
        let mut var_amountMsat = <u64>::sse_decode(deserializer);
        let mut var_extraTlvs = <Option<Vec<crate::models::TlvEntry>>>::sse_decode(deserializer);
        let mut var_label = <Option<String>>::sse_decode(deserializer);
        return crate::models::SendSpontaneousPaymentRequest {
            node_id: var_nodeId,
            amount_msat: var_amountMsat,
            extra_tlvs: var_extraTlvs,
            label: var_label,
        };
    }
}

impl SseDecode for crate::models::ServiceHealthCheckResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_status = <crate::models::HealthCheckStatus>::sse_decode(deserializer);
        return crate::models::ServiceHealthCheckResponse { status: var_status };
    }
}

impl SseDecode for crate::breez_services::SignMessageRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message = <String>::sse_decode(deserializer);
        return crate::breez_services::SignMessageRequest {
            message: var_message,
        };
    }
}

impl SseDecode for crate::breez_services::SignMessageResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_signature = <String>::sse_decode(deserializer);
        return crate::breez_services::SignMessageResponse {
            signature: var_signature,
        };
    }
}

impl SseDecode for crate::models::StaticBackupRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_workingDir = <String>::sse_decode(deserializer);
        return crate::models::StaticBackupRequest {
            working_dir: var_workingDir,
        };
    }
}

impl SseDecode for crate::models::StaticBackupResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_backup = <Option<Vec<String>>>::sse_decode(deserializer);
        return crate::models::StaticBackupResponse { backup: var_backup };
    }
}

impl SseDecode for crate::lnurl::pay::model::SuccessActionProcessed {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_result =
                    <crate::lnurl::pay::model::AesSuccessActionDataResult>::sse_decode(
                        deserializer,
                    );
                return crate::lnurl::pay::model::SuccessActionProcessed::Aes {
                    result: var_result,
                };
            }
            1 => {
                let mut var_data =
                    <crate::lnurl::pay::model::MessageSuccessActionData>::sse_decode(deserializer);
                return crate::lnurl::pay::model::SuccessActionProcessed::Message {
                    data: var_data,
                };
            }
            2 => {
                let mut var_data =
                    <crate::lnurl::pay::model::UrlSuccessActionData>::sse_decode(deserializer);
                return crate::lnurl::pay::model::SuccessActionProcessed::Url { data: var_data };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::models::SwapAmountType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::models::SwapAmountType::Send,
            1 => crate::models::SwapAmountType::Receive,
            _ => unreachable!("Invalid variant for SwapAmountType: {}", inner),
        };
    }
}

impl SseDecode for crate::models::SwapInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_bitcoinAddress = <String>::sse_decode(deserializer);
        let mut var_createdAt = <i64>::sse_decode(deserializer);
        let mut var_lockHeight = <i64>::sse_decode(deserializer);
        let mut var_paymentHash = <Vec<u8>>::sse_decode(deserializer);
        let mut var_preimage = <Vec<u8>>::sse_decode(deserializer);
        let mut var_privateKey = <Vec<u8>>::sse_decode(deserializer);
        let mut var_publicKey = <Vec<u8>>::sse_decode(deserializer);
        let mut var_swapperPublicKey = <Vec<u8>>::sse_decode(deserializer);
        let mut var_script = <Vec<u8>>::sse_decode(deserializer);
        let mut var_bolt11 = <Option<String>>::sse_decode(deserializer);
        let mut var_paidMsat = <u64>::sse_decode(deserializer);
        let mut var_totalIncomingTxs = <u64>::sse_decode(deserializer);
        let mut var_confirmedSats = <u64>::sse_decode(deserializer);
        let mut var_unconfirmedSats = <u64>::sse_decode(deserializer);
        let mut var_status = <crate::models::SwapStatus>::sse_decode(deserializer);
        let mut var_refundTxIds = <Vec<String>>::sse_decode(deserializer);
        let mut var_unconfirmedTxIds = <Vec<String>>::sse_decode(deserializer);
        let mut var_confirmedTxIds = <Vec<String>>::sse_decode(deserializer);
        let mut var_minAllowedDeposit = <i64>::sse_decode(deserializer);
        let mut var_maxAllowedDeposit = <i64>::sse_decode(deserializer);
        let mut var_maxSwapperPayable = <i64>::sse_decode(deserializer);
        let mut var_lastRedeemError = <Option<String>>::sse_decode(deserializer);
        let mut var_channelOpeningFees =
            <Option<crate::models::OpeningFeeParams>>::sse_decode(deserializer);
        let mut var_confirmedAt = <Option<u32>>::sse_decode(deserializer);
        return crate::models::SwapInfo {
            bitcoin_address: var_bitcoinAddress,
            created_at: var_createdAt,
            lock_height: var_lockHeight,
            payment_hash: var_paymentHash,
            preimage: var_preimage,
            private_key: var_privateKey,
            public_key: var_publicKey,
            swapper_public_key: var_swapperPublicKey,
            script: var_script,
            bolt11: var_bolt11,
            paid_msat: var_paidMsat,
            total_incoming_txs: var_totalIncomingTxs,
            confirmed_sats: var_confirmedSats,
            unconfirmed_sats: var_unconfirmedSats,
            status: var_status,
            refund_tx_ids: var_refundTxIds,
            unconfirmed_tx_ids: var_unconfirmedTxIds,
            confirmed_tx_ids: var_confirmedTxIds,
            min_allowed_deposit: var_minAllowedDeposit,
            max_allowed_deposit: var_maxAllowedDeposit,
            max_swapper_payable: var_maxSwapperPayable,
            last_redeem_error: var_lastRedeemError,
            channel_opening_fees: var_channelOpeningFees,
            confirmed_at: var_confirmedAt,
        };
    }
}

impl SseDecode for crate::models::SwapStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::models::SwapStatus::Initial,
            1 => crate::models::SwapStatus::WaitingConfirmation,
            2 => crate::models::SwapStatus::Redeemable,
            3 => crate::models::SwapStatus::Redeemed,
            4 => crate::models::SwapStatus::Refundable,
            5 => crate::models::SwapStatus::Completed,
            _ => unreachable!("Invalid variant for SwapStatus: {}", inner),
        };
    }
}

impl SseDecode for crate::fiat::Symbol {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_grapheme = <Option<String>>::sse_decode(deserializer);
        let mut var_template = <Option<String>>::sse_decode(deserializer);
        let mut var_rtl = <Option<bool>>::sse_decode(deserializer);
        let mut var_position = <Option<u32>>::sse_decode(deserializer);
        return crate::fiat::Symbol {
            grapheme: var_grapheme,
            template: var_template,
            rtl: var_rtl,
            position: var_position,
        };
    }
}

impl SseDecode for crate::models::TlvEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_fieldNumber = <u64>::sse_decode(deserializer);
        let mut var_value = <Vec<u8>>::sse_decode(deserializer);
        return crate::models::TlvEntry {
            field_number: var_fieldNumber,
            value: var_value,
        };
    }
}

impl SseDecode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for crate::models::UnspentTransactionOutput {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_txid = <Vec<u8>>::sse_decode(deserializer);
        let mut var_outnum = <u32>::sse_decode(deserializer);
        let mut var_amountMillisatoshi = <u64>::sse_decode(deserializer);
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_reserved = <bool>::sse_decode(deserializer);
        return crate::models::UnspentTransactionOutput {
            txid: var_txid,
            outnum: var_outnum,
            amount_millisatoshi: var_amountMillisatoshi,
            address: var_address,
            reserved: var_reserved,
        };
    }
}

impl SseDecode for crate::lnurl::pay::model::UrlSuccessActionData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_description = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        return crate::lnurl::pay::model::UrlSuccessActionData {
            description: var_description,
            url: var_url,
        };
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::lnurl::pay::model::AesSuccessActionDataDecrypted {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.description.into_into_dart().into_dart(),
            self.plaintext.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::lnurl::pay::model::AesSuccessActionDataDecrypted
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::lnurl::pay::model::AesSuccessActionDataDecrypted>
    for crate::lnurl::pay::model::AesSuccessActionDataDecrypted
{
    fn into_into_dart(self) -> crate::lnurl::pay::model::AesSuccessActionDataDecrypted {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::lnurl::pay::model::AesSuccessActionDataResult {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::lnurl::pay::model::AesSuccessActionDataResult::Decrypted { data } => {
                [0.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::lnurl::pay::model::AesSuccessActionDataResult::ErrorStatus { reason } => {
                [1.into_dart(), reason.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::lnurl::pay::model::AesSuccessActionDataResult
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::lnurl::pay::model::AesSuccessActionDataResult>
    for crate::lnurl::pay::model::AesSuccessActionDataResult
{
    fn into_into_dart(self) -> crate::lnurl::pay::model::AesSuccessActionDataResult {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::breez_services::BackupFailedData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.error.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::breez_services::BackupFailedData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::breez_services::BackupFailedData>
    for crate::breez_services::BackupFailedData
{
    fn into_into_dart(self) -> crate::breez_services::BackupFailedData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::BackupStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.backed_up.into_into_dart().into_dart(),
            self.last_backup_time.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::BackupStatus {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::BackupStatus>
    for crate::models::BackupStatus
{
    fn into_into_dart(self) -> crate::models::BackupStatus {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::binding::BindingEventListener {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        Vec::<u8>::new().into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::binding::BindingEventListener
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::binding::BindingEventListener>
    for crate::binding::BindingEventListener
{
    fn into_into_dart(self) -> crate::binding::BindingEventListener {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::input_parser::BitcoinAddressData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.address.into_into_dart().into_dart(),
            self.network.into_into_dart().into_dart(),
            self.amount_sat.into_into_dart().into_dart(),
            self.label.into_into_dart().into_dart(),
            self.message.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::input_parser::BitcoinAddressData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::input_parser::BitcoinAddressData>
    for crate::input_parser::BitcoinAddressData
{
    fn into_into_dart(self) -> crate::input_parser::BitcoinAddressData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::breez_services::BreezEvent {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::breez_services::BreezEvent::NewBlock { block } => {
                [0.into_dart(), block.into_into_dart().into_dart()].into_dart()
            }
            crate::breez_services::BreezEvent::InvoicePaid { details } => {
                [1.into_dart(), details.into_into_dart().into_dart()].into_dart()
            }
            crate::breez_services::BreezEvent::Synced => [2.into_dart()].into_dart(),
            crate::breez_services::BreezEvent::PaymentSucceed { details } => {
                [3.into_dart(), details.into_into_dart().into_dart()].into_dart()
            }
            crate::breez_services::BreezEvent::PaymentFailed { details } => {
                [4.into_dart(), details.into_into_dart().into_dart()].into_dart()
            }
            crate::breez_services::BreezEvent::BackupStarted => [5.into_dart()].into_dart(),
            crate::breez_services::BreezEvent::BackupSucceeded => [6.into_dart()].into_dart(),
            crate::breez_services::BreezEvent::BackupFailed { details } => {
                [7.into_dart(), details.into_into_dart().into_dart()].into_dart()
            }
            crate::breez_services::BreezEvent::SwapUpdated { details } => {
                [8.into_dart(), details.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::breez_services::BreezEvent
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::breez_services::BreezEvent>
    for crate::breez_services::BreezEvent
{
    fn into_into_dart(self) -> crate::breez_services::BreezEvent {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::BuyBitcoinProvider {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Moonpay => 0.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::BuyBitcoinProvider
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::BuyBitcoinProvider>
    for crate::models::BuyBitcoinProvider
{
    fn into_into_dart(self) -> crate::models::BuyBitcoinProvider {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::BuyBitcoinRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.provider.into_into_dart().into_dart(),
            self.opening_fee_params.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::BuyBitcoinRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::BuyBitcoinRequest>
    for crate::models::BuyBitcoinRequest
{
    fn into_into_dart(self) -> crate::models::BuyBitcoinRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::BuyBitcoinResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.url.into_into_dart().into_dart(),
            self.opening_fee_params.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::BuyBitcoinResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::BuyBitcoinResponse>
    for crate::models::BuyBitcoinResponse
{
    fn into_into_dart(self) -> crate::models::BuyBitcoinResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::ChannelState {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::PendingOpen => 0.into_dart(),
            Self::Opened => 1.into_dart(),
            Self::PendingClose => 2.into_dart(),
            Self::Closed => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::ChannelState {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::ChannelState>
    for crate::models::ChannelState
{
    fn into_into_dart(self) -> crate::models::ChannelState {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::breez_services::CheckMessageRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.message.into_into_dart().into_dart(),
            self.pubkey.into_into_dart().into_dart(),
            self.signature.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::breez_services::CheckMessageRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::breez_services::CheckMessageRequest>
    for crate::breez_services::CheckMessageRequest
{
    fn into_into_dart(self) -> crate::breez_services::CheckMessageRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::breez_services::CheckMessageResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.is_valid.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::breez_services::CheckMessageResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::breez_services::CheckMessageResponse>
    for crate::breez_services::CheckMessageResponse
{
    fn into_into_dart(self) -> crate::breez_services::CheckMessageResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::ClosedChannelPaymentDetails {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.state.into_into_dart().into_dart(),
            self.funding_txid.into_into_dart().into_dart(),
            self.short_channel_id.into_into_dart().into_dart(),
            self.closing_txid.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::ClosedChannelPaymentDetails
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::ClosedChannelPaymentDetails>
    for crate::models::ClosedChannelPaymentDetails
{
    fn into_into_dart(self) -> crate::models::ClosedChannelPaymentDetails {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::Config {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.breezserver.into_into_dart().into_dart(),
            self.chainnotifier_url.into_into_dart().into_dart(),
            self.mempoolspace_url.into_into_dart().into_dart(),
            self.working_dir.into_into_dart().into_dart(),
            self.network.into_into_dart().into_dart(),
            self.payment_timeout_sec.into_into_dart().into_dart(),
            self.default_lsp_id.into_into_dart().into_dart(),
            self.api_key.into_into_dart().into_dart(),
            self.maxfee_percent.into_into_dart().into_dart(),
            self.exemptfee_msat.into_into_dart().into_dart(),
            self.node_config.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::Config {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::Config> for crate::models::Config {
    fn into_into_dart(self) -> crate::models::Config {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::ConfigureNodeRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.close_to_address.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::ConfigureNodeRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::ConfigureNodeRequest>
    for crate::models::ConfigureNodeRequest
{
    fn into_into_dart(self) -> crate::models::ConfigureNodeRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::ConnectRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.config.into_into_dart().into_dart(),
            self.seed.into_into_dart().into_dart(),
            self.restore_only.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::ConnectRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::ConnectRequest>
    for crate::models::ConnectRequest
{
    fn into_into_dart(self) -> crate::models::ConnectRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::fiat::CurrencyInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.name.into_into_dart().into_dart(),
            self.fraction_size.into_into_dart().into_dart(),
            self.spacing.into_into_dart().into_dart(),
            self.symbol.into_into_dart().into_dart(),
            self.uniq_symbol.into_into_dart().into_dart(),
            self.localized_name.into_into_dart().into_dart(),
            self.locale_overrides.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::fiat::CurrencyInfo {}
impl flutter_rust_bridge::IntoIntoDart<crate::fiat::CurrencyInfo> for crate::fiat::CurrencyInfo {
    fn into_into_dart(self) -> crate::fiat::CurrencyInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::EnvironmentType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Production => 0.into_dart(),
            Self::Staging => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::EnvironmentType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::EnvironmentType>
    for crate::models::EnvironmentType
{
    fn into_into_dart(self) -> crate::models::EnvironmentType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::fiat::FiatCurrency {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.info.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::fiat::FiatCurrency {}
impl flutter_rust_bridge::IntoIntoDart<crate::fiat::FiatCurrency> for crate::fiat::FiatCurrency {
    fn into_into_dart(self) -> crate::fiat::FiatCurrency {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::GreenlightCredentials {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.device_key.into_into_dart().into_dart(),
            self.device_cert.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::GreenlightCredentials
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::GreenlightCredentials>
    for crate::models::GreenlightCredentials
{
    fn into_into_dart(self) -> crate::models::GreenlightCredentials {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::GreenlightNodeConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.partner_credentials.into_into_dart().into_dart(),
            self.invite_code.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::GreenlightNodeConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::GreenlightNodeConfig>
    for crate::models::GreenlightNodeConfig
{
    fn into_into_dart(self) -> crate::models::GreenlightNodeConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::HealthCheckStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Operational => 0.into_dart(),
            Self::Maintenance => 1.into_dart(),
            Self::ServiceDisruption => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::HealthCheckStatus
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::HealthCheckStatus>
    for crate::models::HealthCheckStatus
{
    fn into_into_dart(self) -> crate::models::HealthCheckStatus {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::input_parser::InputType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::input_parser::InputType::BitcoinAddress { address } => {
                [0.into_dart(), address.into_into_dart().into_dart()].into_dart()
            }
            crate::input_parser::InputType::Bolt11 { invoice } => {
                [1.into_dart(), invoice.into_into_dart().into_dart()].into_dart()
            }
            crate::input_parser::InputType::NodeId { node_id } => {
                [2.into_dart(), node_id.into_into_dart().into_dart()].into_dart()
            }
            crate::input_parser::InputType::Url { url } => {
                [3.into_dart(), url.into_into_dart().into_dart()].into_dart()
            }
            crate::input_parser::InputType::LnUrlPay { data } => {
                [4.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::input_parser::InputType::LnUrlWithdraw { data } => {
                [5.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::input_parser::InputType::LnUrlAuth { data } => {
                [6.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::input_parser::InputType::LnUrlError { data } => {
                [7.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::input_parser::InputType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::input_parser::InputType>
    for crate::input_parser::InputType
{
    fn into_into_dart(self) -> crate::input_parser::InputType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::breez_services::InvoicePaidDetails {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.payment_hash.into_into_dart().into_dart(),
            self.bolt11.into_into_dart().into_dart(),
            self.payment.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::breez_services::InvoicePaidDetails
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::breez_services::InvoicePaidDetails>
    for crate::breez_services::InvoicePaidDetails
{
    fn into_into_dart(self) -> crate::breez_services::InvoicePaidDetails {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::ListPaymentsRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.filters.into_into_dart().into_dart(),
            self.metadata_filters.into_into_dart().into_dart(),
            self.from_timestamp.into_into_dart().into_dart(),
            self.to_timestamp.into_into_dart().into_dart(),
            self.include_failures.into_into_dart().into_dart(),
            self.offset.into_into_dart().into_dart(),
            self.limit.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::ListPaymentsRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::ListPaymentsRequest>
    for crate::models::ListPaymentsRequest
{
    fn into_into_dart(self) -> crate::models::ListPaymentsRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::invoice::LNInvoice {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.bolt11.into_into_dart().into_dart(),
            self.network.into_into_dart().into_dart(),
            self.payee_pubkey.into_into_dart().into_dart(),
            self.payment_hash.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
            self.description_hash.into_into_dart().into_dart(),
            self.amount_msat.into_into_dart().into_dart(),
            self.timestamp.into_into_dart().into_dart(),
            self.expiry.into_into_dart().into_dart(),
            self.routing_hints.into_into_dart().into_dart(),
            self.payment_secret.into_into_dart().into_dart(),
            self.min_final_cltv_expiry_delta
                .into_into_dart()
                .into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::invoice::LNInvoice {}
impl flutter_rust_bridge::IntoIntoDart<crate::invoice::LNInvoice> for crate::invoice::LNInvoice {
    fn into_into_dart(self) -> crate::invoice::LNInvoice {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::LnPaymentDetails {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.payment_hash.into_into_dart().into_dart(),
            self.label.into_into_dart().into_dart(),
            self.destination_pubkey.into_into_dart().into_dart(),
            self.payment_preimage.into_into_dart().into_dart(),
            self.keysend.into_into_dart().into_dart(),
            self.bolt11.into_into_dart().into_dart(),
            self.open_channel_bolt11.into_into_dart().into_dart(),
            self.lnurl_success_action.into_into_dart().into_dart(),
            self.lnurl_pay_domain.into_into_dart().into_dart(),
            self.lnurl_pay_comment.into_into_dart().into_dart(),
            self.ln_address.into_into_dart().into_dart(),
            self.lnurl_metadata.into_into_dart().into_dart(),
            self.lnurl_withdraw_endpoint.into_into_dart().into_dart(),
            self.swap_info.into_into_dart().into_dart(),
            self.reverse_swap_info.into_into_dart().into_dart(),
            self.pending_expiration_block.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::LnPaymentDetails
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::LnPaymentDetails>
    for crate::models::LnPaymentDetails
{
    fn into_into_dart(self) -> crate::models::LnPaymentDetails {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::input_parser::LnUrlAuthRequestData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.k1.into_into_dart().into_dart(),
            self.action.into_into_dart().into_dart(),
            self.domain.into_into_dart().into_dart(),
            self.url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::input_parser::LnUrlAuthRequestData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::input_parser::LnUrlAuthRequestData>
    for crate::input_parser::LnUrlAuthRequestData
{
    fn into_into_dart(self) -> crate::input_parser::LnUrlAuthRequestData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::LnUrlCallbackStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::models::LnUrlCallbackStatus::Ok => [0.into_dart()].into_dart(),
            crate::models::LnUrlCallbackStatus::ErrorStatus { data } => {
                [1.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::LnUrlCallbackStatus
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::LnUrlCallbackStatus>
    for crate::models::LnUrlCallbackStatus
{
    fn into_into_dart(self) -> crate::models::LnUrlCallbackStatus {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::input_parser::LnUrlErrorData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.reason.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::input_parser::LnUrlErrorData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::input_parser::LnUrlErrorData>
    for crate::input_parser::LnUrlErrorData
{
    fn into_into_dart(self) -> crate::input_parser::LnUrlErrorData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::lnurl::pay::model::LnUrlPayErrorData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.payment_hash.into_into_dart().into_dart(),
            self.reason.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::lnurl::pay::model::LnUrlPayErrorData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::lnurl::pay::model::LnUrlPayErrorData>
    for crate::lnurl::pay::model::LnUrlPayErrorData
{
    fn into_into_dart(self) -> crate::lnurl::pay::model::LnUrlPayErrorData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::LnUrlPayRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.data.into_into_dart().into_dart(),
            self.amount_msat.into_into_dart().into_dart(),
            self.comment.into_into_dart().into_dart(),
            self.payment_label.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::LnUrlPayRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::LnUrlPayRequest>
    for crate::models::LnUrlPayRequest
{
    fn into_into_dart(self) -> crate::models::LnUrlPayRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::input_parser::LnUrlPayRequestData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.callback.into_into_dart().into_dart(),
            self.min_sendable.into_into_dart().into_dart(),
            self.max_sendable.into_into_dart().into_dart(),
            self.metadata_str.into_into_dart().into_dart(),
            self.comment_allowed.into_into_dart().into_dart(),
            self.domain.into_into_dart().into_dart(),
            self.allows_nostr.into_into_dart().into_dart(),
            self.nostr_pubkey.into_into_dart().into_dart(),
            self.ln_address.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::input_parser::LnUrlPayRequestData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::input_parser::LnUrlPayRequestData>
    for crate::input_parser::LnUrlPayRequestData
{
    fn into_into_dart(self) -> crate::input_parser::LnUrlPayRequestData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::lnurl::pay::model::LnUrlPayResult {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::lnurl::pay::model::LnUrlPayResult::EndpointSuccess { data } => {
                [0.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::lnurl::pay::model::LnUrlPayResult::EndpointError { data } => {
                [1.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::lnurl::pay::model::LnUrlPayResult::PayError { data } => {
                [2.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::lnurl::pay::model::LnUrlPayResult
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::lnurl::pay::model::LnUrlPayResult>
    for crate::lnurl::pay::model::LnUrlPayResult
{
    fn into_into_dart(self) -> crate::lnurl::pay::model::LnUrlPayResult {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::lnurl::pay::model::LnUrlPaySuccessData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.payment.into_into_dart().into_dart(),
            self.success_action.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::lnurl::pay::model::LnUrlPaySuccessData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::lnurl::pay::model::LnUrlPaySuccessData>
    for crate::lnurl::pay::model::LnUrlPaySuccessData
{
    fn into_into_dart(self) -> crate::lnurl::pay::model::LnUrlPaySuccessData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::LnUrlWithdrawRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.data.into_into_dart().into_dart(),
            self.amount_msat.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::LnUrlWithdrawRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::LnUrlWithdrawRequest>
    for crate::models::LnUrlWithdrawRequest
{
    fn into_into_dart(self) -> crate::models::LnUrlWithdrawRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::input_parser::LnUrlWithdrawRequestData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.callback.into_into_dart().into_dart(),
            self.k1.into_into_dart().into_dart(),
            self.default_description.into_into_dart().into_dart(),
            self.min_withdrawable.into_into_dart().into_dart(),
            self.max_withdrawable.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::input_parser::LnUrlWithdrawRequestData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::input_parser::LnUrlWithdrawRequestData>
    for crate::input_parser::LnUrlWithdrawRequestData
{
    fn into_into_dart(self) -> crate::input_parser::LnUrlWithdrawRequestData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::LnUrlWithdrawResult {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::models::LnUrlWithdrawResult::Ok { data } => {
                [0.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::models::LnUrlWithdrawResult::ErrorStatus { data } => {
                [1.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::LnUrlWithdrawResult
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::LnUrlWithdrawResult>
    for crate::models::LnUrlWithdrawResult
{
    fn into_into_dart(self) -> crate::models::LnUrlWithdrawResult {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::LnUrlWithdrawSuccessData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.invoice.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::LnUrlWithdrawSuccessData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::LnUrlWithdrawSuccessData>
    for crate::models::LnUrlWithdrawSuccessData
{
    fn into_into_dart(self) -> crate::models::LnUrlWithdrawSuccessData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::fiat::LocaleOverrides {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.locale.into_into_dart().into_dart(),
            self.spacing.into_into_dart().into_dart(),
            self.symbol.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::fiat::LocaleOverrides {}
impl flutter_rust_bridge::IntoIntoDart<crate::fiat::LocaleOverrides>
    for crate::fiat::LocaleOverrides
{
    fn into_into_dart(self) -> crate::fiat::LocaleOverrides {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::fiat::LocalizedName {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.locale.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::fiat::LocalizedName {}
impl flutter_rust_bridge::IntoIntoDart<crate::fiat::LocalizedName> for crate::fiat::LocalizedName {
    fn into_into_dart(self) -> crate::fiat::LocalizedName {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::LogEntry {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.line.into_into_dart().into_dart(),
            self.level.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::LogEntry {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::LogEntry> for crate::models::LogEntry {
    fn into_into_dart(self) -> crate::models::LogEntry {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::lsp::LspInformation {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.widget_url.into_into_dart().into_dart(),
            self.pubkey.into_into_dart().into_dart(),
            self.host.into_into_dart().into_dart(),
            self.base_fee_msat.into_into_dart().into_dart(),
            self.fee_rate.into_into_dart().into_dart(),
            self.time_lock_delta.into_into_dart().into_dart(),
            self.min_htlc_msat.into_into_dart().into_dart(),
            self.lsp_pubkey.into_into_dart().into_dart(),
            self.opening_fee_params_list.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::lsp::LspInformation {}
impl flutter_rust_bridge::IntoIntoDart<crate::lsp::LspInformation> for crate::lsp::LspInformation {
    fn into_into_dart(self) -> crate::lsp::LspInformation {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::MaxReverseSwapAmountResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.total_sat.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::MaxReverseSwapAmountResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::MaxReverseSwapAmountResponse>
    for crate::models::MaxReverseSwapAmountResponse
{
    fn into_into_dart(self) -> crate::models::MaxReverseSwapAmountResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::lnurl::pay::model::MessageSuccessActionData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::lnurl::pay::model::MessageSuccessActionData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::lnurl::pay::model::MessageSuccessActionData>
    for crate::lnurl::pay::model::MessageSuccessActionData
{
    fn into_into_dart(self) -> crate::lnurl::pay::model::MessageSuccessActionData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::MetadataFilter {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.json_path.into_into_dart().into_dart(),
            self.json_value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::MetadataFilter {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::MetadataFilter>
    for crate::models::MetadataFilter
{
    fn into_into_dart(self) -> crate::models::MetadataFilter {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::Network {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Bitcoin => 0.into_dart(),
            Self::Testnet => 1.into_dart(),
            Self::Signet => 2.into_dart(),
            Self::Regtest => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::Network {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::Network> for crate::models::Network {
    fn into_into_dart(self) -> crate::models::Network {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::NodeConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::models::NodeConfig::Greenlight { config } => {
                [0.into_dart(), config.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::NodeConfig {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::NodeConfig> for crate::models::NodeConfig {
    fn into_into_dart(self) -> crate::models::NodeConfig {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::NodeCredentials {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::models::NodeCredentials::Greenlight { credentials } => {
                [0.into_dart(), credentials.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::NodeCredentials
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::NodeCredentials>
    for crate::models::NodeCredentials
{
    fn into_into_dart(self) -> crate::models::NodeCredentials {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::NodeState {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.block_height.into_into_dart().into_dart(),
            self.channels_balance_msat.into_into_dart().into_dart(),
            self.onchain_balance_msat.into_into_dart().into_dart(),
            self.pending_onchain_balance_msat
                .into_into_dart()
                .into_dart(),
            self.utxos.into_into_dart().into_dart(),
            self.max_payable_msat.into_into_dart().into_dart(),
            self.max_receivable_msat.into_into_dart().into_dart(),
            self.max_single_payment_amount_msat
                .into_into_dart()
                .into_dart(),
            self.max_chan_reserve_msats.into_into_dart().into_dart(),
            self.connected_peers.into_into_dart().into_dart(),
            self.inbound_liquidity_msats.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::NodeState {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::NodeState> for crate::models::NodeState {
    fn into_into_dart(self) -> crate::models::NodeState {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::OnchainPaymentLimitsResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.min_sat.into_into_dart().into_dart(),
            self.max_sat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::OnchainPaymentLimitsResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::OnchainPaymentLimitsResponse>
    for crate::models::OnchainPaymentLimitsResponse
{
    fn into_into_dart(self) -> crate::models::OnchainPaymentLimitsResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::OpenChannelFeeRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.amount_msat.into_into_dart().into_dart(),
            self.expiry.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::OpenChannelFeeRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::OpenChannelFeeRequest>
    for crate::models::OpenChannelFeeRequest
{
    fn into_into_dart(self) -> crate::models::OpenChannelFeeRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::OpenChannelFeeResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.fee_msat.into_into_dart().into_dart(),
            self.fee_params.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::OpenChannelFeeResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::OpenChannelFeeResponse>
    for crate::models::OpenChannelFeeResponse
{
    fn into_into_dart(self) -> crate::models::OpenChannelFeeResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::OpeningFeeParams {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.min_msat.into_into_dart().into_dart(),
            self.proportional.into_into_dart().into_dart(),
            self.valid_until.into_into_dart().into_dart(),
            self.max_idle_time.into_into_dart().into_dart(),
            self.max_client_to_self_delay.into_into_dart().into_dart(),
            self.promise.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::OpeningFeeParams
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::OpeningFeeParams>
    for crate::models::OpeningFeeParams
{
    fn into_into_dart(self) -> crate::models::OpeningFeeParams {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::OpeningFeeParamsMenu {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.values.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::OpeningFeeParamsMenu
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::OpeningFeeParamsMenu>
    for crate::models::OpeningFeeParamsMenu
{
    fn into_into_dart(self) -> crate::models::OpeningFeeParamsMenu {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::PayOnchainRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.recipient_address.into_into_dart().into_dart(),
            self.prepare_res.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::PayOnchainRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::PayOnchainRequest>
    for crate::models::PayOnchainRequest
{
    fn into_into_dart(self) -> crate::models::PayOnchainRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::PayOnchainResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.reverse_swap_info.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::PayOnchainResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::PayOnchainResponse>
    for crate::models::PayOnchainResponse
{
    fn into_into_dart(self) -> crate::models::PayOnchainResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::Payment {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.payment_type.into_into_dart().into_dart(),
            self.payment_time.into_into_dart().into_dart(),
            self.amount_msat.into_into_dart().into_dart(),
            self.fee_msat.into_into_dart().into_dart(),
            self.status.into_into_dart().into_dart(),
            self.error.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
            self.details.into_into_dart().into_dart(),
            self.metadata.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::Payment {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::Payment> for crate::models::Payment {
    fn into_into_dart(self) -> crate::models::Payment {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::PaymentDetails {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::models::PaymentDetails::Ln { data } => {
                [0.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::models::PaymentDetails::ClosedChannel { data } => {
                [1.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::PaymentDetails {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::PaymentDetails>
    for crate::models::PaymentDetails
{
    fn into_into_dart(self) -> crate::models::PaymentDetails {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::breez_services::PaymentFailedData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.error.into_into_dart().into_dart(),
            self.node_id.into_into_dart().into_dart(),
            self.invoice.into_into_dart().into_dart(),
            self.label.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::breez_services::PaymentFailedData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::breez_services::PaymentFailedData>
    for crate::breez_services::PaymentFailedData
{
    fn into_into_dart(self) -> crate::breez_services::PaymentFailedData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::PaymentStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Pending => 0.into_dart(),
            Self::Complete => 1.into_dart(),
            Self::Failed => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::PaymentStatus {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::PaymentStatus>
    for crate::models::PaymentStatus
{
    fn into_into_dart(self) -> crate::models::PaymentStatus {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::PaymentType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Sent => 0.into_dart(),
            Self::Received => 1.into_dart(),
            Self::ClosedChannel => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::PaymentType {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::PaymentType> for crate::models::PaymentType {
    fn into_into_dart(self) -> crate::models::PaymentType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::PaymentTypeFilter {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Sent => 0.into_dart(),
            Self::Received => 1.into_dart(),
            Self::ClosedChannel => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::PaymentTypeFilter
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::PaymentTypeFilter>
    for crate::models::PaymentTypeFilter
{
    fn into_into_dart(self) -> crate::models::PaymentTypeFilter {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::PrepareOnchainPaymentRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.amount_sat.into_into_dart().into_dart(),
            self.amount_type.into_into_dart().into_dart(),
            self.claim_tx_feerate.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::PrepareOnchainPaymentRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::PrepareOnchainPaymentRequest>
    for crate::models::PrepareOnchainPaymentRequest
{
    fn into_into_dart(self) -> crate::models::PrepareOnchainPaymentRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::PrepareOnchainPaymentResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.fees_hash.into_into_dart().into_dart(),
            self.fees_percentage.into_into_dart().into_dart(),
            self.fees_lockup.into_into_dart().into_dart(),
            self.fees_claim.into_into_dart().into_dart(),
            self.sender_amount_sat.into_into_dart().into_dart(),
            self.recipient_amount_sat.into_into_dart().into_dart(),
            self.total_fees.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::PrepareOnchainPaymentResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::PrepareOnchainPaymentResponse>
    for crate::models::PrepareOnchainPaymentResponse
{
    fn into_into_dart(self) -> crate::models::PrepareOnchainPaymentResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::PrepareRedeemOnchainFundsRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.to_address.into_into_dart().into_dart(),
            self.sat_per_vbyte.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::PrepareRedeemOnchainFundsRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::PrepareRedeemOnchainFundsRequest>
    for crate::models::PrepareRedeemOnchainFundsRequest
{
    fn into_into_dart(self) -> crate::models::PrepareRedeemOnchainFundsRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::PrepareRedeemOnchainFundsResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tx_weight.into_into_dart().into_dart(),
            self.tx_fee_sat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::PrepareRedeemOnchainFundsResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::PrepareRedeemOnchainFundsResponse>
    for crate::models::PrepareRedeemOnchainFundsResponse
{
    fn into_into_dart(self) -> crate::models::PrepareRedeemOnchainFundsResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::PrepareRefundRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.swap_address.into_into_dart().into_dart(),
            self.to_address.into_into_dart().into_dart(),
            self.sat_per_vbyte.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::PrepareRefundRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::PrepareRefundRequest>
    for crate::models::PrepareRefundRequest
{
    fn into_into_dart(self) -> crate::models::PrepareRefundRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::PrepareRefundResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.refund_tx_weight.into_into_dart().into_dart(),
            self.refund_tx_fee_sat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::PrepareRefundResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::PrepareRefundResponse>
    for crate::models::PrepareRefundResponse
{
    fn into_into_dart(self) -> crate::models::PrepareRefundResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::fiat::Rate {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.coin.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::fiat::Rate {}
impl flutter_rust_bridge::IntoIntoDart<crate::fiat::Rate> for crate::fiat::Rate {
    fn into_into_dart(self) -> crate::fiat::Rate {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::ReceiveOnchainRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.opening_fee_params.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::ReceiveOnchainRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::ReceiveOnchainRequest>
    for crate::models::ReceiveOnchainRequest
{
    fn into_into_dart(self) -> crate::models::ReceiveOnchainRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::ReceivePaymentRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.amount_msat.into_into_dart().into_dart(),
            self.description.into_into_dart().into_dart(),
            self.preimage.into_into_dart().into_dart(),
            self.opening_fee_params.into_into_dart().into_dart(),
            self.use_description_hash.into_into_dart().into_dart(),
            self.expiry.into_into_dart().into_dart(),
            self.cltv.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::ReceivePaymentRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::ReceivePaymentRequest>
    for crate::models::ReceivePaymentRequest
{
    fn into_into_dart(self) -> crate::models::ReceivePaymentRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::ReceivePaymentResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.ln_invoice.into_into_dart().into_dart(),
            self.opening_fee_params.into_into_dart().into_dart(),
            self.opening_fee_msat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::ReceivePaymentResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::ReceivePaymentResponse>
    for crate::models::ReceivePaymentResponse
{
    fn into_into_dart(self) -> crate::models::ReceivePaymentResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::chain::RecommendedFees {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.fastest_fee.into_into_dart().into_dart(),
            self.half_hour_fee.into_into_dart().into_dart(),
            self.hour_fee.into_into_dart().into_dart(),
            self.economy_fee.into_into_dart().into_dart(),
            self.minimum_fee.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::chain::RecommendedFees {}
impl flutter_rust_bridge::IntoIntoDart<crate::chain::RecommendedFees>
    for crate::chain::RecommendedFees
{
    fn into_into_dart(self) -> crate::chain::RecommendedFees {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::RedeemOnchainFundsRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.to_address.into_into_dart().into_dart(),
            self.sat_per_vbyte.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::RedeemOnchainFundsRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::RedeemOnchainFundsRequest>
    for crate::models::RedeemOnchainFundsRequest
{
    fn into_into_dart(self) -> crate::models::RedeemOnchainFundsRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::RedeemOnchainFundsResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.txid.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::RedeemOnchainFundsResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::RedeemOnchainFundsResponse>
    for crate::models::RedeemOnchainFundsResponse
{
    fn into_into_dart(self) -> crate::models::RedeemOnchainFundsResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::RefundRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.swap_address.into_into_dart().into_dart(),
            self.to_address.into_into_dart().into_dart(),
            self.sat_per_vbyte.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::RefundRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::RefundRequest>
    for crate::models::RefundRequest
{
    fn into_into_dart(self) -> crate::models::RefundRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::RefundResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.refund_tx_id.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::RefundResponse {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::RefundResponse>
    for crate::models::RefundResponse
{
    fn into_into_dart(self) -> crate::models::RefundResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::ReportIssueRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::models::ReportIssueRequest::PaymentFailure { data } => {
                [0.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::ReportIssueRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::ReportIssueRequest>
    for crate::models::ReportIssueRequest
{
    fn into_into_dart(self) -> crate::models::ReportIssueRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::ReportPaymentFailureDetails {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.payment_hash.into_into_dart().into_dart(),
            self.comment.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::ReportPaymentFailureDetails
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::ReportPaymentFailureDetails>
    for crate::models::ReportPaymentFailureDetails
{
    fn into_into_dart(self) -> crate::models::ReportPaymentFailureDetails {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::ReverseSwapFeesRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.send_amount_sat.into_into_dart().into_dart(),
            self.claim_tx_feerate.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::ReverseSwapFeesRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::ReverseSwapFeesRequest>
    for crate::models::ReverseSwapFeesRequest
{
    fn into_into_dart(self) -> crate::models::ReverseSwapFeesRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::ReverseSwapInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.claim_pubkey.into_into_dart().into_dart(),
            self.lockup_txid.into_into_dart().into_dart(),
            self.claim_txid.into_into_dart().into_dart(),
            self.onchain_amount_sat.into_into_dart().into_dart(),
            self.status.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::ReverseSwapInfo
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::ReverseSwapInfo>
    for crate::models::ReverseSwapInfo
{
    fn into_into_dart(self) -> crate::models::ReverseSwapInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::ReverseSwapPairInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.min.into_into_dart().into_dart(),
            self.max.into_into_dart().into_dart(),
            self.fees_hash.into_into_dart().into_dart(),
            self.fees_percentage.into_into_dart().into_dart(),
            self.fees_lockup.into_into_dart().into_dart(),
            self.fees_claim.into_into_dart().into_dart(),
            self.total_fees.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::ReverseSwapPairInfo
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::ReverseSwapPairInfo>
    for crate::models::ReverseSwapPairInfo
{
    fn into_into_dart(self) -> crate::models::ReverseSwapPairInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::ReverseSwapStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Initial => 0.into_dart(),
            Self::InProgress => 1.into_dart(),
            Self::Cancelled => 2.into_dart(),
            Self::CompletedSeen => 3.into_dart(),
            Self::CompletedConfirmed => 4.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::ReverseSwapStatus
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::ReverseSwapStatus>
    for crate::models::ReverseSwapStatus
{
    fn into_into_dart(self) -> crate::models::ReverseSwapStatus {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::invoice::RouteHint {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.hops.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::invoice::RouteHint {}
impl flutter_rust_bridge::IntoIntoDart<crate::invoice::RouteHint> for crate::invoice::RouteHint {
    fn into_into_dart(self) -> crate::invoice::RouteHint {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::invoice::RouteHintHop {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.src_node_id.into_into_dart().into_dart(),
            self.short_channel_id.into_into_dart().into_dart(),
            self.fees_base_msat.into_into_dart().into_dart(),
            self.fees_proportional_millionths
                .into_into_dart()
                .into_dart(),
            self.cltv_expiry_delta.into_into_dart().into_dart(),
            self.htlc_minimum_msat.into_into_dart().into_dart(),
            self.htlc_maximum_msat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::invoice::RouteHintHop {}
impl flutter_rust_bridge::IntoIntoDart<crate::invoice::RouteHintHop>
    for crate::invoice::RouteHintHop
{
    fn into_into_dart(self) -> crate::invoice::RouteHintHop {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::SendOnchainRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.amount_sat.into_into_dart().into_dart(),
            self.onchain_recipient_address.into_into_dart().into_dart(),
            self.pair_hash.into_into_dart().into_dart(),
            self.sat_per_vbyte.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::SendOnchainRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::SendOnchainRequest>
    for crate::models::SendOnchainRequest
{
    fn into_into_dart(self) -> crate::models::SendOnchainRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::SendOnchainResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.reverse_swap_info.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::SendOnchainResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::SendOnchainResponse>
    for crate::models::SendOnchainResponse
{
    fn into_into_dart(self) -> crate::models::SendOnchainResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::SendPaymentRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.bolt11.into_into_dart().into_dart(),
            self.amount_msat.into_into_dart().into_dart(),
            self.label.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::SendPaymentRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::SendPaymentRequest>
    for crate::models::SendPaymentRequest
{
    fn into_into_dart(self) -> crate::models::SendPaymentRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::SendPaymentResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.payment.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::SendPaymentResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::SendPaymentResponse>
    for crate::models::SendPaymentResponse
{
    fn into_into_dart(self) -> crate::models::SendPaymentResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::SendSpontaneousPaymentRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.node_id.into_into_dart().into_dart(),
            self.amount_msat.into_into_dart().into_dart(),
            self.extra_tlvs.into_into_dart().into_dart(),
            self.label.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::SendSpontaneousPaymentRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::SendSpontaneousPaymentRequest>
    for crate::models::SendSpontaneousPaymentRequest
{
    fn into_into_dart(self) -> crate::models::SendSpontaneousPaymentRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::ServiceHealthCheckResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.status.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::ServiceHealthCheckResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::ServiceHealthCheckResponse>
    for crate::models::ServiceHealthCheckResponse
{
    fn into_into_dart(self) -> crate::models::ServiceHealthCheckResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::breez_services::SignMessageRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::breez_services::SignMessageRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::breez_services::SignMessageRequest>
    for crate::breez_services::SignMessageRequest
{
    fn into_into_dart(self) -> crate::breez_services::SignMessageRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::breez_services::SignMessageResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.signature.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::breez_services::SignMessageResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::breez_services::SignMessageResponse>
    for crate::breez_services::SignMessageResponse
{
    fn into_into_dart(self) -> crate::breez_services::SignMessageResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::StaticBackupRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.working_dir.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::StaticBackupRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::StaticBackupRequest>
    for crate::models::StaticBackupRequest
{
    fn into_into_dart(self) -> crate::models::StaticBackupRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::StaticBackupResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.backup.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::StaticBackupResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::StaticBackupResponse>
    for crate::models::StaticBackupResponse
{
    fn into_into_dart(self) -> crate::models::StaticBackupResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::lnurl::pay::model::SuccessActionProcessed {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::lnurl::pay::model::SuccessActionProcessed::Aes { result } => {
                [0.into_dart(), result.into_into_dart().into_dart()].into_dart()
            }
            crate::lnurl::pay::model::SuccessActionProcessed::Message { data } => {
                [1.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::lnurl::pay::model::SuccessActionProcessed::Url { data } => {
                [2.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::lnurl::pay::model::SuccessActionProcessed
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::lnurl::pay::model::SuccessActionProcessed>
    for crate::lnurl::pay::model::SuccessActionProcessed
{
    fn into_into_dart(self) -> crate::lnurl::pay::model::SuccessActionProcessed {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::SwapAmountType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Send => 0.into_dart(),
            Self::Receive => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::SwapAmountType {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::SwapAmountType>
    for crate::models::SwapAmountType
{
    fn into_into_dart(self) -> crate::models::SwapAmountType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::SwapInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.bitcoin_address.into_into_dart().into_dart(),
            self.created_at.into_into_dart().into_dart(),
            self.lock_height.into_into_dart().into_dart(),
            self.payment_hash.into_into_dart().into_dart(),
            self.preimage.into_into_dart().into_dart(),
            self.private_key.into_into_dart().into_dart(),
            self.public_key.into_into_dart().into_dart(),
            self.swapper_public_key.into_into_dart().into_dart(),
            self.script.into_into_dart().into_dart(),
            self.bolt11.into_into_dart().into_dart(),
            self.paid_msat.into_into_dart().into_dart(),
            self.total_incoming_txs.into_into_dart().into_dart(),
            self.confirmed_sats.into_into_dart().into_dart(),
            self.unconfirmed_sats.into_into_dart().into_dart(),
            self.status.into_into_dart().into_dart(),
            self.refund_tx_ids.into_into_dart().into_dart(),
            self.unconfirmed_tx_ids.into_into_dart().into_dart(),
            self.confirmed_tx_ids.into_into_dart().into_dart(),
            self.min_allowed_deposit.into_into_dart().into_dart(),
            self.max_allowed_deposit.into_into_dart().into_dart(),
            self.max_swapper_payable.into_into_dart().into_dart(),
            self.last_redeem_error.into_into_dart().into_dart(),
            self.channel_opening_fees.into_into_dart().into_dart(),
            self.confirmed_at.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::SwapInfo {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::SwapInfo> for crate::models::SwapInfo {
    fn into_into_dart(self) -> crate::models::SwapInfo {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::SwapStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Initial => 0.into_dart(),
            Self::WaitingConfirmation => 1.into_dart(),
            Self::Redeemable => 2.into_dart(),
            Self::Redeemed => 3.into_dart(),
            Self::Refundable => 4.into_dart(),
            Self::Completed => 5.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::SwapStatus {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::SwapStatus> for crate::models::SwapStatus {
    fn into_into_dart(self) -> crate::models::SwapStatus {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::fiat::Symbol {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.grapheme.into_into_dart().into_dart(),
            self.template.into_into_dart().into_dart(),
            self.rtl.into_into_dart().into_dart(),
            self.position.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::fiat::Symbol {}
impl flutter_rust_bridge::IntoIntoDart<crate::fiat::Symbol> for crate::fiat::Symbol {
    fn into_into_dart(self) -> crate::fiat::Symbol {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::TlvEntry {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.field_number.into_into_dart().into_dart(),
            self.value.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::models::TlvEntry {}
impl flutter_rust_bridge::IntoIntoDart<crate::models::TlvEntry> for crate::models::TlvEntry {
    fn into_into_dart(self) -> crate::models::TlvEntry {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::models::UnspentTransactionOutput {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.txid.into_into_dart().into_dart(),
            self.outnum.into_into_dart().into_dart(),
            self.amount_millisatoshi.into_into_dart().into_dart(),
            self.address.into_into_dart().into_dart(),
            self.reserved.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::models::UnspentTransactionOutput
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::models::UnspentTransactionOutput>
    for crate::models::UnspentTransactionOutput
{
    fn into_into_dart(self) -> crate::models::UnspentTransactionOutput {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::lnurl::pay::model::UrlSuccessActionData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.description.into_into_dart().into_dart(),
            self.url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::lnurl::pay::model::UrlSuccessActionData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::lnurl::pay::model::UrlSuccessActionData>
    for crate::lnurl::pay::model::UrlSuccessActionData
{
    fn into_into_dart(self) -> crate::lnurl::pay::model::UrlSuccessActionData {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode
    for StreamSink<crate::breez_services::BreezEvent, flutter_rust_bridge::for_generated::DcoCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode
    for StreamSink<crate::models::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::lnurl::pay::model::AesSuccessActionDataDecrypted {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.description, serializer);
        <String>::sse_encode(self.plaintext, serializer);
    }
}

impl SseEncode for crate::lnurl::pay::model::AesSuccessActionDataResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::lnurl::pay::model::AesSuccessActionDataResult::Decrypted { data } => {
                <i32>::sse_encode(0, serializer);
                <crate::lnurl::pay::model::AesSuccessActionDataDecrypted>::sse_encode(
                    data, serializer,
                );
            }
            crate::lnurl::pay::model::AesSuccessActionDataResult::ErrorStatus { reason } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(reason, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::breez_services::BackupFailedData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.error, serializer);
    }
}

impl SseEncode for crate::models::BackupStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.backed_up, serializer);
        <Option<u64>>::sse_encode(self.last_backup_time, serializer);
    }
}

impl SseEncode for crate::binding::BindingEventListener {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::input_parser::BitcoinAddressData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.address, serializer);
        <crate::models::Network>::sse_encode(self.network, serializer);
        <Option<u64>>::sse_encode(self.amount_sat, serializer);
        <Option<String>>::sse_encode(self.label, serializer);
        <Option<String>>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::breez_services::BreezEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::breez_services::BreezEvent::NewBlock { block } => {
                <i32>::sse_encode(0, serializer);
                <u32>::sse_encode(block, serializer);
            }
            crate::breez_services::BreezEvent::InvoicePaid { details } => {
                <i32>::sse_encode(1, serializer);
                <crate::breez_services::InvoicePaidDetails>::sse_encode(details, serializer);
            }
            crate::breez_services::BreezEvent::Synced => {
                <i32>::sse_encode(2, serializer);
            }
            crate::breez_services::BreezEvent::PaymentSucceed { details } => {
                <i32>::sse_encode(3, serializer);
                <crate::models::Payment>::sse_encode(details, serializer);
            }
            crate::breez_services::BreezEvent::PaymentFailed { details } => {
                <i32>::sse_encode(4, serializer);
                <crate::breez_services::PaymentFailedData>::sse_encode(details, serializer);
            }
            crate::breez_services::BreezEvent::BackupStarted => {
                <i32>::sse_encode(5, serializer);
            }
            crate::breez_services::BreezEvent::BackupSucceeded => {
                <i32>::sse_encode(6, serializer);
            }
            crate::breez_services::BreezEvent::BackupFailed { details } => {
                <i32>::sse_encode(7, serializer);
                <crate::breez_services::BackupFailedData>::sse_encode(details, serializer);
            }
            crate::breez_services::BreezEvent::SwapUpdated { details } => {
                <i32>::sse_encode(8, serializer);
                <crate::models::SwapInfo>::sse_encode(details, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::BuyBitcoinProvider {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::models::BuyBitcoinProvider::Moonpay => 0,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::models::BuyBitcoinRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::BuyBitcoinProvider>::sse_encode(self.provider, serializer);
        <Option<crate::models::OpeningFeeParams>>::sse_encode(self.opening_fee_params, serializer);
    }
}

impl SseEncode for crate::models::BuyBitcoinResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.url, serializer);
        <Option<crate::models::OpeningFeeParams>>::sse_encode(self.opening_fee_params, serializer);
    }
}

impl SseEncode for crate::models::ChannelState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::models::ChannelState::PendingOpen => 0,
                crate::models::ChannelState::Opened => 1,
                crate::models::ChannelState::PendingClose => 2,
                crate::models::ChannelState::Closed => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::breez_services::CheckMessageRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
        <String>::sse_encode(self.pubkey, serializer);
        <String>::sse_encode(self.signature, serializer);
    }
}

impl SseEncode for crate::breez_services::CheckMessageResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_valid, serializer);
    }
}

impl SseEncode for crate::models::ClosedChannelPaymentDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::ChannelState>::sse_encode(self.state, serializer);
        <String>::sse_encode(self.funding_txid, serializer);
        <Option<String>>::sse_encode(self.short_channel_id, serializer);
        <Option<String>>::sse_encode(self.closing_txid, serializer);
    }
}

impl SseEncode for crate::models::Config {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.breezserver, serializer);
        <String>::sse_encode(self.chainnotifier_url, serializer);
        <Option<String>>::sse_encode(self.mempoolspace_url, serializer);
        <String>::sse_encode(self.working_dir, serializer);
        <crate::models::Network>::sse_encode(self.network, serializer);
        <u32>::sse_encode(self.payment_timeout_sec, serializer);
        <Option<String>>::sse_encode(self.default_lsp_id, serializer);
        <Option<String>>::sse_encode(self.api_key, serializer);
        <f64>::sse_encode(self.maxfee_percent, serializer);
        <u64>::sse_encode(self.exemptfee_msat, serializer);
        <crate::models::NodeConfig>::sse_encode(self.node_config, serializer);
    }
}

impl SseEncode for crate::models::ConfigureNodeRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.close_to_address, serializer);
    }
}

impl SseEncode for crate::models::ConnectRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::Config>::sse_encode(self.config, serializer);
        <Vec<u8>>::sse_encode(self.seed, serializer);
        <Option<bool>>::sse_encode(self.restore_only, serializer);
    }
}

impl SseEncode for crate::fiat::CurrencyInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.name, serializer);
        <u32>::sse_encode(self.fraction_size, serializer);
        <Option<u32>>::sse_encode(self.spacing, serializer);
        <Option<crate::fiat::Symbol>>::sse_encode(self.symbol, serializer);
        <Option<crate::fiat::Symbol>>::sse_encode(self.uniq_symbol, serializer);
        <Option<Vec<crate::fiat::LocalizedName>>>::sse_encode(self.localized_name, serializer);
        <Option<Vec<crate::fiat::LocaleOverrides>>>::sse_encode(self.locale_overrides, serializer);
    }
}

impl SseEncode for crate::models::EnvironmentType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::models::EnvironmentType::Production => 0,
                crate::models::EnvironmentType::Staging => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::fiat::FiatCurrency {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <crate::fiat::CurrencyInfo>::sse_encode(self.info, serializer);
    }
}

impl SseEncode for crate::models::GreenlightCredentials {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.device_key, serializer);
        <Vec<u8>>::sse_encode(self.device_cert, serializer);
    }
}

impl SseEncode for crate::models::GreenlightNodeConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<crate::models::GreenlightCredentials>>::sse_encode(
            self.partner_credentials,
            serializer,
        );
        <Option<String>>::sse_encode(self.invite_code, serializer);
    }
}

impl SseEncode for crate::models::HealthCheckStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::models::HealthCheckStatus::Operational => 0,
                crate::models::HealthCheckStatus::Maintenance => 1,
                crate::models::HealthCheckStatus::ServiceDisruption => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::input_parser::InputType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::input_parser::InputType::BitcoinAddress { address } => {
                <i32>::sse_encode(0, serializer);
                <crate::input_parser::BitcoinAddressData>::sse_encode(address, serializer);
            }
            crate::input_parser::InputType::Bolt11 { invoice } => {
                <i32>::sse_encode(1, serializer);
                <crate::invoice::LNInvoice>::sse_encode(invoice, serializer);
            }
            crate::input_parser::InputType::NodeId { node_id } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(node_id, serializer);
            }
            crate::input_parser::InputType::Url { url } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(url, serializer);
            }
            crate::input_parser::InputType::LnUrlPay { data } => {
                <i32>::sse_encode(4, serializer);
                <crate::input_parser::LnUrlPayRequestData>::sse_encode(data, serializer);
            }
            crate::input_parser::InputType::LnUrlWithdraw { data } => {
                <i32>::sse_encode(5, serializer);
                <crate::input_parser::LnUrlWithdrawRequestData>::sse_encode(data, serializer);
            }
            crate::input_parser::InputType::LnUrlAuth { data } => {
                <i32>::sse_encode(6, serializer);
                <crate::input_parser::LnUrlAuthRequestData>::sse_encode(data, serializer);
            }
            crate::input_parser::InputType::LnUrlError { data } => {
                <i32>::sse_encode(7, serializer);
                <crate::input_parser::LnUrlErrorData>::sse_encode(data, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::breez_services::InvoicePaidDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.payment_hash, serializer);
        <String>::sse_encode(self.bolt11, serializer);
        <Option<crate::models::Payment>>::sse_encode(self.payment, serializer);
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::fiat::FiatCurrency> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::fiat::FiatCurrency>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::fiat::LocaleOverrides> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::fiat::LocaleOverrides>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::fiat::LocalizedName> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::fiat::LocalizedName>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::lsp::LspInformation> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::lsp::LspInformation>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::MetadataFilter> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::MetadataFilter>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::OpeningFeeParams> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::OpeningFeeParams>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::Payment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::Payment>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::PaymentTypeFilter> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::PaymentTypeFilter>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::models::ListPaymentsRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<Vec<crate::models::PaymentTypeFilter>>>::sse_encode(self.filters, serializer);
        <Option<Vec<crate::models::MetadataFilter>>>::sse_encode(self.metadata_filters, serializer);
        <Option<i64>>::sse_encode(self.from_timestamp, serializer);
        <Option<i64>>::sse_encode(self.to_timestamp, serializer);
        <Option<bool>>::sse_encode(self.include_failures, serializer);
        <Option<u32>>::sse_encode(self.offset, serializer);
        <Option<u32>>::sse_encode(self.limit, serializer);
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::fiat::Rate> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::fiat::Rate>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::ReverseSwapInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::ReverseSwapInfo>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::invoice::RouteHint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::invoice::RouteHint>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::invoice::RouteHintHop> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::invoice::RouteHintHop>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::SwapInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::SwapInfo>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::TlvEntry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::TlvEntry>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::models::UnspentTransactionOutput> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::models::UnspentTransactionOutput>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::invoice::LNInvoice {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.bolt11, serializer);
        <crate::models::Network>::sse_encode(self.network, serializer);
        <String>::sse_encode(self.payee_pubkey, serializer);
        <String>::sse_encode(self.payment_hash, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
        <Option<String>>::sse_encode(self.description_hash, serializer);
        <Option<u64>>::sse_encode(self.amount_msat, serializer);
        <u64>::sse_encode(self.timestamp, serializer);
        <u64>::sse_encode(self.expiry, serializer);
        <Vec<crate::invoice::RouteHint>>::sse_encode(self.routing_hints, serializer);
        <Vec<u8>>::sse_encode(self.payment_secret, serializer);
        <u64>::sse_encode(self.min_final_cltv_expiry_delta, serializer);
    }
}

impl SseEncode for crate::models::LnPaymentDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.payment_hash, serializer);
        <String>::sse_encode(self.label, serializer);
        <String>::sse_encode(self.destination_pubkey, serializer);
        <String>::sse_encode(self.payment_preimage, serializer);
        <bool>::sse_encode(self.keysend, serializer);
        <String>::sse_encode(self.bolt11, serializer);
        <Option<String>>::sse_encode(self.open_channel_bolt11, serializer);
        <Option<crate::lnurl::pay::model::SuccessActionProcessed>>::sse_encode(
            self.lnurl_success_action,
            serializer,
        );
        <Option<String>>::sse_encode(self.lnurl_pay_domain, serializer);
        <Option<String>>::sse_encode(self.lnurl_pay_comment, serializer);
        <Option<String>>::sse_encode(self.ln_address, serializer);
        <Option<String>>::sse_encode(self.lnurl_metadata, serializer);
        <Option<String>>::sse_encode(self.lnurl_withdraw_endpoint, serializer);
        <Option<crate::models::SwapInfo>>::sse_encode(self.swap_info, serializer);
        <Option<crate::models::ReverseSwapInfo>>::sse_encode(self.reverse_swap_info, serializer);
        <Option<u32>>::sse_encode(self.pending_expiration_block, serializer);
    }
}

impl SseEncode for crate::input_parser::LnUrlAuthRequestData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.k1, serializer);
        <Option<String>>::sse_encode(self.action, serializer);
        <String>::sse_encode(self.domain, serializer);
        <String>::sse_encode(self.url, serializer);
    }
}

impl SseEncode for crate::models::LnUrlCallbackStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::LnUrlCallbackStatus::Ok => {
                <i32>::sse_encode(0, serializer);
            }
            crate::models::LnUrlCallbackStatus::ErrorStatus { data } => {
                <i32>::sse_encode(1, serializer);
                <crate::input_parser::LnUrlErrorData>::sse_encode(data, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::input_parser::LnUrlErrorData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.reason, serializer);
    }
}

impl SseEncode for crate::lnurl::pay::model::LnUrlPayErrorData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.payment_hash, serializer);
        <String>::sse_encode(self.reason, serializer);
    }
}

impl SseEncode for crate::models::LnUrlPayRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::input_parser::LnUrlPayRequestData>::sse_encode(self.data, serializer);
        <u64>::sse_encode(self.amount_msat, serializer);
        <Option<String>>::sse_encode(self.comment, serializer);
        <Option<String>>::sse_encode(self.payment_label, serializer);
    }
}

impl SseEncode for crate::input_parser::LnUrlPayRequestData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.callback, serializer);
        <u64>::sse_encode(self.min_sendable, serializer);
        <u64>::sse_encode(self.max_sendable, serializer);
        <String>::sse_encode(self.metadata_str, serializer);
        <u16>::sse_encode(self.comment_allowed, serializer);
        <String>::sse_encode(self.domain, serializer);
        <bool>::sse_encode(self.allows_nostr, serializer);
        <Option<String>>::sse_encode(self.nostr_pubkey, serializer);
        <Option<String>>::sse_encode(self.ln_address, serializer);
    }
}

impl SseEncode for crate::lnurl::pay::model::LnUrlPayResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::lnurl::pay::model::LnUrlPayResult::EndpointSuccess { data } => {
                <i32>::sse_encode(0, serializer);
                <crate::lnurl::pay::model::LnUrlPaySuccessData>::sse_encode(data, serializer);
            }
            crate::lnurl::pay::model::LnUrlPayResult::EndpointError { data } => {
                <i32>::sse_encode(1, serializer);
                <crate::input_parser::LnUrlErrorData>::sse_encode(data, serializer);
            }
            crate::lnurl::pay::model::LnUrlPayResult::PayError { data } => {
                <i32>::sse_encode(2, serializer);
                <crate::lnurl::pay::model::LnUrlPayErrorData>::sse_encode(data, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::lnurl::pay::model::LnUrlPaySuccessData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::Payment>::sse_encode(self.payment, serializer);
        <Option<crate::lnurl::pay::model::SuccessActionProcessed>>::sse_encode(
            self.success_action,
            serializer,
        );
    }
}

impl SseEncode for crate::models::LnUrlWithdrawRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::input_parser::LnUrlWithdrawRequestData>::sse_encode(self.data, serializer);
        <u64>::sse_encode(self.amount_msat, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
    }
}

impl SseEncode for crate::input_parser::LnUrlWithdrawRequestData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.callback, serializer);
        <String>::sse_encode(self.k1, serializer);
        <String>::sse_encode(self.default_description, serializer);
        <u64>::sse_encode(self.min_withdrawable, serializer);
        <u64>::sse_encode(self.max_withdrawable, serializer);
    }
}

impl SseEncode for crate::models::LnUrlWithdrawResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::LnUrlWithdrawResult::Ok { data } => {
                <i32>::sse_encode(0, serializer);
                <crate::models::LnUrlWithdrawSuccessData>::sse_encode(data, serializer);
            }
            crate::models::LnUrlWithdrawResult::ErrorStatus { data } => {
                <i32>::sse_encode(1, serializer);
                <crate::input_parser::LnUrlErrorData>::sse_encode(data, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::LnUrlWithdrawSuccessData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::invoice::LNInvoice>::sse_encode(self.invoice, serializer);
    }
}

impl SseEncode for crate::fiat::LocaleOverrides {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.locale, serializer);
        <Option<u32>>::sse_encode(self.spacing, serializer);
        <crate::fiat::Symbol>::sse_encode(self.symbol, serializer);
    }
}

impl SseEncode for crate::fiat::LocalizedName {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.locale, serializer);
        <String>::sse_encode(self.name, serializer);
    }
}

impl SseEncode for crate::models::LogEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.line, serializer);
        <String>::sse_encode(self.level, serializer);
    }
}

impl SseEncode for crate::lsp::LspInformation {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.name, serializer);
        <String>::sse_encode(self.widget_url, serializer);
        <String>::sse_encode(self.pubkey, serializer);
        <String>::sse_encode(self.host, serializer);
        <i64>::sse_encode(self.base_fee_msat, serializer);
        <f64>::sse_encode(self.fee_rate, serializer);
        <u32>::sse_encode(self.time_lock_delta, serializer);
        <i64>::sse_encode(self.min_htlc_msat, serializer);
        <Vec<u8>>::sse_encode(self.lsp_pubkey, serializer);
        <crate::models::OpeningFeeParamsMenu>::sse_encode(self.opening_fee_params_list, serializer);
    }
}

impl SseEncode for crate::models::MaxReverseSwapAmountResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.total_sat, serializer);
    }
}

impl SseEncode for crate::lnurl::pay::model::MessageSuccessActionData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::models::MetadataFilter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.json_path, serializer);
        <String>::sse_encode(self.json_value, serializer);
    }
}

impl SseEncode for crate::models::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::models::Network::Bitcoin => 0,
                crate::models::Network::Testnet => 1,
                crate::models::Network::Signet => 2,
                crate::models::Network::Regtest => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::models::NodeConfig {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::NodeConfig::Greenlight { config } => {
                <i32>::sse_encode(0, serializer);
                <crate::models::GreenlightNodeConfig>::sse_encode(config, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::NodeCredentials {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::NodeCredentials::Greenlight { credentials } => {
                <i32>::sse_encode(0, serializer);
                <crate::models::GreenlightCredentials>::sse_encode(credentials, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::NodeState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <u32>::sse_encode(self.block_height, serializer);
        <u64>::sse_encode(self.channels_balance_msat, serializer);
        <u64>::sse_encode(self.onchain_balance_msat, serializer);
        <u64>::sse_encode(self.pending_onchain_balance_msat, serializer);
        <Vec<crate::models::UnspentTransactionOutput>>::sse_encode(self.utxos, serializer);
        <u64>::sse_encode(self.max_payable_msat, serializer);
        <u64>::sse_encode(self.max_receivable_msat, serializer);
        <u64>::sse_encode(self.max_single_payment_amount_msat, serializer);
        <u64>::sse_encode(self.max_chan_reserve_msats, serializer);
        <Vec<String>>::sse_encode(self.connected_peers, serializer);
        <u64>::sse_encode(self.inbound_liquidity_msats, serializer);
    }
}

impl SseEncode for crate::models::OnchainPaymentLimitsResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.min_sat, serializer);
        <u64>::sse_encode(self.max_sat, serializer);
    }
}

impl SseEncode for crate::models::OpenChannelFeeRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u64>>::sse_encode(self.amount_msat, serializer);
        <Option<u32>>::sse_encode(self.expiry, serializer);
    }
}

impl SseEncode for crate::models::OpenChannelFeeResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u64>>::sse_encode(self.fee_msat, serializer);
        <crate::models::OpeningFeeParams>::sse_encode(self.fee_params, serializer);
    }
}

impl SseEncode for crate::models::OpeningFeeParams {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.min_msat, serializer);
        <u32>::sse_encode(self.proportional, serializer);
        <String>::sse_encode(self.valid_until, serializer);
        <u32>::sse_encode(self.max_idle_time, serializer);
        <u32>::sse_encode(self.max_client_to_self_delay, serializer);
        <String>::sse_encode(self.promise, serializer);
    }
}

impl SseEncode for crate::models::OpeningFeeParamsMenu {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::models::OpeningFeeParams>>::sse_encode(self.values, serializer);
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::models::GreenlightCredentials> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::models::GreenlightCredentials>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<i64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <i64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::invoice::LNInvoice> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::invoice::LNInvoice>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::lsp::LspInformation> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::lsp::LspInformation>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::models::NodeCredentials> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::models::NodeCredentials>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::models::OpeningFeeParams> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::models::OpeningFeeParams>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::models::Payment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::models::Payment>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::models::ReverseSwapInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::models::ReverseSwapInfo>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::lnurl::pay::model::SuccessActionProcessed> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::lnurl::pay::model::SuccessActionProcessed>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::models::SwapInfo> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::models::SwapInfo>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::fiat::Symbol> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::fiat::Symbol>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u32> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u32>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<String>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<String>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::fiat::LocaleOverrides>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::fiat::LocaleOverrides>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::fiat::LocalizedName>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::fiat::LocalizedName>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::models::MetadataFilter>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::models::MetadataFilter>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::models::PaymentTypeFilter>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::models::PaymentTypeFilter>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<u8>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::models::TlvEntry>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::models::TlvEntry>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::models::PayOnchainRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.recipient_address, serializer);
        <crate::models::PrepareOnchainPaymentResponse>::sse_encode(self.prepare_res, serializer);
    }
}

impl SseEncode for crate::models::PayOnchainResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::ReverseSwapInfo>::sse_encode(self.reverse_swap_info, serializer);
    }
}

impl SseEncode for crate::models::Payment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <crate::models::PaymentType>::sse_encode(self.payment_type, serializer);
        <i64>::sse_encode(self.payment_time, serializer);
        <u64>::sse_encode(self.amount_msat, serializer);
        <u64>::sse_encode(self.fee_msat, serializer);
        <crate::models::PaymentStatus>::sse_encode(self.status, serializer);
        <Option<String>>::sse_encode(self.error, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
        <crate::models::PaymentDetails>::sse_encode(self.details, serializer);
        <Option<String>>::sse_encode(self.metadata, serializer);
    }
}

impl SseEncode for crate::models::PaymentDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::PaymentDetails::Ln { data } => {
                <i32>::sse_encode(0, serializer);
                <crate::models::LnPaymentDetails>::sse_encode(data, serializer);
            }
            crate::models::PaymentDetails::ClosedChannel { data } => {
                <i32>::sse_encode(1, serializer);
                <crate::models::ClosedChannelPaymentDetails>::sse_encode(data, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::breez_services::PaymentFailedData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.error, serializer);
        <String>::sse_encode(self.node_id, serializer);
        <Option<crate::invoice::LNInvoice>>::sse_encode(self.invoice, serializer);
        <Option<String>>::sse_encode(self.label, serializer);
    }
}

impl SseEncode for crate::models::PaymentStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::models::PaymentStatus::Pending => 0,
                crate::models::PaymentStatus::Complete => 1,
                crate::models::PaymentStatus::Failed => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::models::PaymentType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::models::PaymentType::Sent => 0,
                crate::models::PaymentType::Received => 1,
                crate::models::PaymentType::ClosedChannel => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::models::PaymentTypeFilter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::models::PaymentTypeFilter::Sent => 0,
                crate::models::PaymentTypeFilter::Received => 1,
                crate::models::PaymentTypeFilter::ClosedChannel => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::models::PrepareOnchainPaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.amount_sat, serializer);
        <crate::models::SwapAmountType>::sse_encode(self.amount_type, serializer);
        <u32>::sse_encode(self.claim_tx_feerate, serializer);
    }
}

impl SseEncode for crate::models::PrepareOnchainPaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.fees_hash, serializer);
        <f64>::sse_encode(self.fees_percentage, serializer);
        <u64>::sse_encode(self.fees_lockup, serializer);
        <u64>::sse_encode(self.fees_claim, serializer);
        <u64>::sse_encode(self.sender_amount_sat, serializer);
        <u64>::sse_encode(self.recipient_amount_sat, serializer);
        <u64>::sse_encode(self.total_fees, serializer);
    }
}

impl SseEncode for crate::models::PrepareRedeemOnchainFundsRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.to_address, serializer);
        <u32>::sse_encode(self.sat_per_vbyte, serializer);
    }
}

impl SseEncode for crate::models::PrepareRedeemOnchainFundsResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.tx_weight, serializer);
        <u64>::sse_encode(self.tx_fee_sat, serializer);
    }
}

impl SseEncode for crate::models::PrepareRefundRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.swap_address, serializer);
        <String>::sse_encode(self.to_address, serializer);
        <u32>::sse_encode(self.sat_per_vbyte, serializer);
    }
}

impl SseEncode for crate::models::PrepareRefundResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u32>::sse_encode(self.refund_tx_weight, serializer);
        <u64>::sse_encode(self.refund_tx_fee_sat, serializer);
    }
}

impl SseEncode for crate::fiat::Rate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.coin, serializer);
        <f64>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for crate::models::ReceiveOnchainRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<crate::models::OpeningFeeParams>>::sse_encode(self.opening_fee_params, serializer);
    }
}

impl SseEncode for crate::models::ReceivePaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.amount_msat, serializer);
        <String>::sse_encode(self.description, serializer);
        <Option<Vec<u8>>>::sse_encode(self.preimage, serializer);
        <Option<crate::models::OpeningFeeParams>>::sse_encode(self.opening_fee_params, serializer);
        <Option<bool>>::sse_encode(self.use_description_hash, serializer);
        <Option<u32>>::sse_encode(self.expiry, serializer);
        <Option<u32>>::sse_encode(self.cltv, serializer);
    }
}

impl SseEncode for crate::models::ReceivePaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::invoice::LNInvoice>::sse_encode(self.ln_invoice, serializer);
        <Option<crate::models::OpeningFeeParams>>::sse_encode(self.opening_fee_params, serializer);
        <Option<u64>>::sse_encode(self.opening_fee_msat, serializer);
    }
}

impl SseEncode for crate::chain::RecommendedFees {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.fastest_fee, serializer);
        <u64>::sse_encode(self.half_hour_fee, serializer);
        <u64>::sse_encode(self.hour_fee, serializer);
        <u64>::sse_encode(self.economy_fee, serializer);
        <u64>::sse_encode(self.minimum_fee, serializer);
    }
}

impl SseEncode for crate::models::RedeemOnchainFundsRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.to_address, serializer);
        <u32>::sse_encode(self.sat_per_vbyte, serializer);
    }
}

impl SseEncode for crate::models::RedeemOnchainFundsResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.txid, serializer);
    }
}

impl SseEncode for crate::models::RefundRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.swap_address, serializer);
        <String>::sse_encode(self.to_address, serializer);
        <u32>::sse_encode(self.sat_per_vbyte, serializer);
    }
}

impl SseEncode for crate::models::RefundResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.refund_tx_id, serializer);
    }
}

impl SseEncode for crate::models::ReportIssueRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::models::ReportIssueRequest::PaymentFailure { data } => {
                <i32>::sse_encode(0, serializer);
                <crate::models::ReportPaymentFailureDetails>::sse_encode(data, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::ReportPaymentFailureDetails {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.payment_hash, serializer);
        <Option<String>>::sse_encode(self.comment, serializer);
    }
}

impl SseEncode for crate::models::ReverseSwapFeesRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<u64>>::sse_encode(self.send_amount_sat, serializer);
        <Option<u32>>::sse_encode(self.claim_tx_feerate, serializer);
    }
}

impl SseEncode for crate::models::ReverseSwapInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.claim_pubkey, serializer);
        <Option<String>>::sse_encode(self.lockup_txid, serializer);
        <Option<String>>::sse_encode(self.claim_txid, serializer);
        <u64>::sse_encode(self.onchain_amount_sat, serializer);
        <crate::models::ReverseSwapStatus>::sse_encode(self.status, serializer);
    }
}

impl SseEncode for crate::models::ReverseSwapPairInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.min, serializer);
        <u64>::sse_encode(self.max, serializer);
        <String>::sse_encode(self.fees_hash, serializer);
        <f64>::sse_encode(self.fees_percentage, serializer);
        <u64>::sse_encode(self.fees_lockup, serializer);
        <u64>::sse_encode(self.fees_claim, serializer);
        <Option<u64>>::sse_encode(self.total_fees, serializer);
    }
}

impl SseEncode for crate::models::ReverseSwapStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::models::ReverseSwapStatus::Initial => 0,
                crate::models::ReverseSwapStatus::InProgress => 1,
                crate::models::ReverseSwapStatus::Cancelled => 2,
                crate::models::ReverseSwapStatus::CompletedSeen => 3,
                crate::models::ReverseSwapStatus::CompletedConfirmed => 4,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::invoice::RouteHint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::invoice::RouteHintHop>>::sse_encode(self.hops, serializer);
    }
}

impl SseEncode for crate::invoice::RouteHintHop {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.src_node_id, serializer);
        <u64>::sse_encode(self.short_channel_id, serializer);
        <u32>::sse_encode(self.fees_base_msat, serializer);
        <u32>::sse_encode(self.fees_proportional_millionths, serializer);
        <u64>::sse_encode(self.cltv_expiry_delta, serializer);
        <Option<u64>>::sse_encode(self.htlc_minimum_msat, serializer);
        <Option<u64>>::sse_encode(self.htlc_maximum_msat, serializer);
    }
}

impl SseEncode for crate::models::SendOnchainRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.amount_sat, serializer);
        <String>::sse_encode(self.onchain_recipient_address, serializer);
        <String>::sse_encode(self.pair_hash, serializer);
        <u32>::sse_encode(self.sat_per_vbyte, serializer);
    }
}

impl SseEncode for crate::models::SendOnchainResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::ReverseSwapInfo>::sse_encode(self.reverse_swap_info, serializer);
    }
}

impl SseEncode for crate::models::SendPaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.bolt11, serializer);
        <Option<u64>>::sse_encode(self.amount_msat, serializer);
        <Option<String>>::sse_encode(self.label, serializer);
    }
}

impl SseEncode for crate::models::SendPaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::Payment>::sse_encode(self.payment, serializer);
    }
}

impl SseEncode for crate::models::SendSpontaneousPaymentRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.node_id, serializer);
        <u64>::sse_encode(self.amount_msat, serializer);
        <Option<Vec<crate::models::TlvEntry>>>::sse_encode(self.extra_tlvs, serializer);
        <Option<String>>::sse_encode(self.label, serializer);
    }
}

impl SseEncode for crate::models::ServiceHealthCheckResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::models::HealthCheckStatus>::sse_encode(self.status, serializer);
    }
}

impl SseEncode for crate::breez_services::SignMessageRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::breez_services::SignMessageResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.signature, serializer);
    }
}

impl SseEncode for crate::models::StaticBackupRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.working_dir, serializer);
    }
}

impl SseEncode for crate::models::StaticBackupResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<Vec<String>>>::sse_encode(self.backup, serializer);
    }
}

impl SseEncode for crate::lnurl::pay::model::SuccessActionProcessed {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::lnurl::pay::model::SuccessActionProcessed::Aes { result } => {
                <i32>::sse_encode(0, serializer);
                <crate::lnurl::pay::model::AesSuccessActionDataResult>::sse_encode(
                    result, serializer,
                );
            }
            crate::lnurl::pay::model::SuccessActionProcessed::Message { data } => {
                <i32>::sse_encode(1, serializer);
                <crate::lnurl::pay::model::MessageSuccessActionData>::sse_encode(data, serializer);
            }
            crate::lnurl::pay::model::SuccessActionProcessed::Url { data } => {
                <i32>::sse_encode(2, serializer);
                <crate::lnurl::pay::model::UrlSuccessActionData>::sse_encode(data, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::models::SwapAmountType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::models::SwapAmountType::Send => 0,
                crate::models::SwapAmountType::Receive => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::models::SwapInfo {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.bitcoin_address, serializer);
        <i64>::sse_encode(self.created_at, serializer);
        <i64>::sse_encode(self.lock_height, serializer);
        <Vec<u8>>::sse_encode(self.payment_hash, serializer);
        <Vec<u8>>::sse_encode(self.preimage, serializer);
        <Vec<u8>>::sse_encode(self.private_key, serializer);
        <Vec<u8>>::sse_encode(self.public_key, serializer);
        <Vec<u8>>::sse_encode(self.swapper_public_key, serializer);
        <Vec<u8>>::sse_encode(self.script, serializer);
        <Option<String>>::sse_encode(self.bolt11, serializer);
        <u64>::sse_encode(self.paid_msat, serializer);
        <u64>::sse_encode(self.total_incoming_txs, serializer);
        <u64>::sse_encode(self.confirmed_sats, serializer);
        <u64>::sse_encode(self.unconfirmed_sats, serializer);
        <crate::models::SwapStatus>::sse_encode(self.status, serializer);
        <Vec<String>>::sse_encode(self.refund_tx_ids, serializer);
        <Vec<String>>::sse_encode(self.unconfirmed_tx_ids, serializer);
        <Vec<String>>::sse_encode(self.confirmed_tx_ids, serializer);
        <i64>::sse_encode(self.min_allowed_deposit, serializer);
        <i64>::sse_encode(self.max_allowed_deposit, serializer);
        <i64>::sse_encode(self.max_swapper_payable, serializer);
        <Option<String>>::sse_encode(self.last_redeem_error, serializer);
        <Option<crate::models::OpeningFeeParams>>::sse_encode(
            self.channel_opening_fees,
            serializer,
        );
        <Option<u32>>::sse_encode(self.confirmed_at, serializer);
    }
}

impl SseEncode for crate::models::SwapStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::models::SwapStatus::Initial => 0,
                crate::models::SwapStatus::WaitingConfirmation => 1,
                crate::models::SwapStatus::Redeemable => 2,
                crate::models::SwapStatus::Redeemed => 3,
                crate::models::SwapStatus::Refundable => 4,
                crate::models::SwapStatus::Completed => 5,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::fiat::Symbol {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.grapheme, serializer);
        <Option<String>>::sse_encode(self.template, serializer);
        <Option<bool>>::sse_encode(self.rtl, serializer);
        <Option<u32>>::sse_encode(self.position, serializer);
    }
}

impl SseEncode for crate::models::TlvEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.field_number, serializer);
        <Vec<u8>>::sse_encode(self.value, serializer);
    }
}

impl SseEncode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::models::UnspentTransactionOutput {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.txid, serializer);
        <u32>::sse_encode(self.outnum, serializer);
        <u64>::sse_encode(self.amount_millisatoshi, serializer);
        <String>::sse_encode(self.address, serializer);
        <bool>::sse_encode(self.reserved, serializer);
    }
}

impl SseEncode for crate::lnurl::pay::model::UrlSuccessActionData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.description, serializer);
        <String>::sse_encode(self.url, serializer);
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
